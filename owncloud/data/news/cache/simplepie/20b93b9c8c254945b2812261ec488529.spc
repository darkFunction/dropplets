a:4:{s:5:"child";a:1:{s:0:"";a:1:{s:3:"rss";a:1:{i:0;a:6:{s:4:"data";s:4:"
  
";s:7:"attribs";a:1:{s:0:"";a:1:{s:7:"version";s:3:"2.0";}}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:1:{s:7:"channel";a:1:{i:0;a:6:{s:4:"data";s:1096:"
    
    
    
    
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:9:"NSHipster";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:87:"NSHipster is a journal of the overlooked bits in Objective-C and Cocoa. Updated weekly.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:20:"http://nshipster.com";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 07 Apr 2014 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"item";a:89:{i:0;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:22:"Configuration Profiles";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:6171:"<p>One of the major criticisms of iOS as a platform is how locked down it is.</p>

<p>Each app is an island, only able to communicate with other parts of the system under strict terms, and with only then with nontrivial effort. There&#39;s no way, for example, for an app to open its own settings in Settings.app. There&#39;s no way for apps to change their icon at runtime, or to customize the behavior of system-wide functionality, like Notification Center or Siri. Apps can&#39;t embed or share views with one another, or communicate locally.</p>

<p>So it may come as a surprise how many of these limitations to iOS can be worked around with a bit of XML.</p>

<p>The feature in question, and topic of this week&#39;s article is <a href="https://developer.apple.com/library/ios/featuredarticles/iPhoneConfigurationProfileRef/Introduction/Introduction.html">iOS Configuration Profiles</a>.</p>

<hr>

<p>Unless you&#39;ve worked in the enterprise or on wide-scale educational software, there&#39;s a good chance that you haven&#39;t heard much about configuration profiles.</p>

<p><strong>Configuration Profiles are not to be confused with Provisioning Profiles.</strong></p>

<p>A <em>provisioning profile</em> is used to determine that an app is authorized by the developer to run on a particular device. A <em>configuration profile</em> can be used to apply a variety of settings to a device.</p>

<p>Both configuration &amp; provisioning profiles are displayed in similar fashion under <code>Settings.app &gt; General &gt; Profiles</code>, which doesn&#39;t help with the potential confusion.</p>

<p>Each configuration file includes a number of payloads, each of which can specify configuration, including:</p>

<ul>
<li>Whitelisting &amp; Authenticating AirPlay &amp; AirPrint destinations</li>
<li>Setting up VPN, HTTP Proxies, WiFi &amp; Cellular Network</li>
<li>Configuring Email (SMTP, Exchange), Calendar (CalDAV), and Contacts (CardDAV, LDAP, AD)</li>
<li>Restricting access to Apps, Device Features, Web Content, and Media Playback</li>
<li>Managing Certificates and SSO Credentials</li>
<li>Installing Web Clips, Apps, and Custom Fonts</li>
</ul>

<p>There are several ways to deploy configuration profiles:</p>

<ul>
<li>Attaching to an email</li>
<li>Linking to one on a webpage</li>
<li>Using over-the air configuration</li>
<li>Using Apple Configurator</li>
</ul>

<blockquote>
<p>In addition to deploying configuration profiles, the <a href="https://itunes.apple.com/us/app/apple-configurator/id434433123?mt=12">Apple Configurator</a> can generate profiles, as an alternative to hand-writing XML yourself.</p>
</blockquote>

<p><img src="http://nshipster.s3.amazonaws.com/ios-configurator-generate.png" alt="iOS Configurator - Generate"></p>

<h2>Use Cases</h2>

<p>It&#39;s easy to recognize how invaluable the aforementioned features would be to anyone attempting to deploy iOS devices within a large business or school.</p>

<p>But how can this be used to bring new functionality to conventional apps? Admittedly, the use of configuration profiles is relatively uncharted territory for many developers, but there could be entire categories of app functionality yet to be realized.</p>

<p>Here are a few ideas to chew on:</p>

<h3>Distributing Development Builds</h3>

<p>If you&#39;re ever used a development distribution service like <a href="http://hockeyapp.net">HockeyApp</a> or <a href="testflightapp.com">TestFlight</a>, you&#39;ve installed a configuration profile—perhaps without knowing it!</p>

<p>Using a configuration profile, these services can automatically get information like device UDID, model name, and even add a new web clip on the home screen to download available apps.</p>

<p>Although Apple Legal gets twitch at even the slightest intimation of third-party app stores, perhaps there are ways for configuration profiles to enable new forms of collaboration. It&#39;s unclear what the effect of <a href="http://www.theverge.com/apps/2014/2/21/5434060/apple-buys-maker-of-the-ios-testing-platform-testflight">Apple&#39;s acquisition of Burstly</a> (TestFlight&#39;s parent company) will be in the long term, but for now, this could be a great opportunity for some further exploration of this space.</p>

<h3>Installing Custom Fonts</h3>

<p>A recent addition to configuration profiles is the ability to embed font payloads, allowing for new typefaces to be installed across the system (for example, to be used in Pages or Keynote).</p>

<p>Just as EOF / WOFF / SVG fonts allow typefaces to be distributed over the web, type foundries could similarly offer TTF / OTF files to iOS devices using an app with a configuration profile. Since configuration profiles can be installed from a web page, an app could embed and run a HTTP process to locally serve a webpage with a profile and payload.</p>

<h3>Enhancing Security</h3>

<p>Security has quickly become a killer feature for apps, as discussed in our article about <a href="http://nshipster.com/multipeer-connectivity/">Multipeer Connectivity</a>.</p>

<p>Perhaps configuration profiles, with the ability to embed certificates and single sign-on credentials, could add another level of security to communication apps.</p>

<h3>Expanding the Scope of In-App Purchases</h3>

<p>Imagine if IAP could be used to unlock functionality in the real world.</p>

<p>A clever combination of IAP and auto-expiring configuration profiles could be used to allow access to secure WiFi networks, printers, or AirPlay devices. Add in IAP subscriptions and captive WiFi network messages, and it could make for a compelling business model.</p>

<hr>

<p>To its credit, tight restrictions have helped ensure a consistent and secure user experience on iOS from its inception, and Apple should be lauded for engineering the platform in such a way that an entire ecosystem of 3rd party software is able to operate without compromising that experience.</p>

<p>Of course, as developers, we&#39;re always going to want a more functionality open to them.  iOS Configuration Profiles are a lesser-known feature that open a wide range of possibilities, that we have only begun to understand.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 07 Apr 2014 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:44:"http://nshipster.com/configuration-profiles/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:44:"http://nshipster.com/configuration-profiles/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:1;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:19:"AVSpeechSynthesizer";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:12446:"<p>Though we&#39;re a long way off from <a href="https://www.youtube.com/watch?v=ARJ8cAGm6JE"><em>Hal</em></a> or <a href="https://www.youtube.com/watch?v=WzV6mXIOVl4"><em>Her</em></a>, we should never forget about the billions of other people out there for us to talk to.</p>

<p>Of the thousands of languages in existence, an individual is fortunate to gain a command of just two within their lifetime. And yet, over several millennia of human co-existence, civilization has managed to make things work, more or less, through an ad-hoc network of interpreters, translators, scholars, and children raised in the mixed linguistic traditions of their parents. We&#39;ve seen that mutual understanding fosters peace, and that conversely, mutual unintelligibility destabilizes human relations.</p>

<p>It is fitting that the development of computational linguistics should coincide with the emergence of the international community we have today. Working towards mutual understanding, intergovernmental organizations like the United Nations and European Union have produced a substantial corpora of <a href="http://en.wikipedia.org/wiki/Parallel_text">parallel texts</a>, which form the foundation of modern language translation technologies.</p>

<blockquote>
<p>Another related linguistic development is the <a href="http://en.wikipedia.org/wiki/Esperanto">Esperanto</a> language, created by L. L. Zamenhof in an effort to promote harmony between people of different countries.</p>
</blockquote>

<p>And while automatic text translation has reached an acceptable level for everyday communication, there is still a divide when we venture out into unfamiliar places. There is still much work to be done in order to augment our ability to communicate with one another in person.</p>

<hr>

<p>Introduced in iOS 7, <code>AVSpeechSynthesizer</code> produces synthesized speech from a given <code>AVSpeechUtterance</code>. Each utterance can adjust its rate of speech and pitch, and be configured to use any one of the available <code>AVSpeechSynthesisVoice</code>s:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="s">@&quot;Hello, World!&quot;</span><span class="p">;</span>
<span class="n">AVSpeechUtterance</span> <span class="o">*</span><span class="n">utterance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AVSpeechUtterance</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithString</span><span class="o">:</span><span class="n">string</span><span class="p">];</span>
<span class="n">utterance</span><span class="p">.</span><span class="n">voice</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVSpeechSynthesisVoice</span> <span class="n">voiceWithLanguage</span><span class="o">:</span><span class="s">@&quot;en-US&quot;</span><span class="p">];</span>

<span class="n">AVSpeechSynthesizer</span> <span class="o">*</span><span class="n">speechSynthesizer</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AVSpeechSynthesizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="p">[</span><span class="n">speechSynthesizer</span> <span class="n">speakUtterance</span><span class="o">:</span><span class="n">utterance</span><span class="p">];</span>
</code></pre></div>
<p>When speaking, a synthesizer can either be paused immediately or on the next word boundary, which makes for a less jarring user experience.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[</span><span class="n">speechSynthesizer</span> <span class="n">pauseSpeakingAtBoundary</span><span class="o">:</span><span class="n">AVSpeechBoundaryWord</span><span class="p">];</span>
</code></pre></div>
<h2>Supported Languages</h2>

<p>Mac OS 9 users will no doubt have fond memories of the old system voices: Bubbles, Cellos, Pipe Organ, and Bad News.</p>

<blockquote>
<p>These can still be installed on Mac OS X. Just look under the &quot;English (United States) - Novelty&quot; voices in the &quot;Dictation &amp; Speech&quot; preference pane.</p>
</blockquote>

<p>In the name of quality over quantity, each language is provided a voice for each major locale region. So instead of asking for &quot;Fred&quot; and &quot;Markus&quot;, <code>AVSpeechSynthesisVoice</code> asks for <code>en-US</code> and <code>de-DE</code>.</p>

<p>As of iOS 7.1, <code>[AVSpeechSynthesisVoice speechVoices]</code> the following languages and locales are supported:</p>

<ul>
<li>Arabic (<code>ar-SA</code>)</li>
<li>Chinese (<code>zh-CN</code>, <code>zh-HK</code>, <code>zh-TW</code>)</li>
<li>Czech (<code>cs-CZ</code>)</li>
<li>Danish (<code>da-DK</code>)</li>
<li>Dutch (<code>nl-BE</code>, <code>nl-NL</code>)</li>
<li>English (<code>en-AU</code>, <code>en-GB</code>, <code>en-IE</code>, <code>en-US</code>, <code>en-ZA</code>)</li>
<li>Finnish (<code>fi-FI</code>)</li>
<li>French (<code>fr-CA</code>, <code>fr-FR</code>)</li>
<li>German (<code>de-DE</code>)</li>
<li>Greek (<code>el-GR</code>)</li>
<li>Hindi (<code>hi-IN</code>)</li>
<li>Hungarian (<code>hu-HU</code>)</li>
<li>Indonesian (<code>id-ID</code>)</li>
<li>Italian (<code>it-IT</code>)</li>
<li>Japanese (<code>ja-JP</code>)</li>
<li>Korean (<code>ko-KR</code>)</li>
<li>Norwegian (<code>no-NO</code>)</li>
<li>Polish (<code>pl-PL</code>)</li>
<li>Portuguese (<code>pt-BR</code>, <code>pt-PT</code>)</li>
<li>Romanian (<code>ro-RO</code>)</li>
<li>Russian (<code>ru-RU</code>)</li>
<li>Slovak (<code>sk-SK</code>)</li>
<li>Spanish (<code>es-ES</code>, <code>es-MX</code>)</li>
<li>Swedish (<code>sv-SE</code>)</li>
<li>Thai (<code>th-TH</code>)</li>
<li>Turkish (<code>tr-TR</code>)</li>
</ul>

<p><code>NSLocale</code> and <code>NSLinguisticTagger</code> both use ISO 681 codes to identify languages. <code>AVSpeechSynthesisVoice</code>, however, takes an <a href="http://en.wikipedia.org/wiki/IETF_language_tag">IETF Language Tag</a>, as specified <a href="http://tools.ietf.org/html/bcp47">BCP 47 Document Series</a>. If an utterance string and voice aren&#39;t in the same language, speech synthesis will fail.</p>

<blockquote>
<p><a href="https://gist.github.com/mattt/9892187">This gist</a> shows how to detect an ISO 681 language code from an arbitrary string, and convert that to an IETF language tag.</p>
</blockquote>

<h2>Delegate Methods</h2>

<p>What makes <code>AVSpeechSynthesizer</code> really amazing for developers is the ability to hook into speech events. An object conforming to <code>AVSpeechSynthesizerDelegate</code> can be called when its speech synthesizer either starts or finishes, pauses or continues, and as each range of the utterance is spoken.</p>

<p>For example, an app, in addition to synthesizing a voice utterance, could show that utterance in a label, and highlight the word currently being spoken:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#pragma mark - AVSpeechSynthesizerDelegate</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">speechSynthesizer:</span><span class="p">(</span><span class="n">AVSpeechSynthesizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">synthesizer</span>
<span class="nl">willSpeakRangeOfSpeechString:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">characterRange</span>
                <span class="nl">utterance:</span><span class="p">(</span><span class="n">AVSpeechUtterance</span> <span class="o">*</span><span class="p">)</span><span class="nv">utterance</span>
<span class="p">{</span>
    <span class="n">NSMutableAttributedString</span> <span class="o">*</span><span class="n">mutableAttributedString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithString</span><span class="o">:</span><span class="n">utterance</span><span class="p">.</span><span class="n">speechString</span><span class="p">];</span>
    <span class="p">[</span><span class="n">mutableAttributedString</span> <span class="n">addAttribute</span><span class="o">:</span><span class="n">NSForegroundColorAttributeName</span>
                                    <span class="nl">value:</span><span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">]</span> <span class="n">range</span><span class="o">:</span><span class="n">characterRange</span><span class="p">];</span>
    <span class="n">self</span><span class="p">.</span><span class="n">utteranceLabel</span><span class="p">.</span><span class="n">attributedText</span> <span class="o">=</span> <span class="n">mutableAttributedString</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">speechSynthesizer:</span><span class="p">(</span><span class="n">AVSpeechSynthesizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">synthesizer</span>
  <span class="nl">didStartSpeechUtterance:</span><span class="p">(</span><span class="n">AVSpeechUtterance</span> <span class="o">*</span><span class="p">)</span><span class="nv">utterance</span>
<span class="p">{</span>
    <span class="n">self</span><span class="p">.</span><span class="n">utteranceLabel</span><span class="p">.</span><span class="n">attributedText</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithString</span><span class="o">:</span><span class="n">self</span><span class="p">.</span><span class="n">utteranceString</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">speechSynthesizer:</span><span class="p">(</span><span class="n">AVSpeechSynthesizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">synthesizer</span>
 <span class="nl">didFinishSpeechUtterance:</span><span class="p">(</span><span class="n">AVSpeechUtterance</span> <span class="o">*</span><span class="p">)</span><span class="nv">utterance</span>
<span class="p">{</span>
    <span class="n">self</span><span class="p">.</span><span class="n">utteranceLabel</span><span class="p">.</span><span class="n">attributedText</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSAttributedString</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithString</span><span class="o">:</span><span class="n">self</span><span class="p">.</span><span class="n">utteranceString</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p><img src="http://nshipster.s3.amazonaws.com/avspeechsynthesizer-example.gif" alt="AVSpeechSynthesizer Example"></p>

<blockquote>
<p>See <a href="https://github.com/mattt/AVSpeechSynthesizer-Example">this example app</a> for a demonstration of live text-highlighting for all of the supported languages.</p>
</blockquote>

<hr>

<p>Anyone who travels to an unfamiliar place returns with a profound understanding of what it means to communicate. It&#39;s totally different from how one is taught a language in High School: instead of genders and cases, it&#39;s about emotions and patience and clinging onto every shred of understanding. One is astounded by the extent to which two humans can communicate with hand gestures and facial expressions. One is also humbled by how frustrating it can be when pantomiming breaks down.</p>

<p>In our modern age, we have the opportunity to go out in a world augmented by a collective computational infrastructure. Armed with <code>AVSpeechSynthesizer</code> and the myriad other linguistic technologies on iOS and elsewhere, we have never been more capable of breaking down the forces that most divide our species.</p>

<p>If that isn&#39;t universe-denting, then I don&#39;t know what is.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 31 Mar 2014 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:41:"http://nshipster.com/avspeechsynthesizer/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:41:"http://nshipster.com/avspeechsynthesizer/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:2;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:33:"NSURL /&lt;br/&gt;NSURLComponents";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:15419:"<p>There is a simple beauty to—let&#39;s call them &quot;one-dimensional data types&quot;: numbers or strings formatted to contain multiple values, retrievable through a mathematical operator or parsing routine. Like how the hexadecimal color <tt style="color: #EE8262;">#EE8262</tt> can have <a href="http://en.wikipedia.org/wiki/Web_colors">red, green, and blue components</a> extracted by masking and shifting its bits, or how <a href="http://en.wikipedia.org/wiki/Regular_expression">regular expressions</a> can match and capture complex patterns in just a few characters.</p>

<p>Of all the one-dimensional data types out there, <a href="http://en.wikipedia.org/wiki/URI_scheme">URIs</a> reign supreme. Here, in a single, human-parsable string, is every conceivable piece of information necessary to encode the location of any piece of information that has, does, and will ever exist on a computer.</p>

<p>In its most basic form, a URI is comprised of a scheme name and a hierarchical part, with an optional query and fragment:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">    &lt;scheme name&gt; : &lt;hierarchical part&gt; [ ? &lt;query&gt; ] [ # &lt;fragment&gt; ]
</code></pre></div>
<p>Many protocols, including HTTP, specify a regular structure for information like the username, password, port, and path in the hierarchical part:</p>

<table style="font-family:Menlo,monospace;">
    <thead>
        <tr>
            <td>foo</td>
            <td>://</td>
            <td>username</td>
            <td>:</td>
            <td>password</td>
            <td>@</td>
            <td>example.com</td>
            <td>:</td>
            <td>8042</td>
            <td>/over/there/index</td>
            <td>.</td>
            <td>dtb</td>
            <td>?</td>
            <td>type=animal&amp;name=narwhal</td>
            <td>#</td>
            <td>nose</td>
        </tr>
    </thead>
    <tbody>
        <tr style="text-align:center">
            <td colspan="2">scheme</td>
            <td>username</td>
            <td></td>
            <td>password</td>
            <td></td>
            <td>hostname</td>
            <td></td>
            <td>port</td>
            <td>path</td>
            <td></td>
            <td>extension</td>
            <td></td>
            <td>query</td>
            <td></td>
            <td>fragment</td>
        </tr>
    </tbody>
</table>

<p>A solid grasp of network programming is rooted in an unshakeable familiarity with URL components. As a software developer, this means having a command over the URI functionality in your programming language&#39;s standard library.</p>

<blockquote>
<p>If a programming language does not have a URI module in its standard library, run, don&#39;t walk, to a real language that does.</p>
</blockquote>

<hr>

<p>In Foundation, URLs are represented by <code>NSURL</code>.</p>

<p><code>NSURL</code> instances are created using the class method <code>URLWithString:</code></p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="n">URLWithString</span><span class="o">:</span><span class="s">@&quot;http://example.com&quot;</span><span class="p">];</span>
</code></pre></div>
<p>If the passed string is not a valid URL, this method will return <code>nil</code>.</p>

<p><code>NSString</code> also has some vestigial functionality for path manipulation, <a href="http://nshipster.com/nstemporarydirectory/">as described a few weeks back</a>, but that&#39;s being slowly migrated over to <code>NSURL</code>. While the extra conversion from <code>NSString</code> to <code>NSURL</code> is not the most convenient step, it&#39;s always worthwhile. If a value is a URL, it should be stored and passed as an <code>NSURL</code>; conflating the two types is reckless and lazy API design.</p>

<blockquote>
<blockquote>
<p>As a side note, <code>@@</code> would be a nice literal for <code>NSURL</code>, (e.g. <code>@@&quot;http://example.com&quot;</code>), don&#39;t you think?</p>
</blockquote>
</blockquote>

<p><code>NSURL</code> also has the class method <code>+URLWithString:relativeToURL:</code>, which can be used to construct a URL from a string relative to a base URL. The behavior of this method can be a source of confusion, because of how it treats leading <code>/</code>&#39;s in relative paths.</p>

<p>For reference, here are representative examples of how this method works:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSURL</span> <span class="o">*</span><span class="n">baseURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="n">URLWithString</span><span class="o">:</span><span class="s">@&quot;http://example.com/v1/&quot;</span><span class="p">];</span>

<span class="p">[</span><span class="n">NSURL</span> <span class="n">URLWithString</span><span class="o">:</span><span class="s">@&quot;foo&quot;</span> <span class="n">relativeToURL</span><span class="o">:</span><span class="n">baseURL</span><span class="p">];</span>
<span class="c1">// http://example.com/v1/foo</span>

<span class="p">[</span><span class="n">NSURL</span> <span class="n">URLWithString</span><span class="o">:</span><span class="s">@&quot;foo?bar=baz&quot;</span> <span class="n">relativeToURL</span><span class="o">:</span><span class="n">baseURL</span><span class="p">];</span>
<span class="c1">// http://example.com/v1/foo?bar=baz</span>

<span class="p">[</span><span class="n">NSURL</span> <span class="n">URLWithString</span><span class="o">:</span><span class="s">@&quot;/foo&quot;</span> <span class="n">relativeToURL</span><span class="o">:</span><span class="n">baseURL</span><span class="p">];</span>
<span class="c1">// http://example.com/foo</span>

<span class="p">[</span><span class="n">NSURL</span> <span class="n">URLWithString</span><span class="o">:</span><span class="s">@&quot;foo/&quot;</span> <span class="n">relativeToURL</span><span class="o">:</span><span class="n">baseURL</span><span class="p">];</span>
<span class="c1">// http://example.com/v1/foo</span>

<span class="p">[</span><span class="n">NSURL</span> <span class="n">URLWithString</span><span class="o">:</span><span class="s">@&quot;/foo/&quot;</span> <span class="n">relativeToURL</span><span class="o">:</span><span class="n">baseURL</span><span class="p">];</span>
<span class="c1">// http://example.com/foo/</span>

<span class="p">[</span><span class="n">NSURL</span> <span class="n">URLWithString</span><span class="o">:</span><span class="s">@&quot;http://example2.com/&quot;</span> <span class="n">relativeToURL</span><span class="o">:</span><span class="n">baseURL</span><span class="p">];</span>
<span class="c1">// http://example2.com/</span>
</code></pre></div>
<h2>URL Components</h2>

<p><code>NSURL</code> provides accessor methods for each of the URL components as defined by <a href="http://www.ietf.org/rfc/rfc2396.txt">RFC 2396</a>:</p>

<p>– <code>absoluteString</code>
– <code>absoluteURL</code>
– <code>baseURL</code>
– <code>fileSystemRepresentation</code>
– <code>fragment</code>
– <code>host</code>
– <code>lastPathComponent</code>
– <code>parameterString</code>
– <code>password</code>
– <code>path</code>
– <code>pathComponents</code>
– <code>pathExtension</code>
– <code>port</code>
– <code>query</code>
– <code>relativePath</code>
– <code>relativeString</code>
– <code>resourceSpecifier</code>
– <code>scheme</code>
– <code>standardizedURL</code>
– <code>user</code></p>

<p>The documentation and examples found in <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSURL_Class/Reference/Reference.html"><code>NSURL</code>&#39;s documentation</a> are a great way to familiarize yourself with all of the different components.</p>

<blockquote>
<p>Although username &amp; password <em>can</em> be stored in a URL, consider using <code>NSURLCredential</code> when representing user credentials, or persisting them to the keychain.</p>
</blockquote>

<h2>NSURLComponents</h2>

<p>Quietly added in iOS 7 and Mac OS X 10.9 Mavericks was <code>NSURLComponents</code>, which can best be described by what it could have been named instead: <code>NSMutableURL</code>. Still lacking documentation, this class remains one of the more obscure recent additions to Foundation.</p>

<p><code>NSURLComponents</code> instances are constructed much in the same way as <code>NSURL</code>, with a provided <code>NSString</code> and optional base URL to resolve against (<code>+componentsWithString:</code> &amp; <code>+componentsWithString:resolvingAgainstBaseURL:</code>). It can also be <code>alloc init</code>&#39;d without any arguments to create an empty storage container, similar to <a href="http://nshipster.com/nsdatecomponents/"><code>NSDateComponents</code></a>.</p>

<p>The difference here, between <code>NSURL</code> and <code>NSURLComponents</code>, is that component properties are <code>readwrite</code>. This provides a safe and direct way to modify individual components of a URL:</p>

<ul>
<li><code>scheme</code></li>
<li><code>user</code></li>
<li><code>password</code></li>
<li><code>host</code></li>
<li><code>port</code></li>
<li><code>path</code></li>
<li><code>query</code></li>
<li><code>fragment</code></li>
</ul>

<blockquote>
<p>Attempting to set an invalid scheme string or negative port number will throw an exception.</p>
</blockquote>

<p>In addition, <code>NSURLComponents</code> also has <code>readwrite</code> properties for <a href="http://en.wikipedia.org/wiki/Percent-encoding">percent-encoded</a> versions of each component.</p>

<ul>
<li><code>percentEncodedUser</code></li>
<li><code>percentEncodedPassword</code></li>
<li><code>percentEncodedHost</code></li>
<li><code>percentEncodedPath</code></li>
<li><code>percentEncodedQuery</code></li>
<li><code>percentEncodedFragment</code></li>
</ul>

<blockquote>
<p>Getting these properties retains any percent encoding these components may have. Setting these properties assumes the component string is already correctly percent encoded. Attempting to set an incorrectly percent encoded string will cause an exception. Although &#39;;&#39; is a legal path character, it is recommended that it be percent-encoded for best compatibility with NSURL (<code>-stringByAddingPercentEncodingWithAllowedCharacters:</code> will percent-encode any &#39;;&#39; characters if you pass the <code>URLPathAllowedCharacterSet</code>).</p>
</blockquote>

<h2>Percent-Encoding</h2>

<p>Speaking of percent-encoding...</p>

<p><code>NSURL</code> is <a href="https://developer.apple.com/library/ios/documentation/CoreFoundation/Conceptual/CFDesignConcepts/Articles/tollFreeBridgedTypes.html">toll-free bridged</a> to <code>CFURLRef</code>. This lower-level C API effectively mirrors the functionality of <code>NSURL</code>, with the exception of <code>CFURLCreateStringByAddingPercentEscapes</code> and <code>CFURLCreateStringByReplacingPercentEscapesUsingEncoding</code>:</p>

<ul>
<li><code>CFURLCreateStringByAddingPercentEscapes</code>: Creates a copy of a string, replacing certain characters with the equivalent percent escape sequence based on the specified encoding.</li>
</ul>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">CFStringRef</span> <span class="nf">CFURLCreateStringByAddingPercentEscapes</span> <span class="p">(</span>
   <span class="n">CFAllocatorRef</span>   <span class="n">allocator</span><span class="p">,</span>
   <span class="n">CFStringRef</span>      <span class="n">originalString</span><span class="p">,</span>
   <span class="n">CFStringRef</span>      <span class="n">charactersToLeaveUnescaped</span><span class="p">,</span>
   <span class="n">CFStringRef</span>      <span class="n">legalURLCharactersToBeEscaped</span><span class="p">,</span>
   <span class="n">CFStringEncoding</span> <span class="n">encoding</span>
<span class="p">);</span>
</code></pre></div>
<ul>
<li><code>CFURLCreateStringByReplacingPercentEscapesUsingEncoding</code>: Creates a new string by replacing any percent escape sequences with their character equivalent.</li>
</ul>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">CFStringRef</span> <span class="nf">CFURLCreateStringByReplacingPercentEscapesUsingEncoding</span> <span class="p">(</span>
   <span class="n">CFAllocatorRef</span>   <span class="n">allocator</span><span class="p">,</span>
   <span class="n">CFStringRef</span>      <span class="n">origString</span><span class="p">,</span>
   <span class="n">CFStringRef</span>      <span class="n">charsToLeaveEscaped</span><span class="p">,</span>
   <span class="n">CFStringEncoding</span> <span class="n">encoding</span>
<span class="p">);</span>
</code></pre></div>
<h2>Bookmark URLs</h2>

<p>One final topic worth mentioning are bookmark URLs, which can be used to safely reference files between application launches. Think of them as a persistent <a href="http://en.wikipedia.org/wiki/File_descriptor">file descriptor</a>.</p>

<blockquote>
<p>A bookmark is an opaque data structure, enclosed in an <code>NSData</code> object, that describes the location of a file. Whereas path- and file reference URLs are potentially fragile between launches of your app, a bookmark can usually be used to re-create a URL to a file even in cases where the file was moved or renamed.</p>
</blockquote>

<p>You can read more about bookmark URLs in <a href="https://developer.apple.com/library/ios/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/AccessingFilesandDirectories/AccessingFilesandDirectories.html">&quot;Locating Files Using Bookmarks&quot; from Apple&#39;s File System Programming Guide</a></p>

<hr>

<p>Forget jet packs and flying cars—my idea of an exciting future is one where everything has a URL, is encoded in Markdown, and stored in Git. If your mind isn&#39;t blown by the implications of a <em>universal</em> resource locator, then I would invite you to reconsider.</p>

<p>Like <a href="http://en.wikipedia.org/wiki/Hypertext">hypertext</a>, universal identification is a philosophical concept that both pre-dates and transcends computers. Together, they form the fabric of our information age: a framework for encoding our collective understanding of the universe as a network of individual facts, in a fashion that is hauntingly similar to how the neurons in our brains do much the same.</p>

<p>We are just now crossing the precipice of a <a href="http://en.wikipedia.org/wiki/Cambrian_explosion">Cambrian Explosion</a> in physical computing. In an internet of things, where <a href="http://en.wikipedia.org/wiki/IPv6#Larger_address_space">every object of our lives has a URL</a> and embeds an electronic soul, a digital consciousness will emerge. Not to say, necessarily, that <a href="http://en.wikipedia.org/wiki/The_Singularity_Is_Near">the singularity is near</a>, but we&#39;re on the verge of something incredible.</p>

<p>Quite lofty implications for a technology used most often to exchange pictures of cats.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 24 Mar 2014 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:27:"http://nshipster.com/nsurl/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:27:"http://nshipster.com/nsurl/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:3;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:7:"Empathy";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:1530:"<p>Great software is created to scratch one&#39;s own itch. Being close to a problem provides not only insight for how to solve it, but the motivation to actually follow through.</p>

<p>It&#39;s the better angels of our nature that compel us to share these solutions with one other. And in the open source world, we do so freely, with only a karmic expectation of paying the favor forward.</p>

<p>We naturally want to help one another, to explain ideas, to be generous and patient. However, on the Internet, human nature seems to drop a few packets. Practicing empathy online becomes a feat of moral athleticism. Lacking many of the faculties to humanize and understand one another (facial expressions, voice tonality, non-verbal cues) we can lose sight of who we&#39;re talking to, and become less human ourselves.</p>

<p>Before engaging with someone, take a moment to visualize how that encounter would play out in real life. Would you be proud of how you conducted yourself?</p>

<p>Rather than responding defensively to snark or aggression, stop to consider what could have motivated that reaction. Is there something you could be doing better as a programmer or community member? Or are they just having a bad day? (We&#39;ve all had our bad days).</p>

<p>And let it never be that someone is marginalized for their ability to communicate in English. Be patient and ask questions. Respond simply and clearly.</p>

<p>Everything you need to succeed as a software developer extends from a conscious practice of empathy.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 17 Mar 2014 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:29:"http://nshipster.com/empathy/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:29:"http://nshipster.com/empathy/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:4;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:94:"UIReferenceLibraryViewController /&lt;br/&gt;DCSDictionaryRef/&lt;br/&gt;/usr/share/dict/words";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:28869:"<p>This week&#39;s article is about dictionaries. Not the <code>NSDictionary</code> / <code>CFDictionaryRef</code> we encounter everyday, but those distant lexicographic vestiges of school days past.</p>

<blockquote>
<p>But seriously, why are dictionaries called that, anyway? Why can&#39;t we just settle on <code>Hash</code>, like those nice Ruby folks? What&#39;s that? Semantic overlap with hashing functions and cryptographic digests? Well, dictionary isn&#39;t <em>that</em> bad. Anything other than &quot;associative arrays&quot;, I reckon.</p>
</blockquote>

<p>Though widely usurped of their &quot;go-to reference&quot; status by the Internet, dictionaries and word lists serve an important role behind the scenes of functionality ranging from spell check, grammar check, and auto-correct to auto-summarization and semantic analysis. So, for your reference, here&#39;s a look at the ways and means by which computers give meaning to the world through words, in Unix, Mac OS X, and iOS.</p>

<hr>

<h2>Unix</h2>

<p>Nearly all Unix distributions include a small collection newline-delimited list of words. On Mac OS X, these can be found at <code>/usr/share/dict</code>:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">$ ls /usr/share/dict
    README
    connectives
    propernames
    web2
    web2a
    words@ -&gt; web2
</code></pre></div>
<p>Symlinked to <code>words</code> is the <code>web2</code> word list, which, though not exhaustive, is still a sizable corpus:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">$ wc /usr/share/dict/words
    235886  235886 2493109
</code></pre></div>
<p>Skimming with <code>head</code> shows what fun lies herein. Such excitement is rarely so palpable as it is among words beginning with &quot;a&quot;:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">$ head /usr/share/dict/words
    A
    a
    aa
    aal
    aalii
    aam
    Aani
    aardvark
    aardwolf
    Aaron
</code></pre></div>
<p>These giant, system-provided text files make it easy to <code>grep</code> crossword puzzle clues, generate mnemonic pass phrases, and seed databases, but from a user perspective, <code>/usr/share/dict</code>&#39;s monolingualism and lack of associated meaning make it less than useful for everyday use.</p>

<p>Mac OS X builds upon this with its own system dictionaries. Never one to disappoint, the operating system&#39;s penchant for extending Unix functionality through strategically placed bundles and plist files is in full force with how dictionaries are distributed.</p>

<hr>

<h2>OS X</h2>

<p>The Mac OS X analog to <code>/usr/share/dict</code> can be found in <code>/Library/Dictionaries</code>.
A quick peek into the shared system dictionaries demonstrates one immediate improvement over Unix, by acknowledging the existence of languages other than English:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">$ ls /Library/Dictionaries/

    Apple Dictionary.dictionary/
    Diccionario General de la Lengua Española Vox.dictionary/
    Duden Dictionary Data Set I.dictionary/
    Dutch.dictionary/
    Italian.dictionary/
    Korean - English.dictionary/
    Korean.dictionary/
    Multidictionnaire de la langue française.dictionary/
    New Oxford American Dictionary.dictionary/
    Oxford American Writer&#39;s Thesaurus.dictionary/
    Oxford Dictionary of English.dictionary/
    Oxford Thesaurus of English.dictionary/
    Sanseido Super Daijirin.dictionary/
    Sanseido The WISDOM English-Japanese Japanese-English Dictionary.dictionary/
    Simplified Chinese - English.dictionary/
    The Standard Dictionary of Contemporary Chinese.dictionary/
</code></pre></div>
<p>Mac OS X ships with dictionaries in Chinese, English, French, Dutch, Italian, Japanese, Korean, as well as an English thesaurus and a special dictionary for Apple-specific terminology.</p>

<p>Diving deeper into the rabbit hole, we peruse the <code>.dictionary</code> bundles to see them for what they really are:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">$ ls &quot;/Library/Dictionaries/New Oxford American Dictionary.dictionary/Contents&quot;

    Body.data
    DefaultStyle.css
    EntryID.data
    EntryID.index
    Images/
    Info.plist
    KeyText.data
    KeyText.index
    Resources/
    _CodeSignature/
    version.plist
</code></pre></div>
<p>A filesystem autopsy reveals some interesting implementation details. In the case of the New Oxford American Dictionary in particular, contents include:</p>

<ul>
<li>Binary-encoded <code>KeyText.data</code>, <code>KeyText.index</code>, &amp; <code>Content.data</code></li>
<li>CSS for styling entries</li>
<li>1207 images, from A-Frame to Zither.</li>
<li>Preference to switch between <a href="http://en.wikipedia.org/wiki/Pronunciation_respelling_for_English">US English Diacritical Pronunciation</a> and <a href="http://en.wikipedia.org/wiki/International_Phonetic_Alphabet">IPA</a> (International Phonetic Alphabet)</li>
<li>Manifest &amp; signature for dictionary contents</li>
</ul>

<p>Normally, proprietary binary encoding would be the end of the road in terms of what one could reasonably do with data, but luckily, Core Services provides APIs to read this information.</p>

<h4>Getting Definition of Word</h4>

<p>To get the definition of a word on Mac OS X, one can use the <code>DCSCopyTextDefinition</code> function, found in the Core Services framework:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#import &lt;CoreServices/CoreServices.h&gt;</span>

<span class="n">NSString</span> <span class="o">*</span><span class="n">word</span> <span class="o">=</span> <span class="s">@&quot;apple&quot;</span><span class="p">;</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">definition</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_transfer</span> <span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">DCSCopyTextDefinition</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFStringRef</span><span class="p">)</span><span class="n">word</span><span class="p">,</span> <span class="n">CFRangeMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">word</span> <span class="n">length</span><span class="p">]));</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">definition</span><span class="p">);</span>
</code></pre></div>
<p>Wait, where did all of those great dictionaries go?</p>

<p>Well, they all disappeared into that first <code>NULL</code> argument. One might expect to provide a <code>DCSCopyTextDefinition</code> type here, as prescribed by the function definition. However, there are no public functions to construct or copy such a type, making <code>NULL</code> the only available option. The documentation is as clear as it is stern:</p>

<blockquote>
<p>This parameter is reserved for future use, so pass <code>NULL</code>. Dictionary Services searches in all active dictionaries.</p>
</blockquote>

<p>&quot;Dictionary Services searches in <strong>all active dictionaries</strong>&quot;, you say? Sounds like a loophole!</p>

<h4>Setting Active Dictionaries</h4>

<p>Now, there&#39;s nothing programmers love to hate to love more than the practice of exploiting loopholes to side-step Apple platform restrictions. Behold: an entirely error-prone approach to getting, say, thesaurus results instead of the first definition available in the standard dictionary:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSUserDefaults</span> <span class="o">*</span><span class="n">userDefaults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">];</span>
<span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="n">dictionaryPreferences</span> <span class="o">=</span> <span class="p">[[</span><span class="n">userDefaults</span> <span class="n">persistentDomainForName</span><span class="o">:</span><span class="s">@&quot;com.apple.DictionaryServices&quot;</span><span class="p">]</span> <span class="n">mutableCopy</span><span class="p">];</span>
<span class="n">NSArray</span> <span class="o">*</span><span class="n">activeDictionaries</span> <span class="o">=</span> <span class="p">[</span><span class="n">dictionaryPreferences</span> <span class="n">objectForKey</span><span class="o">:</span><span class="s">@&quot;DCSActiveDictionaries&quot;</span><span class="p">];</span>
<span class="n">dictionaryPreferences</span><span class="p">[</span><span class="s">@&quot;DCSActiveDictionaries&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="p">@[</span><span class="s">@&quot;/Library/Dictionaries/Oxford American Writer&#39;s Thesaurus.dictionary&quot;</span><span class="p">];</span>
<span class="p">[</span><span class="n">userDefaults</span> <span class="n">setPersistentDomain</span><span class="o">:</span><span class="n">dictionaryPreferences</span> <span class="n">forName</span><span class="o">:</span><span class="s">@&quot;com.apple.DictionaryServices&quot;</span><span class="p">];</span>
<span class="p">{</span>
    <span class="n">NSString</span> <span class="o">*</span><span class="n">word</span> <span class="o">=</span> <span class="s">@&quot;apple&quot;</span><span class="p">;</span>
    <span class="n">NSString</span> <span class="o">*</span><span class="n">definition</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_transfer</span> <span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">DCSCopyTextDefinition</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFStringRef</span><span class="p">)</span><span class="n">word</span><span class="p">,</span> <span class="n">CFRangeMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">word</span> <span class="n">length</span><span class="p">]));</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">definition</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">dictionaryPreferences</span><span class="p">[</span><span class="s">@&quot;DCSActiveDictionaries&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="n">activeDictionaries</span><span class="p">;</span>
<span class="p">[</span><span class="n">userDefaults</span> <span class="n">setPersistentDomain</span><span class="o">:</span><span class="n">dictionaryPreferences</span> <span class="n">forName</span><span class="o">:</span><span class="s">@&quot;com.apple.DictionaryServices&quot;</span><span class="p">];</span>
</code></pre></div>
<p>&quot;But this is Mac OS X, a platform whose manifest destiny cannot be contained by meager sandboxing attempts from Cupertino!&quot;, you cry. &quot;Isn&#39;t there a more civilized approach? Like, say, private APIs?&quot;</p>

<p>Why yes, yes there are.</p>

<h3>Private APIs</h3>

<p>Not publicly exposed, but still available through Core Services are a number of functions that cut closer to the dictionary services functionality that we crave:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">extern</span> <span class="n">CFArrayRef</span> <span class="nf">DCSCopyAvailableDictionaries</span><span class="p">();</span>
<span class="k">extern</span> <span class="n">CFStringRef</span> <span class="nf">DCSDictionaryGetName</span><span class="p">(</span><span class="n">DCSDictionaryRef</span> <span class="n">dictionary</span><span class="p">);</span>
<span class="k">extern</span> <span class="n">CFStringRef</span> <span class="nf">DCSDictionaryGetShortName</span><span class="p">(</span><span class="n">DCSDictionaryRef</span> <span class="n">dictionary</span><span class="p">);</span>
<span class="k">extern</span> <span class="n">DCSDictionaryRef</span> <span class="nf">DCSDictionaryCreate</span><span class="p">(</span><span class="n">CFURLRef</span> <span class="n">url</span><span class="p">);</span>
<span class="k">extern</span> <span class="n">CFStringRef</span> <span class="nf">DCSDictionaryGetName</span><span class="p">(</span><span class="n">DCSDictionaryRef</span> <span class="n">dictionary</span><span class="p">);</span>
<span class="k">extern</span> <span class="n">CFArrayRef</span> <span class="nf">DCSCopyRecordsForSearchString</span><span class="p">(</span><span class="n">DCSDictionaryRef</span> <span class="n">dictionary</span><span class="p">,</span> <span class="n">CFStringRef</span> <span class="n">string</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="p">);</span>

<span class="k">extern</span> <span class="n">CFDictionaryRef</span> <span class="nf">DCSCopyDefinitionMarkup</span><span class="p">(</span><span class="n">DCSDictionaryRef</span> <span class="n">dictionary</span><span class="p">,</span> <span class="n">CFStringRef</span> <span class="n">record</span><span class="p">);</span>
<span class="k">extern</span> <span class="n">CFStringRef</span> <span class="nf">DCSRecordCopyData</span><span class="p">(</span><span class="n">CFTypeRef</span> <span class="n">record</span><span class="p">);</span>
<span class="k">extern</span> <span class="n">CFStringRef</span> <span class="nf">DCSRecordCopyDataURL</span><span class="p">(</span><span class="n">CFTypeRef</span> <span class="n">record</span><span class="p">);</span>
<span class="k">extern</span> <span class="n">CFStringRef</span> <span class="nf">DCSRecordGetAnchor</span><span class="p">(</span><span class="n">CFTypeRef</span> <span class="n">record</span><span class="p">);</span>
<span class="k">extern</span> <span class="n">CFStringRef</span> <span class="nf">DCSRecordGetAssociatedObj</span><span class="p">(</span><span class="n">CFTypeRef</span> <span class="n">record</span><span class="p">);</span>
<span class="k">extern</span> <span class="n">CFStringRef</span> <span class="nf">DCSRecordGetHeadword</span><span class="p">(</span><span class="n">CFTypeRef</span> <span class="n">record</span><span class="p">);</span>
<span class="k">extern</span> <span class="n">CFStringRef</span> <span class="nf">DCSRecordGetRawHeadword</span><span class="p">(</span><span class="n">CFTypeRef</span> <span class="n">record</span><span class="p">);</span>
<span class="k">extern</span> <span class="n">CFStringRef</span> <span class="nf">DCSRecordGetString</span><span class="p">(</span><span class="n">CFTypeRef</span> <span class="n">record</span><span class="p">);</span>
<span class="k">extern</span> <span class="n">CFStringRef</span> <span class="nf">DCSRecordGetTitle</span><span class="p">(</span><span class="n">CFTypeRef</span> <span class="n">record</span><span class="p">);</span>
<span class="k">extern</span> <span class="n">DCSDictionaryRef</span> <span class="nf">DCSRecordGetSubDictionary</span><span class="p">(</span><span class="n">CFTypeRef</span> <span class="n">record</span><span class="p">);</span>
</code></pre></div>
<p>Private as they are, these functions aren&#39;t about to start documenting themselves, so let&#39;s take a look at how they&#39;re used:</p>

<h4>Getting Available Dictionaries</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSMapTable</span> <span class="o">*</span><span class="n">availableDictionariesKeyedByName</span> <span class="o">=</span>
    <span class="p">[</span><span class="n">NSMapTable</span> <span class="n">mapTableWithKeyOptions</span><span class="o">:</span><span class="n">NSPointerFunctionsCopyIn</span>
                          <span class="nl">valueOptions:</span><span class="n">NSPointerFunctionsObjectPointerPersonality</span><span class="p">];</span>

<span class="k">for</span> <span class="p">(</span><span class="kt">id</span> <span class="n">dictionary</span> <span class="k">in</span> <span class="p">(</span><span class="n">__bridge_transfer</span> <span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="n">DCSCopyAvailableDictionaries</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">DCSDictionaryGetName</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">DCSDictionaryRef</span><span class="p">)</span><span class="n">dictionary</span><span class="p">);</span>
    <span class="p">[</span><span class="n">availableDictionariesKeyedByName</span> <span class="n">setObject</span><span class="o">:</span><span class="n">dictionary</span> <span class="n">forKey</span><span class="o">:</span><span class="n">name</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<h4>Getting Definition for Word</h4>

<p>With instances of the elusive <code>DCSDictionaryRef</code> type available at our disposal, we can now see what all of the fuss is about with that first argument in <code>DCSCopyTextDefinition</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">word</span> <span class="o">=</span> <span class="s">@&quot;apple&quot;</span><span class="p">;</span>

<span class="k">for</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">name</span> <span class="k">in</span> <span class="n">availableDictionariesKeyedByName</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">id</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="p">[</span><span class="n">availableDictionariesKeyedByName</span> <span class="n">objectForKey</span><span class="o">:</span><span class="n">name</span><span class="p">];</span>

    <span class="n">CFRange</span> <span class="n">termRange</span> <span class="o">=</span> <span class="n">DCSGetTermRangeInString</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">DCSDictionaryRef</span><span class="p">)</span><span class="n">dictionary</span><span class="p">,</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFStringRef</span><span class="p">)</span><span class="n">word</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">termRange</span><span class="p">.</span><span class="n">location</span> <span class="o">==</span> <span class="n">kCFNotFound</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">continue</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">NSString</span> <span class="o">*</span><span class="n">term</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span> <span class="n">substringWithRange</span><span class="o">:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="n">termRange</span><span class="p">.</span><span class="n">location</span><span class="p">,</span> <span class="n">termRange</span><span class="p">.</span><span class="n">length</span><span class="p">)];</span>

    <span class="n">NSArray</span> <span class="o">*</span><span class="n">records</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_transfer</span> <span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="n">DCSCopyRecordsForSearchString</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">DCSDictionaryRef</span><span class="p">)</span><span class="n">dictionary</span><span class="p">,</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFStringRef</span><span class="p">)</span><span class="n">term</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">records</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">id</span> <span class="n">record</span> <span class="k">in</span> <span class="n">records</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">NSString</span> <span class="o">*</span><span class="n">headword</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">DCSRecordGetHeadword</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFTypeRef</span><span class="p">)</span><span class="n">record</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">headword</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">NSString</span> <span class="o">*</span><span class="n">definition</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_transfer</span> <span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">DCSCopyTextDefinition</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">DCSDictionaryRef</span><span class="p">)</span><span class="n">dictionary</span><span class="p">,</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFStringRef</span><span class="p">)</span><span class="n">headword</span><span class="p">,</span> <span class="n">CFRangeMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">headword</span> <span class="n">length</span><span class="p">]));</span>
                <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@: %@&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">definition</span><span class="p">);</span>

                <span class="n">NSString</span> <span class="o">*</span><span class="n">HTML</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_transfer</span> <span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">DCSRecordCopyData</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">DCSDictionaryRef</span><span class="p">)</span><span class="n">dictionary</span><span class="p">,</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFStringRef</span><span class="p">)</span><span class="n">headword</span><span class="p">,</span> <span class="n">CFRangeMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">headword</span> <span class="n">length</span><span class="p">]));</span>
                <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@: %@&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">definition</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Most surprising from this experimentation is the ability to access the raw HTML for entries, which  combined with a dictionary&#39;s bundled CSS, produces the result seen in Dictionary.app.</p>

<p><img src="http://nshipster.s3.amazonaws.com/dictionary.png" alt="Entry for &quot;apple&quot; in Dictionary.app"></p>

<blockquote>
<p>For any fellow linguistics nerds or markup curious folks out there, here&#39;s <a href="https://gist.github.com/mattt/9453538">the HTML of the entry for the word &quot;apple&quot;</a>.</p>
</blockquote>

<p>In the process of writing this article, I <em>accidentally</em> created <a href="https://github.com/mattt/DictionaryKit">an Objective-C wrapper</a> around this forbidden fruit (so forbidden by our favorite fruit company, so don&#39;t try submitting this to the App Store).</p>

<hr>

<h2>iOS</h2>

<p>iOS development is a decidedly more by-the-books affair, so attempting to reverse-engineer the platform would be little more than an academic exercise. Fortunately, a good chunk of functionality is available (as of iOS 5) through the obscure UIKit class <code>UIReferenceLibraryViewController</code>.</p>

<p><code>UIReferenceLibraryViewController</code> is similar to an <code>MFMessageComposeViewController</code>, in that provides a minimally-configurable view controller around system functionality, intended to be presented modally.</p>

<p>Simply initialize with the desired term:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">UIReferenceLibraryViewController</span> <span class="o">*</span><span class="n">referenceLibraryViewController</span> <span class="o">=</span>
    <span class="p">[[</span><span class="n">UIReferenceLibraryViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithTerm</span><span class="o">:</span><span class="s">@&quot;apple&quot;</span><span class="p">];</span>
<span class="p">[</span><span class="n">viewController</span> <span class="n">presentViewController</span><span class="o">:</span><span class="n">referenceLibraryViewController</span>
                             <span class="nl">animated:</span><span class="nb">YES</span>
                           <span class="nl">completion:</span><span class="nb">nil</span><span class="p">];</span>
</code></pre></div>
<p><img src="http://nshipster.s3.amazonaws.com/uireferencelibraryviewcontroller-1.png" alt="Presenting a UIReferenceLibraryViewController"></p>

<p>This is the same behavior that one might encounter by tapping the &quot;Define&quot; <code>UIMenuItem</code> on a highlighted word in a <code>UITextView</code>.</p>

<blockquote>
<p>Tapping on &quot;Manage&quot; brings up a view to download additional dictionaries.</p>
</blockquote>

<p><img src="http://nshipster.s3.amazonaws.com/uireferencelibraryviewcontroller-2.png" alt="Presenting a UIReferenceLibraryViewController"></p>

<p><code>UIReferenceLibraryViewController</code> also provides the class method <code>dictionaryHasDefinitionForTerm:</code>. A developer would do well to call this before presenting a dictionary view controller that will inevitably have nothing to display.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[</span><span class="n">UIReferenceLibraryViewController</span> <span class="n">dictionaryHasDefinitionForTerm</span><span class="o">:</span><span class="s">@&quot;apple&quot;</span><span class="p">];</span>
</code></pre></div>
<blockquote>
<p>In both cases, it appears that <code>UIReferenceLibraryViewController</code> will do its best to normalize the search term, so stripping whitespace or changing to lowercase should not be necessary.</p>
</blockquote>

<hr>

<p>From Unix word lists to their evolved <code>.dictionary</code> bundles on OS X (and presumably iOS), words are as essential to application programming as mathematical constants and the &quot;Sosumi&quot; alert noise. Consider how the aforementioned APIs can be integrated into your own app, or used to create a kind of app you hadn&#39;t previously considered. There are a <a href="http://nshipster.com/nslocalizedstring/">wealth</a> <a href="http://nshipster.com/nslinguistictagger/">of</a> <a href="http://nshipster.com/search-kit/">linguistic</a> <a href="http://nshipster.com/uilocalizedindexedcollation/">technologies</a> baked into Apple&#39;s platforms, so take advantage of them.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 10 Mar 2014 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:41:"http://nshipster.com/dictionary-services/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:41:"http://nshipster.com/dictionary-services/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:5;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:81:"NSTemporaryDirectory /&lt;br/&gt;NSItemReplacementDirectory /&lt;br/&gt;mktemp(3)";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:12690:"<p>Volumes have been written about persisting data, but when it comes to short-lived, temporary files, there is very little to go on for Objective-C. (Or if there has, perhaps it was poetically ephemeral itself).</p>

<hr>

<p>Temporary files are used to write a buffer to disk, to either be atomically moved to a permanent location, or processed in some manner and then discarded. Creating a temporary file involves finding the appropriate part of the filesystem, generating a unique name, and moving or deleting the file after you&#39;re finished using it.</p>

<h2>Finding an Enclosing Directory</h2>

<p>The first step to creating temporary files or directories is to find a reasonable, out-of-the-way place to write to—somewhere that won&#39;t be backed up by Time Machine or synced to iCloud or the like.</p>

<p>On Unix systems, the <code>/tmp</code> directory was the de facto scratch space, but with the sandboxed containers of iOS and Mac OS X apps today, a hard-coded path just won&#39;t cut it.</p>

<p><code>NSTemporaryDirectory</code> is a Foundation function that returns the directory designated for writing short-lived files on the targeted platform.</p>

<h3>A Wild Goose Chase</h3>

<p>In recent years, Apple has pushed to extricate filesystem path operations from <code>NSString</code> APIs, recommending that users switch to using <code>NSURL</code> and <code>NSURL</code>-based APIs for classes like <code>NSFileManager</code>. Unfortunately, the migration has not been entirely smooth.</p>

<p>Consider the documentation for <code>NSTemporaryDirectory</code>:</p>

<blockquote>
<p>See the <code>NSFileManager</code> method <code>URLForDirectory:inDomain:appropriateForURL:create:error:</code> for the preferred means of finding the correct temporary directory.</p>
</blockquote>

<p>Alright, fair enough. Let&#39;s see what&#39;s going on with <code>NSFileManager -URLForDirectory:inDomain:appropriateForURL:create:error:</code>:</p>

<blockquote>
<p>You can also use this method to create a new temporary directory for storing things like autosave files; to do so, specify <code>NSItemReplacementDirectory</code> for the directory parameter, <code>NSUserDomainMask</code> for the <code>domain</code> parameter, and a valid parent directory for the <code>url</code> parameter. After locating (or creating) the desired directory, this method returns the URL for that directory.</p>
</blockquote>

<p>Huh? Even after reading through that a few times, it&#39;s still unclear how to use this, or what the expected behavior. A quick search through the mailing lists <a href="http://lists.apple.com/archives/cocoa-dev/2012/Apr/msg00117.html">reaffirms</a> this <a href="(http://lists.apple.com/archives/cocoa-dev/2012/Feb/msg00186.html">confusion</a>).</p>

<p><em>Actually</em>, this method appears to be intended for moving <em>existing</em> temporary files to a permanent location on disk with <code>-replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:</code>. Not exactly what we&#39;re looking for.</p>

<p>So much for the <code>NSString</code> filesystem API migration. Let&#39;s stick to something that works:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[</span><span class="n">NSURL</span> <span class="n">fileURLWithPath</span><span class="o">:</span><span class="n">NSTemporaryDirectory</span><span class="p">()</span> <span class="n">isDirectory</span><span class="o">:</span><span class="nb">YES</span><span class="p">];</span>
</code></pre></div>
<h2>Generating a Unique Directory or File Name</h2>

<p>With a place to call home (temporarily), the next step is to figure out what to name our temporary file. We don&#39;t really care what temporary files are named—the only real concern is that they&#39;re unique, so as to not interfere with, or be interfered by, any other temporary files.</p>

<p>The best way to generate a unique identifier is to use the <code>globallyUniqueString</code> method on <code>NSProcessInfo</code></p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">identifier</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSProcessInfo</span> <span class="n">processInfo</span><span class="p">]</span> <span class="n">globallyUniqueString</span><span class="p">];</span>
</code></pre></div>
<p>This will return a string in the format: <code>5BD255F4-CA55-4B82-A555-0F4BC5CA2AD6-479-0000018E14D059CC</code></p>

<blockquote>
<p>Other sources advise the direct invocation of the <code>mktemp(3)</code> system command in order to mitigate potential conflicts. However,  using <code>NSProcessInfo -globallyUniqueString</code> to generate unique names is extremely unlikely to result in a collision.</p>
</blockquote>

<p>Alternatively, <code>NSUUID</code> (<a href="http://nshipster.com/uuid-udid-unique-identifier">discussed previously</a>) also produces workable results, assuming that you&#39;re not doing anything <em>too</em> crazy.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[[</span><span class="n">NSUUID</span> <span class="n">UUID</span><span class="p">]</span> <span class="n">UUIDString</span><span class="p">]</span>
</code></pre></div>
<p>This produces a string in the format: <code>22361D15-E17B-4C48-AEA6-C73BBEA17011</code></p>

<h2>Creating a Temporary File Path</h2>

<p>Using the aforementioned technique for generating unique identifiers, we can create unique temporary file paths:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">fileName</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="n">stringWithFormat</span><span class="o">:</span><span class="s">@&quot;%@_%@&quot;</span><span class="p">,</span> <span class="p">[[</span><span class="n">NSProcessInfo</span> <span class="n">processInfo</span><span class="p">]</span> <span class="n">globallyUniqueString</span><span class="p">],</span> <span class="s">@&quot;file.txt&quot;</span><span class="p">];</span>
<span class="n">NSURL</span> <span class="o">*</span><span class="n">fileURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="n">fileURLWithPath</span><span class="o">:</span><span class="p">[</span><span class="n">NSTemporaryDirectory</span><span class="p">()</span> <span class="n">stringByAppendingPathComponent</span><span class="o">:</span><span class="n">fileName</span><span class="p">]];</span>
</code></pre></div>
<h2>Creating a Temporary Directory</h2>

<p>In situations where many temporary files might be created by a process, it may be a good idea to create a temporary sub-directory, which could then be removed for easy cleanup.</p>

<p>Creating a temporary directory is no different than any other invocation of <code>NSFileManager -createDirectoryAtURL:withIntermediateDirectories:attributes:error:</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSURL</span> <span class="o">*</span><span class="n">directoryURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="n">fileURLWithPath</span><span class="o">:</span><span class="p">[</span><span class="n">NSTemporaryDirectory</span><span class="p">()</span> <span class="n">stringByAppendingPathComponent</span><span class="o">:</span><span class="p">[[</span><span class="n">NSProcessInfo</span> <span class="n">processInfo</span><span class="p">]</span> <span class="n">globallyUniqueString</span><span class="p">]]</span> <span class="n">isDirectory</span><span class="o">:</span><span class="nb">YES</span><span class="p">];</span>
<span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="n">createDirectoryAtURL</span><span class="o">:</span><span class="n">directoryURL</span> <span class="n">withIntermediateDirectories</span><span class="o">:</span><span class="nb">YES</span> <span class="n">attributes</span><span class="o">:</span><span class="nb">nil</span> <span class="n">error</span><span class="o">:&amp;</span><span class="n">error</span><span class="p">];</span>
</code></pre></div>
<p>And, of course, temporary file paths relative to this directory can be created with <code>URLByAppendingPathComponent:</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSURL</span> <span class="o">*</span><span class="n">fileURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">directoryURL</span> <span class="n">URLByAppendingPathComponent</span><span class="o">:</span><span class="n">fileName</span><span class="p">];</span>
</code></pre></div>
<h2>Writing to a Temporary File</h2>

<p>Files don&#39;t exist on the file system until a particular file path is either touched or written to.</p>

<h3>NSData -writeToURL:options:error</h3>

<p>There are several ways in which data is written to disk in Foundation. The most straightforward of which is <code>NSData -writeToURL:options:error</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">...;</span>
<span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
<span class="p">[</span><span class="n">data</span> <span class="n">writeToURL</span><span class="o">:</span><span class="n">fileURL</span> <span class="n">options</span><span class="o">:</span><span class="n">NSDataWritingAtomic</span> <span class="n">error</span><span class="o">:&amp;</span><span class="n">error</span><span class="p">];</span>
</code></pre></div>
<h3>NSOutputStream</h3>

<p>For more advanced APIs, it is not uncommon to pass an <code>NSOutputStream</code> instance to direct the flow of data. Again, creating an output stream to a temporary file path is no different than any other kind of file path:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSOutputStream</span> <span class="o">*</span><span class="n">outputStream</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSOutputStream</span> <span class="n">outputStreamToFileAtPath</span><span class="o">:</span><span class="p">[</span><span class="n">fileURL</span> <span class="n">absoluteString</span><span class="p">]</span> <span class="n">append</span><span class="o">:</span><span class="nb">NO</span><span class="p">];</span>
</code></pre></div>
<h3>Cleaning Up</h3>

<p>The final step is what makes a temporary file <em>actually temporary</em>: clean up.</p>

<p>Although files in a system-designated temporary directory make no guarantees about how long they&#39;ll exist before being deleted automatically by the operating system (up to a few days, according to scattered reports), it&#39;s still good practice to take care of it yourself once you&#39;re finished.</p>

<p>Do that with <code>NSFileManager -removeItemAtURL:</code>, which works for both a temporary file and a temporary directory:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
<span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="n">removeItemAtURL</span><span class="o">:</span><span class="n">fileURL</span> <span class="n">error</span><span class="o">:&amp;</span><span class="n">error</span><span class="p">];</span>
</code></pre></div>
<hr>

<p>&quot;This too shall pass&quot; is a mantra that acknowledges that all things are indeed temporary. Within the context of the application lifecycle, some things are more temporary than others, and it is in that knowledge that we act appropriately, seeking to find the right place, make a unique impact, and leave without a trace.</p>

<p>Perhaps we can learn something from this cycle in our own, brief and glorious lifecycle.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 03 Mar 2014 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:42:"http://nshipster.com/nstemporarydirectory/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:42:"http://nshipster.com/nstemporarydirectory/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:6;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:11:"Namespacing";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:17989:"<blockquote>
<p>Why the hell is everything <code>NS</code>-whatever?</p>
</blockquote>

<p>You&#39;ll hear that within the first minute of introducing someone to Objective-C. Guaranteed.</p>

<p>Like a parent faced with the task of explaining the concept of death or the non-existence of Santa, you do your best to be forthcoming with facts, so that they might arrive at a conclusion themselves.</p>

<blockquote>
<p>Why, Jimmy, <code>NS</code> stands for <code>NeXTSTEP</code> (well, actually, <code>NeXTSTEP/Sun</code>, but we&#39;ll cover that with &quot;the birds &amp; the bees&quot; talk), and it&#39;s used to...</p>
</blockquote>

<p>...but by the time the words have left your mouth, you can already sense the disappointment in their face. Their innocence has been lost, and with an audible <em>sigh</em> of resignation, they start to ask uncomfortable questions about <a href="http://nshipster.com/at-compiler-directives/">@</a></p>

<hr>

<p>Namespacing is the preeminent bugbear of Objective-C. A cosmetic quirk with global implications, the language&#39;s lack of identifier containers remains a source of prodigious quantities of caremad for armchair language critics.</p>

<p>This is all to say: unlike many other languages that are popular today, Objective-C does not provide a module-like mechanism for avoiding class and method name collisions.</p>

<p>Instead, Objective-C relies on prefixes to ensure that functionality in one part of the app doesn&#39;t interfere with similarly named code somewhere else.</p>

<p>We&#39;ll jump into those right after a quick digression into type systems:</p>

<h2>Types in C &amp; Objective-C</h2>

<p>As noted many times in this publication, Objective-C is built directly on top of the C language. One consequence of this is that Objective-C and C share a type system, requiring that identifiers are globally unique.</p>

<p>You can see this for yourself—try defining a new static variable with the same name as an existing <code>@interface</code>, and the compiler will generate an error:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">XXObject</span> : <span class="nc">NSObject</span>
<span class="k">@end</span>

<span class="k">static</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">XXObject</span><span class="p">;</span>  <span class="c1">// Redefinition of &quot;XXObject&quot; as different kind of symbol</span>
</code></pre></div>
<p>That said, the Objective-C runtime creates a layer of abstraction on top of the C type system, allowing the following code to compile without even a snicker:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@protocol</span> <span class="nc">Foo</span>
<span class="k">@end</span>

<span class="k">@interface</span> <span class="nc">Foo</span> : <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="kt">id</span> <span class="n">Foo</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">@property</span> <span class="kt">id</span> <span class="n">Foo</span><span class="p">;</span>
<span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">Foo</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">Foo</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@interface</span> <span class="nc">Foo</span> <span class="nl">(Foo)</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">Foo</span>
<span class="k">@synthesize</span> <span class="n">Foo</span><span class="p">;</span>

<span class="k">+</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">Foo</span> <span class="p">{</span>
    <span class="kt">id</span> <span class="n">Foo</span> <span class="o">=</span> <span class="s">@&quot;Foo&quot;</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">Foo</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@end</span>
</code></pre></div>
<p>Within the context of the Objective-C runtime, a program is able to differentiate between a class, a protocol, a category, an instance variable, an instance method, and a class method all having the same name.</p>

<blockquote>
<p>That a variable can reappropriate the name of an existing method is a consequence of the C type system (which similarly allows for a variable to shadow the name of its containing function)</p>
</blockquote>

<h2>Prefixes</h2>

<p>All classes in an Objective-C application must be globally unique. Since many different frameworks are likely have some conceptual overlap—and therefore an overlap in names (users, views, requests / responses, etc.)—convention dictates that class names use 2 or 3 letter prefix.</p>

<h3>Class Prefixes</h3>

<p>Apple <a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/Conventions/Conventions.html">recommends</a> that 2-letter prefixes be reserved for first-party libraries and frameworks, while third-party developers (that&#39;s us) opt for 3 letters or more.</p>

<p>A veteran Mac or iOS developer will have likely memorized most if not all of the following abbreviated identifiers:</p>

<table>
    <thead>
        <tr>
            <th>Prefix</th>
            <th>Frameworks</th>
        </tr>
    </thead>
    <tbody>
        <tr><td><tt>AB</tt></td><td>AddressBook / AddressBookUI</td></tr>
        <tr><td><tt>AC</tt></td><td>Accounts</td></tr>
        <tr><td><tt>AD</tt></td><td>iAd</td></tr>
        <tr><td><tt>AL</tt></td><td>AssetsLibrary</td></tr>
        <tr><td><tt>AU</tt></td><td>AudioUnit</td></tr>
        <tr><td><tt>AV</tt></td><td>AVFoundation</td></tr>
        <tr><td><tt>CA</tt></td><td>CoreAnimation</td></tr>
        <tr><td><tt>CB</tt></td><td>CoreBluetooth</td></tr>
        <tr><td><tt>CF</tt></td><td>CoreFoundation / CFNetwork</td></tr>
        <tr><td><tt>CG</tt></td><td>CoreGraphics / QuartzCore / ImageIO</td></tr>
        <tr><td><tt>CI</tt></td><td>CoreImage</td></tr>
        <tr><td><tt>CL</tt></td><td>CoreLocation</td></tr>
        <tr><td><tt>CM</tt></td><td>CoreMedia / CoreMotion</td></tr>
        <tr><td><tt>CV</tt></td><td>CoreVideo</td></tr>
        <tr><td><tt>EA</tt></td><td>ExternalAccessory</td></tr>
        <tr><td><tt>EK</tt></td><td>EventKit / EventKitUI</td></tr>
        <tr><td><tt>GC</tt></td><td>GameController</td></tr>
        <tr><td><tt>GLK</tt><sup>*</sup></td><td>GLKit</td></tr>
        <tr><td><tt>JS</tt></td><td>JavaScriptCore</td></tr>
        <tr><td><tt>MA</tt></td><td>MediaAccessibility</td></tr>
        <tr><td><tt>MC</tt></td><td>MultipeerConnectivity</td></tr>
        <tr><td><tt>MF</tt></td><td>MessageUI*</td></tr>
        <tr><td><tt>MIDI</tt><sup>*</sup></td><td>CoreMIDI</td></tr>
        <tr><td><tt>MK</tt></td><td>MapKit</td></tr>
        <tr><td><tt>MP</tt></td><td>MediaPlayer</td></tr>
        <tr><td><tt>NK</tt></td><td>NewsstandKit</td></tr>
        <tr><td><tt>NS</tt></td><td>Foundation, AppKit, CoreData</td></tr>
        <tr><td><tt>PK</tt></td><td>PassKit</td></tr>
        <tr><td><tt>QL</tt></td><td>QuickLook</td></tr>
        <tr><td><tt>SC</tt></td><td>SystemConfiguration</td></tr>
        <tr><td><tt>Sec</tt><sup>*</sup></td><td>Security*</td></tr>
        <tr><td><tt>SK</tt></td><td>StoreKit / SpriteKit</td></tr>
        <tr><td><tt>SL</tt></td><td>Social</td></tr>
        <tr><td><tt>SS</tt></td><td>Safari Services</td></tr>
        <tr><td><tt>TW</tt></td><td>Twitter</td></tr>
        <tr><td><tt>UI</tt></td><td>UIKit</td></tr>
        <tr><td><tt>UT</tt></td><td>MobileCoreServices</td></tr>
    </tbody>
</table>

<h4>3rd-Party Class Prefixes</h4>

<p>Until recently, with the advent of <a href="http://cocoapods.org">CocoaPods</a> and a surge of new iOS developers, the distribution of open source, 3rd-party code had been largely a non-issue for Apple and the rest of the Objective-C community. Apple&#39;s naming guidelines came about recently enough that the advice to adopt 3-letter prefixes is only <em>just</em> becoming accepted practice.</p>

<p>Because of this, many established libraries still use 2-letter prefixes. Consider some of these <a href="https://github.com/search?l=Objective-C&amp;q=stars%3A%3E1&amp;s=stars&amp;type=Repositories">most-starred Objective-C repositories on GitHub</a>.</p>

<table>
    <thead>
        <tr>
            <th>Prefix</th>
            <th>Frameworks</th>
        </tr>
    </thead>
    <tbody>
        <tr><td><tt>AF</tt></td><td><a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> ("<a href="http://en.wikipedia.org/wiki/Gowalla">Alamofire</a>")</td></tr>
        <tr><td><tt>RK</tt></td><td><a href="https://github.com/RestKit/RestKit">RestKit</a></td></tr>
        <tr><td><tt>GPU</tt></td><td><a href="https://github.com/BradLarson/GPUImage">GPUImage</a></td></tr>
        <tr><td><tt>SD</tt></td><td><a href="https://github.com/rs/SDWebImage">SDWebImage</a></td></tr>
        <tr><td><tt>MB</tt></td><td><a href="https://github.com/jdg/MBProgressHUD">MBProgressHUD</a></td></tr>
        <tr><td><tt>FB</tt></td><td><a href="https://github.com/facebook/facebook-ios-sdk">Facebook SDK</a></td></tr>
        <tr><td><tt>FM</tt></td><td><a href="https://github.com/ccgus/fmdb">FMDB</a> ("<a href="http://flyingmeat.com">Flying Meat</a>")</td></tr>
        <tr><td><tt>JK</tt></td><td><a href="https://github.com/johnezang/JSONKit">JSONKit</a></td></tr>
        <tr><td><tt>FUI</tt></td><td><a href="https://github.com/Grouper/FlatUIKit">FlatUI</a></td></tr>
        <tr><td><tt>NI</tt></td><td><a href="https://github.com/jverkoey/nimbus">Nimbus</a></td></tr>
        <tr><td><tt>RAC</tt></td><td><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">Reactive Cocoa</a></td></tr>
    </tbody>
</table>

<p>Seeing as how <a href="https://github.com/AshFurrow/AFTabledCollectionView">we&#39;re already seeing prefix overlap among 3rd-party libraries</a>, make sure that you follow a 3+-letter convention in your own code.</p>

<blockquote>
<p>For especially future-focused library authors, consider using <a href="http://nshipster.com/at-compiler-directives/"><code>@compatibility_alias</code></a> to provide a seamless migration path for existing users in your next major upgrade.</p>
</blockquote>

<h3>Method Prefixes</h3>

<p>It&#39;s not just classes that are prone to naming collisions: selectors suffer from this too—in ways that are even more problematic than classes.</p>

<p>Consider the category:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">NSString</span> <span class="nl">(PigLatin)</span>
<span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">pigLatinString</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div>
<p>If <code>-pigLatinString</code> were implemented by another category (or added to the <code>NSString</code> class in a future version of iOS or Mac OS X), any calls to that method would result in undefined behavior, since no guarantee is made as to the order in which methods are defined by the runtime.</p>

<p>This can be guarded against by prefixing the method name, just like the class name (prefixing the category name isn&#39;t a bad idea, either):</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">NSString</span> <span class="nl">(XXXPigLatin)</span>
<span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">xxx_pigLatinString</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div>
<p>Apple&#39;s recommendation that <a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html#//apple_ref/doc/uid/TP40011210-CH6-SW4">all category methods use prefixes</a> is even less widely known or accepted than its policy on class prefixing.</p>

<p>There are many outspoken developers who will passionately argue one side or another. However, weighing the risk of collision against its likelihood, the cost/benefit analysis is not entirely clear-cut:</p>

<p>The main feature of categories is coating useful functionality with syntactic sugar. Any category method could alternatively be implemented as a function taking an explicit argument in place of the implicit <code>self</code> of a method.</p>

<p>Collisions can be detected at compile time by setting the <code>OBJC_PRINT_REPLACED_METHODS</code> environment variable to <code>YES</code>. In practice, collisions are extremely rare, and when they do occur, they&#39;re usually an indicator of functionality that is needlessly duplicated across dependencies. Although the worst-case scenario is a runtime exception, it&#39;s entirely likely that two methods named the same thing will actually <em>do</em> the same thing, and result in no change in behavior. All of those Swiss Army Knife categories that defined <code>NSArray -firstObject</code> continued to march on once the method was officially added.</p>

<p>Just as with constitutional scholarship, there will be strict and loose interpretations of Apple&#39;s programming guidelines. Those that see it as a living document would point out that... actually, you know what? If you&#39;ve read this far and are still undecided, just prefix your damn category methods. If you choose not to, just be mindful that it could bite you in the ass.</p>

<blockquote>
<p>Go ahead and add &quot;category method&quot; to your Tweetbot mute terms. Expiration: 1 Week.</p>
</blockquote>

<h4>Swizzling</h4>

<p>The one case where method prefixing (or suffixing) is absolutely necessary is when doing method replacement, as discussed in last week&#39;s article on <a href="http://nshipster.com/method-swizzling/">swizzling</a>.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@implementation</span> <span class="nc">UIViewController</span> <span class="nl">(Swizzling)</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">xxx_viewDidLoad</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">self</span> <span class="n">xxx_viewDidLoad</span><span class="p">];</span>

    <span class="c1">// Swizzled implementation</span>
<span class="p">}</span>
</code></pre></div>
<h2>Do We <em>Really</em> Need Namespaces?</h2>

<p>With all of the recent talk about replacing / reinventing / reimagining Objective-C, it&#39;s almost taken as a given that namespacing would be an obvious feature. But what does that actually get us?</p>

<p><strong>Aesthetics?</strong> Aside from IETF members and military personnel, nobody likes the visual aesthetic of <acronym title="CAPITAL LETTER ACRONYMS">CLA</acronym>s. But would <code>::</code>, <code>/</code>, or an extra <code>.</code> really make matters better? Do we <em>really</em> want to start calling <code>NSArray</code> &quot;Foundation Array&quot;? (And what would I do with NSHipster.com ?!)</p>

<p><strong>Semantics?</strong> Start to look closely at any other language, and how they actually use namespaces, and you&#39;ll realize that namespaces don&#39;t magically solve all matters of ambiguity. If anything, the additional context makes things worse.</p>

<p>Not to create a straw man, but an imagined implementation of Objective-C namespaces probably look a lot like this:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">@</span><span class="n">namespace</span> <span class="n">XX</span>
    <span class="k">@implementation</span> <span class="nc">Object</span>

    <span class="p">@</span><span class="n">using</span> <span class="n">F</span><span class="o">:</span> <span class="n">Foundation</span><span class="p">;</span>

    <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">foo</span> <span class="p">{</span>
        <span class="nl">F:</span><span class="n">Array</span> <span class="o">*</span><span class="n">array</span> <span class="o">=</span> <span class="p">@[</span><span class="mi">@1</span><span class="p">,</span><span class="mi">@2</span><span class="p">,</span> <span class="mi">@3</span><span class="p">];</span>

        <span class="c1">// ...</span>
    <span class="p">}</span>

    <span class="k">@end</span>
<span class="k">@end</span>
</code></pre></div>
<p>What we have currently—warts and all—has the notable advantage of non-ambiguity. There is no mistaking <code>NSString</code> for anything other than what it is, either by the compiler or when we talk about it as developers. There are no special contextual considerations to consider when reading through code to understand what actors are at play. And best of all: class names are <a href="http://lmgtfy.com/?q=NSString"><em>exceedingly</em> easy to search for</a>.</p>

<p>Either way, if you&#39;re interested in this subject, I&#39;d encourage you to take a look at <a href="http://optshiftk.com/2012/04/draft-proposal-for-namespaces-in-objective-c/">this namespace feature proposal</a> by <a href="http://optshiftk.com">Kyle Sluder</a>. It&#39;s a fascinating read.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 24 Feb 2014 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:33:"http://nshipster.com/namespacing/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:33:"http://nshipster.com/namespacing/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:7;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:16:"Method Swizzling";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:15599:"<blockquote>
<p>If you could blow up the world with the flick of a switch<br/>
Would you do it?<br/>
If you could make everybody poor just so you could be rich<br/>
Would you do it?<br/>
If you could watch everybody work while you just lay on your back<br/>
Would you do it?<br/>
If you could take all the love without giving any back<br/>
Would you do it?<br/>
And so we cannot know ourselves or what we&#39;d really do...<br/>
With all your power ... What would you do?<br/>
<cite>—<strong>The Flaming Lips</strong>, <em><a href="http://en.wikipedia.org/wiki/The_Yeah_Yeah_Yeah_Song_(With_All_Your_Power)">&quot;The Yeah Yeah Yeah Song (With All Your Power)&quot;</a></em></cite></p>
</blockquote>

<p>In last week&#39;s article about <a href="http://nshipster.com/associated-objects/">associated objects</a>, we began to explore the dark arts of the Objective-C runtime. This week, we venture further, to discuss what is perhaps the most contentious of runtime hackery techniques: method swizzling.</p>

<hr>

<p>Method swizzling is the process of changing the implementation of an existing selector. It&#39;s a technique made possible by the fact that method invocations in Objective-C can be changed at runtime, by changing how selectors are mapped to underlying functions in a class&#39;s dispatch table.</p>

<p>For example, let&#39;s say we wanted to track how many times each view controller is presented to a user in an iOS app:</p>

<p>Each view controller could add tracking code to its own implementation of <code>viewDidAppear:</code>, but that would make for a ton of duplicated boilerplate code. Subclassing would be another possibility, but it would require subclassing <code>UIViewController</code>, <code>UITableViewController</code>, <code>UINavigationController</code>, and every other view controller class—an approach that would also suffer from code duplication.</p>

<p>Fortunately, there is another way: <strong>method swizzling</strong> from a category. Here&#39;s how to do it:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#import &lt;objc/runtime.h&gt;</span>

<span class="k">@implementation</span> <span class="nc">UIViewController</span> <span class="nl">(Tracking)</span>

<span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">load</span> <span class="p">{</span>
    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
        <span class="kt">Class</span> <span class="n">class</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">class</span><span class="p">];</span>

        <span class="c1">// When swizzling a class method, use the following:</span>
        <span class="c1">// Class class = object_getClass((id)self);</span>

        <span class="kt">SEL</span> <span class="n">originalSelector</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="n">viewWillAppear</span><span class="o">:</span><span class="p">);</span>
        <span class="kt">SEL</span> <span class="n">swizzledSelector</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="n">xxx_viewWillAppear</span><span class="o">:</span><span class="p">);</span>

        <span class="n">Method</span> <span class="n">originalMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">class</span><span class="p">,</span> <span class="n">originalSelector</span><span class="p">);</span>
        <span class="n">Method</span> <span class="n">swizzledMethod</span> <span class="o">=</span> <span class="n">class_getInstanceMethod</span><span class="p">(</span><span class="n">class</span><span class="p">,</span> <span class="n">swizzledSelector</span><span class="p">);</span>

        <span class="kt">BOOL</span> <span class="n">didAddMethod</span> <span class="o">=</span>
            <span class="n">class_addMethod</span><span class="p">(</span><span class="n">class</span><span class="p">,</span>
                <span class="n">originalSelector</span><span class="p">,</span>
                <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">swizzledMethod</span><span class="p">),</span>
                <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">swizzledMethod</span><span class="p">));</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">didAddMethod</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">class_replaceMethod</span><span class="p">(</span><span class="n">class</span><span class="p">,</span>
                <span class="n">swizzledSelector</span><span class="p">,</span>
                <span class="n">method_getImplementation</span><span class="p">(</span><span class="n">originalMethod</span><span class="p">),</span>
                <span class="n">method_getTypeEncoding</span><span class="p">(</span><span class="n">originalMethod</span><span class="p">));</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">method_exchangeImplementations</span><span class="p">(</span><span class="n">originalMethod</span><span class="p">,</span> <span class="n">swizzledMethod</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="cp">#pragma mark - Method Swizzling</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">xxx_viewWillAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">self</span> <span class="n">xxx_viewWillAppear</span><span class="o">:</span><span class="n">animated</span><span class="p">];</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;viewWillAppear: %@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">@end</span>
</code></pre></div>
<blockquote>
<p>In computer science, <a href="http://en.wikipedia.org/wiki/Pointer_swizzling">pointer swizzling</a> is the conversion of references based on name or position to direct pointer references.  While the origins of Objective-C&#39;s usage of the term are not entirely known, it&#39;s understandable why it was co-opted, since method swizzling involves changing the reference of a function pointer by its selector.</p>
</blockquote>

<p>Now, when any instance of <code>UIViewController</code>, or one of its subclasses invokes <code>viewWillAppear:</code>, a log statement will print out.</p>

<p>Injecting behavior into the view controller lifecycle, responder events, view drawing, or the Foundation networking stack are all good examples of how method swizzling can be used to great effect. There are a number of other occasions when swizzling would be an appropriate technique, and they become increasingly apparent the more seasoned an Objective-C developer becomes.</p>

<p>Regardless of <em>why</em> or <em>where</em> one chooses to use swizzling, the <em>how</em> remains absolute:</p>

<h2>+load vs. +initialize</h2>

<p><strong>Swizzling should always be done in <code>+load</code>.</strong></p>

<p>There are two methods that are automatically invoked by the Objective-C runtime for each class. <code>+load</code> is sent when the class is initially loaded, while <code>+initialize</code> is called just before the application calls its first method on that class or an instance of that class. Both are optional, and are executed only if the method is implemented.</p>

<p>Because method swizzling affects global state, it is important to minimize the possibility of race conditions. <code>+load</code> is guaranteed to be loaded during class initialization, which provides a modicum of consistency for changing system-wide behavior. By contrast, <code>+initialize</code> provides no such guarantee of when it will be executed—in fact, it may <em>never</em> be called, if that class is never messaged directly by the app.</p>

<h2>dispatch_once</h2>

<p><strong>Swizzling should always be done in a <code>dispatch_once</code>.</strong></p>

<p>Again, because swizzling changes global state, we need to take every precaution available to us in the runtime. Atomicity is one such precaution, as is a guarantee that code will be executed exactly once, even across different threads. Grand Central Dispatch&#39;s <code>dispatch_once</code> provides both of these desirable behaviors, and should be considered as much a standard practice for swizzling as they are for <a href="http://nshipster.com/c-storage-classes/">initializing singletons</a>.</p>

<h2>Selectors, Methods, &amp; Implementations</h2>

<p>In Objective-C, <em>selectors</em>, <em>methods</em>, and <em>implementations</em> refer to particular aspects of the runtime, although in normal conversation, these terms are often used interchangeably to generally refer to the process of message sending.</p>

<p>Here is how each is described in Apple&#39;s <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/Reference/reference.html#//apple_ref/c/func/method_getImplementation">Objective-C Runtime Reference</a>:</p>

<blockquote>
<ul>
<li>Selector (<code>typedef struct objc_selector *SEL</code>): Selectors are used to represent the name of a method at runtime. A method selector is a C string that has been registered (or &quot;mapped&quot;) with the Objective-C runtime. Selectors generated by the compiler are automatically mapped by the runtime when the class is loaded .</li>
<li>Method (<code>typedef struct objc_method *Method</code>): An opaque type that represents a method in a class definition.</li>
<li>Implementation (<code>typedef id (*IMP)(id, SEL, ...)</code>): This data type is a pointer to the start of the function that implements the method. This function uses standard C calling conventions as implemented for the current CPU architecture. The first argument is a pointer to self (that is, the memory for the particular instance of this class, or, for a class method, a pointer to the metaclass). The second argument is the method selector. The method arguments follow.</li>
</ul>
</blockquote>

<p>The best way to understand the relationship between these concepts is as follows: a class (<code>Class</code>) maintains a dispatch table to resolve messages sent at runtime; each entry in the table is a method (<code>Method</code>), which keys a particular name, the selector (<code>SEL</code>), to an implementation (<code>IMP</code>), which is a pointer to an underlying C function.</p>

<p>To swizzle a method is to change a class&#39;s dispatch table in order to resolve messages from an existing selector to a different implementation, while aliasing the original method implementation to a new selector.</p>

<h2>Invoking <code>_cmd</code></h2>

<p>It may appear that the following code will result in an infinite loop:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">xxx_viewWillAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">self</span> <span class="n">xxx_viewWillAppear</span><span class="o">:</span><span class="n">animated</span><span class="p">];</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;viewWillAppear: %@&quot;</span><span class="p">,</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">self</span> <span class="n">class</span><span class="p">]));</span>
<span class="p">}</span>
</code></pre></div>
<p>Surprisingly, it won&#39;t. In the process of swizzling, <code>xxx_viewWillAppear:</code> has been reassigned to the original implementation of <code>UIViewController -viewWillAppear:</code>. It&#39;s good programmer instinct for calling a method on <code>self</code> in its own implementation to raise a red flag, but in this case, it makes sense if we remember what&#39;s <em>really</em> going on. However, if we were to call <code>viewWillAppear:</code> in this method, it <em>would</em> cause an infinite loop, since the implementation of this method will be swizzled to the <code>viewwillAppear:</code> selector at runtime.</p>

<blockquote>
<p>Remember to prefix your swizzled method name, the same way you might any other contentious category method.</p>
</blockquote>

<h2>Considerations</h2>

<p>Swizzling is widely considered a voodoo technique, prone to unpredictable behavior and unforeseen consequences. While it is not the safest thing to do, method swizzling is reasonably safe, when the following precautions are taken:</p>

<ul>
<li><strong>Always invoke the original implementation of a method (unless you have a good reason not to)</strong>: APIs provide a contract for input and output, but the implementation in-between is a black box. Swizzling a method and not calling the original implementation may cause underlying assumptions about private state to break, along with the rest of your application.</li>
<li><strong>Avoid collisions</strong>: Prefix category methods, and make damn well sure that nothing else in your code base (or any of your dependencies) are monkeying around with the same piece of functionality as you are.</li>
<li><strong>Understand what&#39;s going on</strong>: Simply copy-pasting swizzling code without understanding how it works is not only dangerous, but is a wasted opportunity to learn a lot about the Objective-C runtime. Read through the <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/Reference/reference.html#//apple_ref/c/func/method_getImplementation">Objective-C Runtime Reference</a> and browse <code>&lt;objc/runtime.h&gt;</code> to get a good sense of how and why things happen. <em>Always endeavor to replace magical thinking with understanding.</em></li>
<li><strong>Proceed with caution</strong>: No matter how confident you are about swizzling Foundation, UIKit, or any other built-in framework, know that everything could break in the next release. Be ready for that, and go the extra mile to ensure that in playing with fire, you don&#39;t get <code>NSBurned</code>.</li>
</ul>

<blockquote>
<p>Feeling gun shy about invoking the Objective-C runtime directly? <a href="https://twitter.com/rentzsch">Jonathan ‘Wolf’ Rentzsch</a> provides a battle-tested, CocoaPods-ready library called <a href="https://github.com/rentzsch/jrswizzle">JRSwizzle</a> that will take care of everything for you.</p>
</blockquote>

<hr>

<p>Like <a href="http://nshipster.com/associated-objects/">associated objects</a>, method swizzling is a powerful technique when you need it, but should be used sparingly.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 17 Feb 2014 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/method-swizzling/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/method-swizzling/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:8;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:18:"Associated Objects";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:13250:"<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#import &lt;objc/runtime.h&gt;</span>
</code></pre></div>
<p>Objective-C developers are conditioned to be wary of whatever follows this ominous incantation. And for good reason: messing with the Objective-C runtime changes the very fabric of reality for all of the code that runs on it.</p>

<p>In the right hands, the functions of <code>&lt;objc/runtime.h&gt;</code> have the potential to add powerful new behavior to an application or framework, in ways that would otherwise not be possible. In the wrong hands, it drains the proverbial <a href="http://en.wikipedia.org/wiki/Eternal_Darkness:_Sanity&#x27;s_Requiem#Sanity_effects">sanity meter</a> of the code, and everything it may interact with (with <a href="http://www.youtube.com/watch?v=RSXcajQnasc#t=0m30s">terrifying side-effects</a>).</p>

<p>Therefore, it is with great trepidation that we consider this <a href="http://en.wikipedia.org/wiki/Deal_with_the_Devil">Faustian bargain</a>, and look at one of the subjects most-often requested by NSHipster readers: associated objects.</p>

<hr>

<p>Associated Objects—or Associative References, as they were originally known—are a feature of the Objective-C 2.0 runtime, introduced in Mac OS X 10.6 Snow Leopard (available in iOS 4). The term refers to the following three C functions declared in <code>&lt;objc/runtime.h&gt;</code>, which allow objects to associate arbitrary values for keys at runtime:</p>

<ul>
<li><code>objc_setAssociatedObject</code></li>
<li><code>objc_getAssociatedObject</code></li>
<li><code>objc_removeAssociatedObjects</code></li>
</ul>

<p>Why is this useful? It allows developers to <strong>add custom properties to existing classes in categories</strong>, which <a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html">is an otherwise notable shortcoming for Objective-C</a>.</p>

<h4>NSObject+AssociatedObject.h</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">NSObject</span> <span class="nl">(AssociatedObject)</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="kt">id</span> <span class="n">associatedObject</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div>
<h4>NSObject+AssociatedObject.m</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@implementation</span> <span class="nc">NSObject</span> <span class="nl">(AssociatedObject)</span>
<span class="k">@dynamic</span> <span class="n">associatedObject</span><span class="p">;</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setAssociatedObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span> <span class="p">{</span>
     <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="n">associatedObject</span><span class="p">),</span> <span class="n">object</span><span class="p">,</span> <span class="n">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">associatedObject</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="n">associatedObject</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div>
<p>It is often recommended that they key be a <code>static char</code>—or better yet, the pointer to one. Basically, an arbitrary value that is guaranteed to be constant, unique, and scoped for use within getters and setters:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">static</span> <span class="kt">char</span> <span class="n">kAssociatedObjectKey</span><span class="p">;</span>

<span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">kAssociatedObjectKey</span><span class="p">);</span>
</code></pre></div>
<p>However, a much simpler solution exists: just use a selector.</p>

<blockquote class="twitter-tweet" lang="en"><p>Since <tt>SEL</tt>s are guaranteed to be unique and constant, you can use <tt>_cmd</tt> as the key for <tt>objc_setAssociatedObject()</tt>. <a href="https://twitter.com/search?q=%23objective&amp;src=hash">#objective</a>-c <a href="https://twitter.com/search?q=%23snowleopard&amp;src=hash">#snowleopard</a></p>&mdash; Bill Bumgarner (@bbum) <a href="https://twitter.com/bbum/statuses/3609098005">August 28, 2009</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<h2>Associative Object Behaviors</h2>

<p>Values can be associated onto objects according to the behaviors defined by the enumerated type <code>objc_AssociationPolicy</code>:</p>

<table>
    <thead>
        <tr>
            <th>Behavior</th>
            <th><tt>@property</tt> Equivalent</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>
                <tt>OBJC_ASSOCIATION_ASSIGN</tt>
            </td>
            <td>
                <tt>@property (assign)</tt> or <tt>@property (unsafe_unretained)</tt>
            </td>
            <td>
                Specifies a weak reference to the associated object.
            </td>
        </tr>
        <tr>
            <td>
                <tt>OBJC_ASSOCIATION_RETAIN_NONATOMIC</tt>
            </td>
            <td>
                <tt>@property (nonatomic, strong)</tt>
            </td>
            <td>
                Specifies a strong reference to the associated object, and that the association is not made atomically.
            </td>
        </tr>
        <tr>
            <td>
                <tt>OBJC_ASSOCIATION_COPY_NONATOMIC</tt>
            </td>
            <td>
                <tt>@property (nonatomic, copy)</tt>
            </td>
            <td>
                Specifies that the associated object is copied, and that the association is not made atomically.
            </td>
        </tr>
        <tr>
            <td>
                <tt>OBJC_ASSOCIATION_RETAIN</tt>
            </td>
            <td>
                <tt>@property (atomic, strong)</tt>
            </td>
            <td>
                Specifies a strong reference to the associated object, and that the association is made atomically.
            </td>
        </tr>
        <tr>
            <td>
                <tt>OBJC_ASSOCIATION_COPY</tt>
            </td>
            <td>
                <tt>@property (atomic, copy)</tt>
            </td>
            <td>
                Specifies that the associated object is copied, and that the association is made atomically.
            </td>
        </tr>
    </tbody>
</table>

<p>Weak associations to objects made with <code>OBJC_ASSOCIATION_ASSIGN</code> are not zero <code>weak</code> references, but rather follow a behavior similar to <code>unsafe_unretained</code>, which means that one should be cautious when accessing weakly associated objects within an implementation.</p>

<blockquote>
<p>According to the Deallocation Timeline described in <a href="https://developer.apple.com/videos/wwdc/2011/#322-video">WWDC 2011, Session 322</a> (~36:00), associated objects are erased surprisingly late in the object lifecycle, in <code>object_dispose()</code>, which is invoked by <code>NSObject -dealloc</code>.</p>
</blockquote>

<h2>Removing Values</h2>

<p>One may be tempted to call <code>objc_removeAssociatedObjects()</code> at some point in their foray into associated objects. However, <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/Reference/reference.html#//apple_ref/c/func/objc_removeAssociatedObjects">as described in the documentation</a>, it&#39;s unlikely that you would have an occasion to invoke it yourself:</p>

<blockquote>
<p>The main purpose of this function is to make it easy to return an object to a &quot;pristine state”. You should not use this function for general removal of associations from objects, since it also removes associations that other clients may have added to the object. Typically you should use objc_setAssociatedObject with a nil value to clear an association.</p>
</blockquote>

<h2>Patterns</h2>

<ul>
<li><strong>Adding private variables to facilitate implementation details</strong>. When extending the behavior of a built-in class, it may be necessary to keep track of additional state. This is the <em>textbook</em> use case for associated objects. For example, AFNetworking uses associated objects on its <code>UIImageView</code> category to <a href="https://github.com/AFNetworking/AFNetworking/blob/2.1.0/UIKit%2BAFNetworking/UIImageView%2BAFNetworking.m#L57-L63">store a request operation object</a>, used to asynchronously fetch a remote image at a particular URL.</li>
<li><strong>Adding public properties to configure category behavior.</strong> Sometimes, it makes more sense to make category behavior more flexible with a property, than in a method parameter. In these situations, a public-facing property is an acceptable situation to use associated objects. To go back to the previous example of AFNetworking, its category on <code>UIImageView</code>, <a href="https://github.com/AFNetworking/AFNetworking/blob/2.1.0/UIKit%2BAFNetworking/UIImageView%2BAFNetworking.h#L60-L65">its <code>imageResponseSerializer</code></a> allows image views to optionally apply a filter, or otherwise change the rendering of a remote image before it is set and cached to disk.</li>
<li><strong>Creating an associated observer for KVO</strong>. When using <a href="http://nshipster.com/key-value-observing/">KVO</a> in a category implementation, it is recommended that a custom associated-object be used as an observer, rather than the object observing itself.</li>
</ul>

<h2>Anti-Patterns</h2>

<ul>
<li><strong>Storing an associated object, when the value is not needed</strong>. A common pattern for views is to create a convenience method that populates fields and attributes based on a model object or compound value. If that value does not need to be recalled later, it is acceptable, and indeed preferable, not to associate with that object.</li>
<li><strong>Storing an associated object, when the value can be inferred.</strong> For example, one might be tempted to store a reference to a custom accessory view&#39;s containing <code>UITableViewCell</code>, for use in <code>tableView:accessoryButtonTappedForRowWithIndexPath:</code>, when this can retrieved by calling <code>cellForRowAtIndexPath:</code>.</li>
<li><strong>Using associated objects instead of X</strong>, where X is any one the following:

<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html">Subclassing</a> for when inheritance is a more reasonable fit than composition.</li>
<li><a href="https://developer.apple.com/library/ios/documentation/general/conceptual/Devpedia-CocoaApp/TargetAction.html">Target-Action</a> for adding interaction events to responders.</li>
<li><a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/GestureRecognizer_basics/GestureRecognizer_basics.html">Gesture Recognizers</a> for any situations when target-action doesn&#39;t suffice.</li>
<li><a href="https://developer.apple.com/library/ios/documentation/general/conceptual/DevPedia-CocoaCore/Delegation.html">Delegation</a> when behavior can be delegated to another object.</li>
<li><a href="http://nshipster.com/nsnotification-and-nsnotificationcenter/">NSNotification &amp; NSNotificationCenter</a> for communicating events across a system in a loosely-coupled way.</li>
</ul></li>
</ul>

<hr>

<p>Associated objects should be seen as a method of last resort, rather than a solution in search of a problem (and really, categories themselves really shouldn&#39;t be at the top of the toolchain to begin with).</p>

<p>Like any clever trick, hack, or workaround, there is a natural tendency for one to actively seek out occasions to use it—especially just after learning about it. Do your best to understand and appreciate when it&#39;s the right solution, and save yourself the embarrassment of being scornfully asked &quot;why in the name of $DEITY&quot; you decided to go with <em>that</em> solution.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 10 Feb 2014 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:40:"http://nshipster.com/associated-objects/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:40:"http://nshipster.com/associated-objects/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:9;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:70:"MKTileOverlay,&lt;br/&gt;MKMapSnapshotter &amp;&lt;br/&gt;MKDirections";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:38634:"<p>Unless you work with <code>MKMapView</code> on a regular basis, the last you may have heard about the current state of cartography on iOS may not have been <a href="http://www.apple.com/letter-from-tim-cook-on-maps/">under the cheeriest of circumstances</a>. Even now, years after the ire of armchair usability experts has moved on to iOS 7&#39;s distinct &quot;look and feel&quot;, the phrase &quot;Apple Maps&quot; still does not inspire confidence in the average developer.</p>

<p>Therefore, it may come as a surprise maps on iOS have gotten quite a bit better in the intervening releases. Quite good, in fact—especially with the new mapping APIs introduced in iOS 7.  These new APIs not only expose the advanced presentational functionality seen in Maps, but provide workarounds for MapKit&#39;s limitations.</p>

<p>This week on NSHipster, we&#39;ll introduce <code>MKTileOverlay</code>, <code>MKMapSnapshotter</code>, and <code>MKDirections</code>: three new MapKit APIs introduced in iOS 7 that unlock a new world of possibilities.</p>

<hr>

<h2>MKTileOverlay</h2>

<p>Don&#39;t like the default Apple Maps tiles? <a href="https://developer.apple.com/library/ios/documentation/MapKit/Reference/MKTileOverlay_class/Reference/Reference.html"><code>MKTileOverlay</code></a> allows you to seamlessly swap out to another tile set in just a few lines of code.</p>

<blockquote>
<p>Just like <a href="http://www.openstreetmap.org">OpenStreetMap</a> and <a href="https://maps.google.com">Google Maps</a>, MKTileOverlay uses <a href="http://en.wikipedia.org/wiki/Mercator_projection#The_spherical_model">spherical mercator projection (EPSG:3857)</a>.</p>
</blockquote>

<h3>Setting Custom Map View Tile Overlay</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">template</span> <span class="o">=</span> <span class="s">@&quot;http://tile.openstreetmap.org/{z}/{x}/{y}.png&quot;</span><span class="p">;</span>

<span class="n">MKTileOverlay</span> <span class="o">*</span><span class="n">overlay</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKTileOverlay</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithURLTemplate</span><span class="o">:</span><span class="n">template</span><span class="p">];</span>
<span class="n">overlay</span><span class="p">.</span><span class="n">canReplaceMapContent</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>

<span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">mapView</span> <span class="n">addOverlay</span><span class="o">:</span><span class="n">overlay</span>
                   <span class="nl">level:</span><span class="n">MKOverlayLevelAboveLabels</span><span class="p">];</span>
</code></pre></div>
<p>MKTileOverlay is initialized with a URL template string, with the <code>x</code> &amp; <code>y</code> tile coordinates within the specified zoom level. <a href="https://www.mapbox.com/developers/guide/">MapBox has a great explanation for this scheme is used to generate tiles</a>:</p>

<blockquote>
<p>Each tile has a z coordinate describing its zoom level and x and y coordinates describing its position within a square grid for that zoom level. Hence, the very first tile in the web map system is at 0/0/0.</p>
</blockquote>

<table style="display:block;width:256px;margin:10px auto">
    <tr>
        <td style="background-image:url(https://a.tiles.mapbox.com/v3/examples.map-9ijuk24y/0/0/0.png);width:256px;height:256px;padding:0;border:1px #fff solid;"><span style="text-align:center;display:block">0/0/0</span></td>
    </tr>
</table>

<blockquote>
<p>Zoom level 0 covers the entire globe. The very next zoom level divides z0 into four equal squares such that 1/0/0 and 1/1/0 cover the northern hemisphere while 1/0/1 and 1/1/1 cover the southern hemisphere.</p>
</blockquote>

<table style="display:block;width:514px;margin:10px auto;">
    <tr>
        <td style="background-image:url(https://a.tiles.mapbox.com/v3/examples.map-9ijuk24y/1/0/0.png);width:256px;height:256px;padding:0;border:1px #fff solid;"><span style="text-align:center;display:block">1/0/0</span></td>
        <td style="background-image:url(https://a.tiles.mapbox.com/v3/examples.map-9ijuk24y/1/1/0.png);width:256px;height:256px;padding:0;border:1px #fff solid;"><span style="text-align:center;display:block">1/1/0</span></td>
    </tr>
    <tr>
        <td style="background-image:url(https://a.tiles.mapbox.com/v3/examples.map-9ijuk24y/1/0/1.png);width:256px;height:256px;padding:0;border:1px #fff solid;"><span style="text-align:center;display:block">1/0/1</span></td>
        <td style="background-image:url(https://a.tiles.mapbox.com/v3/examples.map-9ijuk24y/1/1/1.png);width:256px;height:256px;padding:0;border:1px #fff solid;"><span style="text-align:center;display:block">1/1/1</span></td>
    </tr>
</table>

<blockquote>
<p>Zoom levels are related to each other by powers of four - <code>z0</code> contains 1 tile, <code>z1</code> contains 4 tiles, <code>z2</code> contains 16, and so on. Because of this exponential relationship the amount of detail increases at every zoom level but so does the amount of bandwidth and storage required to serve up tiles. For example, a map at <code>z15</code> – about when city building footprints first become visible – requires about 1.1 billion tiles to cover the entire world. At <code>z17</code>, just two zoom levels greater, the world requires 17 billion tiles.</p>
</blockquote>

<p>After setting <code>canReplaceMapContent</code> to <code>YES</code>, the overlay is added to the <code>MKMapView</code>.</p>

<p>In the map view&#39;s delegate, <code>mapView:rendererForOverlay:</code> is implemented simply to return a new <code>MKTileOverlayRenderer</code> instance when called for the <code>MKTileOverlay</code> overlay.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#pragma mark - MKMapViewDelegate</span>

<span class="k">-</span> <span class="p">(</span><span class="n">MKOverlayRenderer</span> <span class="o">*</span><span class="p">)</span><span class="nf">mapView:</span><span class="p">(</span><span class="n">MKMapView</span> <span class="o">*</span><span class="p">)</span><span class="nv">mapView</span>
            <span class="nl">rendererForOverlay:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">MKOverlay</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">overlay</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">overlay</span> <span class="n">isKindOfClass</span><span class="o">:</span><span class="p">[</span><span class="n">MKTileOverlay</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">[[</span><span class="n">MKTileOverlayRenderer</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithTileOverlay</span><span class="o">:</span><span class="n">overlay</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<blockquote>
<p>Speaking of <a href="https://www.mapbox.com">MapBox</a>, <a href="https://github.com/incanus">Justin R. Miller</a> maintains <a href="https://www.mapbox.com/mbxmapkit/">MBXMapKit</a>, a MapBox-enabled drop-in replacement for <code>MKMapView</code>. It&#39;s the easiest way to get up-and-running with this world-class mapping service, and highly recommended for anyone looking to make an impact with maps in their next release.</p>
</blockquote>

<h3>Implementing Custom Behavior with MKTileOverlay Subclass</h3>

<p>If you need to accommodate a different tile coordinate scheme with your server, or want to add in-memory or offline caching, this can be done by subclassing <code>MKTileOverlay</code> and overriding <code>-URLForTilePath:</code> and <code>-loadTileAtPath:result:</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">XXTileOverlay</span> : <span class="nc">MKTileOverlay</span>
<span class="k">@property</span> <span class="n">NSCache</span> <span class="o">*</span><span class="n">cache</span><span class="p">;</span>
<span class="k">@property</span> <span class="n">NSOperationQueue</span> <span class="o">*</span><span class="n">operationQueue</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">XXTileOverlay</span>

<span class="k">-</span> <span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nf">URLForTilePath:</span><span class="p">(</span><span class="n">MKTileOverlayPath</span><span class="p">)</span><span class="nv">path</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">NSURL</span> <span class="n">URLWithString</span><span class="o">:</span><span class="p">[</span><span class="n">NSString</span> <span class="n">stringWithFormat</span><span class="o">:</span><span class="s">@&quot;http://tile.example.com/%d/%d/%d&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">.</span><span class="n">z</span><span class="p">,</span> <span class="n">path</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">path</span><span class="p">.</span><span class="n">y</span><span class="p">]];</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">loadTileAtPath:</span><span class="p">(</span><span class="n">MKTileOverlayPath</span><span class="p">)</span><span class="nv">path</span>
                <span class="nl">result:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSData</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">))</span><span class="nv">result</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">NSData</span> <span class="o">*</span><span class="n">cachedData</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">cache</span> <span class="n">objectForKey</span><span class="o">:</span><span class="p">[</span><span class="n">self</span> <span class="n">URLForTilePath</span><span class="o">:</span><span class="n">path</span><span class="p">]];</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cachedData</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">result</span><span class="p">(</span><span class="n">cachedData</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLRequest</span> <span class="n">requestWithURL</span><span class="o">:</span><span class="p">[</span><span class="n">self</span> <span class="n">URLForTilePath</span><span class="o">:</span><span class="n">path</span><span class="p">]];</span>
        <span class="p">[</span><span class="n">NSURLConnection</span> <span class="n">sendAsynchronousRequest</span><span class="o">:</span><span class="n">request</span> <span class="n">queue</span><span class="o">:</span><span class="n">self</span><span class="p">.</span><span class="n">operationQueue</span> <span class="n">completionHandler</span><span class="o">:^</span><span class="p">(</span><span class="n">NSURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="n">NSData</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">connectionError</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">result</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">connectionError</span><span class="p">);</span>
        <span class="p">}];</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">@end</span>
</code></pre></div>
<h2>MKMapSnapshotter</h2>

<p>Another addition to iOS 7 was <a href="https://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapSnapshotter_class/Reference/Reference.html"><code>MKMapSnapshotter</code></a>, which formalizes the process of creating an image representation of a map view. Previously, this would involve playing fast and loose with the <code>UIGraphicsContext</code>, but now images can reliably be created for any particular region and perspective.</p>

<blockquote>
<p>See <a href="https://developer.apple.com/wwdc/videos/?id=309">WWDC 2013 Session 309: &quot;Putting Map Kit in Perspective&quot;</a> for additional information on how and when to use <code>MKMapSnapshotter</code>.</p>
</blockquote>

<h3>Creating a Map View Snapshot</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">MKMapSnapshotOptions</span> <span class="o">*</span><span class="n">options</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKMapSnapshotOptions</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="n">options</span><span class="p">.</span><span class="n">region</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">region</span><span class="p">;</span>
<span class="n">options</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">;</span>
<span class="n">options</span><span class="p">.</span><span class="n">scale</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIScreen</span> <span class="n">mainScreen</span><span class="p">]</span> <span class="n">scale</span><span class="p">];</span>

<span class="n">NSURL</span> <span class="o">*</span><span class="n">fileURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="n">fileURLWithPath</span><span class="o">:</span><span class="s">@&quot;path/to/snapshot.png&quot;</span><span class="p">];</span>

<span class="n">MKMapSnapshotter</span> <span class="o">*</span><span class="n">snapshotter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKMapSnapshotter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithOptions</span><span class="o">:</span><span class="n">options</span><span class="p">];</span>
<span class="p">[</span><span class="n">snapshotter</span> <span class="n">startWithCompletionHandler</span><span class="o">:^</span><span class="p">(</span><span class="n">MKMapSnapshot</span> <span class="o">*</span><span class="n">snapshot</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;[Error] %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="n">snapshot</span><span class="p">.</span><span class="n">image</span><span class="p">;</span>
    <span class="n">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">UIImagePNGRepresentation</span><span class="p">(</span><span class="n">image</span><span class="p">);</span>
    <span class="p">[</span><span class="n">data</span> <span class="n">writeToURL</span><span class="o">:</span><span class="n">fileURL</span> <span class="n">atomically</span><span class="o">:</span><span class="nb">YES</span><span class="p">];</span>
<span class="p">}];</span>
</code></pre></div>
<p>First, an <code>MKMapSnapshotOptions</code> object is created, which is used to specify the region, size, scale, and <a href="https://developer.apple.com/library/mac/documentation/MapKit/Reference/MKMapCamera_class/Reference/Reference.html">camera</a> used to render the map image.</p>

<p>Then, these options are passed to a new <code>MKMapSnapshotter</code> instance, which asynchronously creates an image with <code>-startWithCompletionHandler:</code>. In this example, a PNG representation of the image is written to disk.</p>

<h3>Drawing Annotations on Map View Snapshot</h3>

<p>However, this only draws the map for the specified region; annotations are rendered separately.</p>

<p>Including annotations—or indeed, any additional information to the map snapshot—can be done by dropping down into Core Graphics:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[</span><span class="n">snapshotter</span> <span class="n">startWithQueue</span><span class="o">:</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
              <span class="nl">completionHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">MKMapSnapshot</span> <span class="o">*</span><span class="n">snapshot</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;[Error] %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
          <span class="k">return</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="n">MKAnnotationView</span> <span class="o">*</span><span class="n">pin</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKPinAnnotationView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithAnnotation</span><span class="o">:</span><span class="nb">nil</span> <span class="n">reuseIdentifier</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span>

      <span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="n">snapshot</span><span class="p">.</span><span class="n">image</span><span class="p">;</span>
      <span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">,</span> <span class="nb">YES</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">scale</span><span class="p">);</span>
      <span class="p">{</span>
          <span class="p">[</span><span class="n">image</span> <span class="n">drawAtPoint</span><span class="o">:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">)];</span>

          <span class="n">CGRect</span> <span class="n">rect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
          <span class="k">for</span> <span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">MKAnnotation</span><span class="o">&gt;</span> <span class="n">annotation</span> <span class="k">in</span> <span class="n">self</span><span class="p">.</span><span class="n">mapView</span><span class="p">.</span><span class="n">annotations</span><span class="p">)</span> <span class="p">{</span>
              <span class="n">CGPoint</span> <span class="n">point</span> <span class="o">=</span> <span class="p">[</span><span class="n">snapshot</span> <span class="n">pointForCoordinate</span><span class="o">:</span><span class="n">annotation</span><span class="p">.</span><span class="n">coordinate</span><span class="p">];</span>
              <span class="k">if</span> <span class="p">(</span><span class="n">CGRectContainsPoint</span><span class="p">(</span><span class="n">rect</span><span class="p">,</span> <span class="n">point</span><span class="p">))</span> <span class="p">{</span>
                  <span class="n">point</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">point</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">pin</span><span class="p">.</span><span class="n">centerOffset</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span>
                                <span class="p">(</span><span class="n">pin</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mf">2.0f</span><span class="p">);</span>
                  <span class="n">point</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">point</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">pin</span><span class="p">.</span><span class="n">centerOffset</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span>
                                <span class="p">(</span><span class="n">pin</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mf">2.0f</span><span class="p">);</span>
                  <span class="p">[</span><span class="n">pin</span><span class="p">.</span><span class="n">image</span> <span class="n">drawAtPoint</span><span class="o">:</span><span class="n">point</span><span class="p">];</span>
              <span class="p">}</span>
          <span class="p">}</span>

          <span class="n">UIImage</span> <span class="o">*</span><span class="n">compositeImage</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
          <span class="n">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="n">UIImagePNGRepresentation</span><span class="p">(</span><span class="n">compositeImage</span><span class="p">);</span>
          <span class="p">[</span><span class="n">data</span> <span class="n">writeToURL</span><span class="o">:</span><span class="n">fileURL</span> <span class="n">atomically</span><span class="o">:</span><span class="nb">YES</span><span class="p">];</span>
      <span class="p">}</span>
      <span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
<span class="p">}];</span>
</code></pre></div>
<h2>MKDirections</h2>

<p>The final iOS 7 addition to MapKit that we&#39;ll discuss is <a href="https://developer.apple.com/library/mac/documentation/MapKit/Reference/MKDirections_class/Reference/Reference.html"><code>MKDirections</code></a>.</p>

<blockquote>
<p><code>MKDirections</code>&#39; spiritual predecessor (of sorts), <a href="https://developer.apple.com/library/ios/documentation/MapKit/Reference/MKLocalSearch/Reference/Reference.html"><code>MKLocalSearch</code></a> was discussed in <a href="http://nshipster.com/mklocalsearch/">a previous NSHipster article</a></p>
</blockquote>

<p>As its name implies, <code>MKDirections</code> fetches routes between two waypoints. A <code>MKDirectionsRequest</code> object is initialized with a <code>source</code> and <code>destination</code>, and is then passed into an <code>MKDirections</code> object, which can calculate several possible routes and estimated travel times.</p>

<p>It does so asynchronously, with <code>calculateDirectionsWithCompletionHandler:</code>, which returns either an <code>MKDirectionsResponse</code> object or an <code>NSError</code> describing why the directions request failed. An <code>MKDirectionsResponse</code> object contains an array of <code>routes</code>: <code>MKRoute</code> objects with an array of <code>MKRouteStep</code> <code>steps</code> objects, a polyline shape that can be drawn on the map, and other information like estimated travel distance and any travel advisories in effect.</p>

<p>Building on the previous example, here is how <code>MKDirections</code> might be used to create an array of images representing each step in a calculated route between two points (which might then be pasted into an email or cached on disk):</p>

<h3>Getting Snapshots for each Step of Directions on a Map View</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">mutableStepImages</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>

<span class="n">MKDirectionsRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKDirectionsRequest</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="n">request</span><span class="p">.</span><span class="n">source</span> <span class="o">=</span> <span class="p">[</span><span class="n">MKMapItem</span> <span class="n">mapItemForCurrentLocation</span><span class="p">];</span>
<span class="n">request</span><span class="p">.</span><span class="n">destination</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span><span class="c1">//...;</span>

<span class="n">MKDirections</span> <span class="o">*</span><span class="n">directions</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKDirections</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithRequest</span><span class="o">:</span><span class="n">request</span><span class="p">];</span>
<span class="p">[</span><span class="n">directions</span> <span class="n">calculateDirectionsWithCompletionHandler</span><span class="o">:^</span><span class="p">(</span><span class="n">MKDirectionsResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;[Error] %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">MKRoute</span> <span class="o">*</span><span class="n">route</span> <span class="o">=</span> <span class="p">[</span><span class="n">response</span><span class="p">.</span><span class="n">routes</span> <span class="n">firstObject</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">MKRouteStep</span> <span class="o">*</span><span class="n">step</span> <span class="k">in</span> <span class="n">route</span><span class="p">.</span><span class="n">steps</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">snapshotter</span> <span class="n">startWithCompletionHandler</span><span class="o">:^</span><span class="p">(</span><span class="n">MKMapSnapshot</span> <span class="o">*</span><span class="n">snapshot</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;[Error] %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="n">snapshot</span><span class="p">.</span><span class="n">image</span><span class="p">;</span>
            <span class="n">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">,</span> <span class="nb">YES</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">scale</span><span class="p">);</span>
            <span class="p">{</span>
                <span class="p">[</span><span class="n">image</span> <span class="n">drawAtPoint</span><span class="o">:</span><span class="n">CGPointMake</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">)];</span>

                <span class="n">CGContextRef</span> <span class="n">c</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
                <span class="n">MKPolylineRenderer</span> <span class="o">*</span><span class="n">polylineRenderer</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKPolylineRenderer</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithPolyline</span><span class="o">:</span><span class="n">step</span><span class="p">.</span><span class="n">polyline</span><span class="p">];</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">polylineRenderer</span><span class="p">.</span><span class="n">path</span><span class="p">)</span> <span class="p">{</span>
                    <span class="p">[</span><span class="n">polylineRenderer</span> <span class="n">applyStrokePropertiesToContext</span><span class="o">:</span><span class="n">c</span> <span class="n">atZoomScale</span><span class="o">:</span><span class="mf">1.0f</span><span class="p">];</span>
                    <span class="n">CGContextAddPath</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">polylineRenderer</span><span class="p">.</span><span class="n">path</span><span class="p">);</span>
                    <span class="n">CGContextStrokePath</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
                <span class="p">}</span>

                <span class="n">CGRect</span> <span class="n">rect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
                <span class="k">for</span> <span class="p">(</span><span class="n">MKMapItem</span> <span class="o">*</span><span class="n">mapItem</span> <span class="k">in</span> <span class="p">@[</span><span class="n">response</span><span class="p">.</span><span class="n">source</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">destination</span><span class="p">])</span> <span class="p">{</span>
                    <span class="n">CGPoint</span> <span class="n">point</span> <span class="o">=</span> <span class="p">[</span><span class="n">snapshot</span> <span class="n">pointForCoordinate</span><span class="o">:</span><span class="n">mapItem</span><span class="p">.</span><span class="n">placemark</span><span class="p">.</span><span class="n">location</span><span class="p">.</span><span class="n">coordinate</span><span class="p">];</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">CGRectContainsPoint</span><span class="p">(</span><span class="n">rect</span><span class="p">,</span> <span class="n">point</span><span class="p">))</span> <span class="p">{</span>
                        <span class="n">MKPinAnnotationView</span> <span class="o">*</span><span class="n">pin</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKPinAnnotationView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithAnnotation</span><span class="o">:</span><span class="nb">nil</span> <span class="n">reuseIdentifier</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span>
                        <span class="n">pin</span><span class="p">.</span><span class="n">pinColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">mapItem</span> <span class="n">isEqual</span><span class="o">:</span><span class="n">response</span><span class="p">.</span><span class="n">source</span><span class="p">]</span> <span class="o">?</span> <span class="n">MKPinAnnotationColorGreen</span> <span class="o">:</span> <span class="n">MKPinAnnotationColorRed</span><span class="p">;</span>

                        <span class="n">point</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">point</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">pin</span><span class="p">.</span><span class="n">centerOffset</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span>
                            <span class="p">(</span><span class="n">pin</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">/</span> <span class="mf">2.0f</span><span class="p">);</span>
                        <span class="n">point</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">point</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">pin</span><span class="p">.</span><span class="n">centerOffset</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span>
                            <span class="p">(</span><span class="n">pin</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">/</span> <span class="mf">2.0f</span><span class="p">);</span>
                        <span class="p">[</span><span class="n">pin</span><span class="p">.</span><span class="n">image</span> <span class="n">drawAtPoint</span><span class="o">:</span><span class="n">point</span><span class="p">];</span>
                    <span class="p">}</span>
                <span class="p">}</span>

                <span class="n">UIImage</span> <span class="o">*</span><span class="n">stepImage</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
                <span class="p">[</span><span class="n">mutableStepImages</span> <span class="n">addObject</span><span class="o">:</span><span class="n">stepImage</span><span class="p">];</span>
            <span class="p">}</span>
            <span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
        <span class="p">}];</span>
    <span class="p">}</span>
<span class="p">}];</span>
</code></pre></div>
<hr>

<p>As the tools used to map the world around us become increasingly sophisticated and ubiquitous, we become ever more capable of uncovering and communicating connections we create between ideas and the spaces they inhabit. With the introduction of several new MapKit APIs, iOS 7 took great strides to expand on what&#39;s possible. Although (perhaps unfairly) overshadowed by the mistakes of the past, MapKit is, and remains an extremely capable framework, worthy of further investigation.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 03 Feb 2014 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:65:"http://nshipster.com/mktileoverlay-mkmapsnapshotter-mkdirections/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:65:"http://nshipster.com/mktileoverlay-mkmapsnapshotter-mkdirections/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:10;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:11:"Stewardship";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:12805:"<p>Open Source communities function within what economists describe as a <a href="http://en.wikipedia.org/wiki/Gift_economy">Gift Economy</a>. Rather than paying one another for goods or services through barter or currency, everyone shares freely with one another, and gains <a href="http://en.wikipedia.org/wiki/Whuffie">social currency</a> based on their generosity. It&#39;s similar to how friends tend to take turns inviting one another over for dinner or a party.</p>

<p>With the negligible cost of distributing software over the Internet, developers are able to participate with millions of others around the world. And as a result, we have been able to collaboratively build amazing software.</p>

<p>In terms of open source participation, releasing code is only one aspect—and arguably not even the most important one. Developing an open source project requires equal parts engineering, product design, communication, and community management. But the true deciding factor for whether an open source project succeeds is stewardship.</p>

<p>Stewardship is an old word. It evokes the ethic of public service and duty. To be a steward is to embody the responsibilities that come with ownership. It is an act that justifies authority through continued accountability; both the greatest challenge and reward of creating and maintaining a project.</p>

<h2>Creating</h2>

<p>It&#39;s not enough to dump a pile of source code somewhere and declare it &quot;open source&quot;. To do so misses the point entirely. The first step of stewardship is to clearly explain the goal and value proposition of the project, and establish clear expectations going forward.</p>

<h3>README</h3>

<p>A README is the most important part of any open source project. It describes why someone would want to use the code, and how they may start to do so.
All good READMEs have the following:</p>

<ul>
<li>A short, one or two sentence introduction that clearly explains what the project is in simple, understandable language.</li>
<li>A section describing the basic usage of the primary tasks of the project. For example, a UI component would provide sample code of how to create, configure, and add itself to a view.</li>
<li>A list of requirements and instructions on how to install the code into one&#39;s own project.</li>
<li>Links to documentation and resources for additional information.</li>
<li>Contact information for the author or current maintainer.</li>
<li>A quick statement about the licensing terms of the project.</li>
</ul>

<h3>LICENSE</h3>

<p>All open source code should be released under an appropriate license. Unless you have a really good reason not to, choose from any of the licenses approved by the <a href="http://opensource.org">Open Source Initiative</a>, like <a href="http://opensource.org/licenses/MIT">MIT</a>, <a href="http://opensource.org/licenses/Apache-2.0">Apache 2.0</a>, or <a href="http://opensource.org/licenses/GPL-3.0">GPL</a>.</p>

<p>If you&#39;re unsure which license to choose, there are <a href="http://choosealicense.com">several</a> <a href="http://www.tldrlegal.com">resources</a> online that you can use to learn more. Most open source Objective-C projects are released under an MIT license, which is known to be compatible with the terms of distribution for the App Store.</p>

<h3>Screenshot</h3>

<p>For projects with any kind of user interface, such as a custom control, view, or animation, posting a screenshot should be considered a requirement.</p>

<p>Buying anything &quot;sight unseen&quot; is a bad idea, and the same goes for consumers of open source. Although there are no monetary costs involved, evaluating a project requires a nontrivial investment in time and energy. A screenshot helps potential consumers decide if your code is worth checking out.</p>

<h3>Demo</h3>

<p>Actions speak louder than words. And no matter how comprehensive a README file is, any open source project can be improved with a working example.</p>

<p>There&#39;s just something about seeing the code in a real context that allows developers to grok what&#39;s going on. It&#39;s also nice to have a starting point for tinkering around.</p>

<p>At the very least, an example can be used to bootstrap the process of fixing bugs or developing new features, both for you and for anyone who wants to contribute. It&#39;s also a great place to incorporate any testing infrastructure for the project.</p>

<h3>Distribution</h3>

<p>One of the great developments in the Objective-C open source community—and in many ways, what has allowed it to flourish as it has recently—is <a href="http://cocoapods.org">CocoaPods</a>.</p>

<p>CocoaPods is the de facto dependency manager for integrating third party code in iOS and Mac OS X projects. At this point, it&#39;s pretty much expected that any library worth using is distributed with a <code>.podspec</code>:</p>

<h4>NSHipsterKit.podspec</h4>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="no">Pod</span><span class="o">::</span><span class="no">Spec</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
  <span class="n">s</span><span class="o">.</span><span class="n">name</span>     <span class="o">=</span> <span class="s1">&#39;NSHipsterKit&#39;</span>
  <span class="n">s</span><span class="o">.</span><span class="n">version</span>  <span class="o">=</span> <span class="s1">&#39;1.0.0&#39;</span>
  <span class="n">s</span><span class="o">.</span><span class="n">license</span>  <span class="o">=</span> <span class="s1">&#39;MIT&#39;</span>
  <span class="n">s</span><span class="o">.</span><span class="n">summary</span>  <span class="o">=</span> <span class="s2">&quot;A pretty obscure library.</span>
<span class="s2">                You&#39;ve probably never heard of it.&quot;</span>
  <span class="n">s</span><span class="o">.</span><span class="n">homepage</span> <span class="o">=</span> <span class="s1">&#39;http://nshipster.com&#39;</span>
  <span class="n">s</span><span class="o">.</span><span class="n">authors</span>  <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;Mattt Thompson&#39;</span> <span class="o">=&gt;</span>
                 <span class="s1">&#39;mattt@nshipster.com&#39;</span> <span class="p">}</span>
  <span class="n">s</span><span class="o">.</span><span class="n">social_media_url</span> <span class="o">=</span> <span class="s2">&quot;https://twitter.com/mattt&quot;</span>
  <span class="n">s</span><span class="o">.</span><span class="n">source</span>   <span class="o">=</span> <span class="p">{</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;https://github.com/nshipster/NSHipsterKit.git&#39;</span><span class="p">,</span> <span class="ss">:tag</span> <span class="o">=&gt;</span> <span class="s1">&#39;1.0.0&#39;</span> <span class="p">}</span>
  <span class="n">s</span><span class="o">.</span><span class="n">source_files</span> <span class="o">=</span> <span class="s1">&#39;NSHipsterKit&#39;</span>
<span class="k">end</span>
</code></pre></div>
<p>Once the <code>.podspec</code> has been submitted to the CocoaPods specs repository, a consumer would be able to add it to their own project with a Podfile:</p>

<h4>Podfile</h4>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="n">platform</span> <span class="ss">:ios</span><span class="p">,</span> <span class="s1">&#39;7.0&#39;</span>
<span class="n">pod</span> <span class="s1">&#39;NSHipsterKit&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.0&#39;</span>
</code></pre></div>
<h2>Maintaining</h2>

<p>Once the initial thrill of releasing a library has passed, the real work begins. The thing to remember is that a flurry of stars, watchers, and tweets may be exciting, but they don&#39;t amount to anything of real importance. Only when users start to come with their questions, issues, and pull requests does code become software.</p>

<h3>Versioning</h3>

<p>Versioning is a contract that library authors make to consumers in how software will be changed over time.</p>

<p>The prevailing convention is <a href="http://semver.org">Semantic Versioning</a>, in which a release has a major, minor, and patch version, with each level signifying particular usage implications.</p>

<ul>
<li>A patch, or bugfix, release changes only implementation, keeping the public API and thus all documentation intact. Consumers should be able to update between patch versions without any change to their own code.</li>
<li>A minor, or point, release changes the public API in non-breaking ways, such as adding a new feature. Again, developers should expect to have consumer code between minor versions work pretty much as expected.</li>
<li>A major release is anything that changes the public API in a backwards-incompatible way. Updating between major versions effectively means migrating consumer code to a new library.</li>
</ul>

<blockquote>
<p>A comprehensive set of guidelines for semantic versioning can be found at <a href="http://semver.org">http://semver.org</a></p>
</blockquote>

<p>By following a few basic rules for versioning, developers are able to set clear expectations for how changes will affect shipping code.</p>

<p>Deviating from these conventions as an author is disrespectful to anyone using the software, so take this responsibility seriously.</p>

<h3>Answering Questions</h3>

<p>One of our greatest flaws as humans is our relative inability to comprehend not knowing  or understanding something that we ourselves do. This makes it extremely difficult to diagnose (and at times empathize with) misunderstandings that someone else might be having.</p>

<p>There&#39;s also a slight sadistic tendency for developers to lord knowledge over anyone who doesn&#39;t know as much as they do. We had to figure it out for ourselves (uphill both ways, in the snow) so why shouldn&#39;t they have to as well?</p>

<p>We must learn how to do better than this. RTFM is a lame answer to any question. It&#39;s also a dead-end to a potential learning experience for yourself.</p>

<p>Rather than disdaining questions, take them as an opportunity to understand what you can do better. Each question is a data point for what could be clarified or improved within your own software and documentation. And one thing to consider: for each person who asks a question, there are dozens of others who don&#39;t and get frustrated and give up. Answering one question on a mailing list or developer forum helps many more people than just the asker.</p>

<h2>Transitioning</h2>

<p>The fate of any successful enterprise is to outgrow its original creators. While this may be a troubling or unwelcome notion, it is nevertheless something that any responsible creator should keep in mind.</p>

<p>If anything, the reminder that all of this is fleeting gives reason to find enjoyment in even the minutia of a preoccupation.</p>

<h3>Recruiting &amp; Delegating</h3>

<p>As a project grows, natural leaders will emerge. If you see someone consistently answering questions in issues or sending pull requests with bug fixes, ask if they would like some more responsibility.</p>

<p>Co-maintainers don&#39;t come pre-baked; individuals must grow into that role. And that role is something that must be defined over time by everyone involved. Avoid drama and hard feelings by communicating honestly and often with collaborators.</p>

<h3>Sunsetting</h3>

<p>All software has a lifecycle. At some point, all things must come to an end. Libraries outgrow their usefulness, or are supplanted by another piece of software, or simply fall out of favor.
In any case, there will come a time when the lights need to be turned off, and it is the responsibility of the maintainer to wrap things up.</p>

<ul>
<li>Announce the ending of the project, offering suggestions for how to migrate to another solution.</li>
<li>Keep the project around, but make a commit that removes source files from the master branch. (Git will keep everything safe in history)</li>
<li>Thank everyone involved for their help and contributions.</li>
</ul>

<p>The alternative is to become a liability, an attractive nuisance... a mockery of what once was a respectable code base.</p>

<hr>

<p>Creating is one of the most fulfilling experiences in life, and it&#39;s something that&#39;s only improved by sharing with others. As software developers, we have a unique opportunity to be unbounded by physical limitations to help one another.</p>

<p>On the occasion that you do have the opportunity to participate in the community, be sure to make the most of it—you&#39;ll be happy you did.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 27 Jan 2014 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:33:"http://nshipster.com/stewardship/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:33:"http://nshipster.com/stewardship/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:11;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:24:"Extended File Attributes";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:11094:"<p>Amidst revelations of widespread spying by the NSA, the concept of metadata has taken an unexpected role in the national conversation about government surveillance. What is it? And how much does it reveal about us and our daily habits? These are questions that the American people are asking, and they deserve an answer.</p>

<p>Acting with a sense of civic and patriotic duty rivaled only by Uncle Sam walloping Communism with a bald eagle, NSHipster aims to shed as much light on metadata as Edward Snowden with an industrial lantern.</p>

<hr>

<p>For every file on a UNIX filesystem, there is associated metadata. Indeed, having a path, permissions, and timestamp attributes is what makes a file a file, rather than just a blob of data.</p>

<p>However, on Mac OS X and iOS, additional metadata can be stored in <a href="http://en.wikipedia.org/wiki/Extended_file_attributes"><strong>extended file attributes</strong></a>. Introduced in Mac OS X 10.4, they are perfect for associating small, application-specific data with a file. EAs are stored in attributes B*-Tree of the HFS+ filesystem, and have a maximum size of 128KB as of Mac OS X 10.7 &amp; iOS 5.</p>

<p>What kind of information, you ask? Invoke the <code>ls</code> command in the terminal and pass the <code>@</code> option to see what information hides in plain sight.</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">$ ls -l@
-rw-r--r--@ 1 mattt  staff  12292 Oct 19 05:59 .DS_Store
    com.apple.FinderInfo       32
-rw-r--r--@ 1 mattt  staff   5147 Dec  3 05:01 NSFixie.h
    com.apple.TextEncoding     15
-rw-r--r--@ 1 mattt  staff   5147 Dec  3 05:04 NSFixie.m
-rw-r--r--@ 1 mattt  staff   1438 Dec 18 14:31 Podfile
    com.macromates.selectionRange        4
    com.macromates.visibleIndex      1
</code></pre></div>
<ul>
<li>Finder stores 32 bytes of information in <code>.DS_Store</code>, though for reasons that aren&#39;t entirely clear.</li>
<li>Xcode takes 15 bytes to denote the TextEncoding to use for a particular file.</li>
<li>TextMate uses extended attributes to preserve the cursor position between launches.</li>
</ul>

<p>The extended attributes API, declared in <code>&lt;sys/xattr.h&gt;</code>, has functions for getting, setting, listing, and removing attributes:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="kt">ssize_t</span> <span class="nf">getxattr</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">path</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">value</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">u_int32_t</span> <span class="n">position</span><span class="p">,</span> <span class="kt">int</span> <span class="n">options</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">setxattr</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">path</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">value</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">u_int32_t</span> <span class="n">position</span><span class="p">,</span> <span class="kt">int</span> <span class="n">options</span><span class="p">);</span>
<span class="kt">ssize_t</span> <span class="nf">listxattr</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">path</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">namebuf</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">options</span><span class="p">);</span>
<span class="kt">int</span> <span class="nf">removexattr</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">path</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="kt">int</span> <span class="n">options</span><span class="p">);</span>
</code></pre></div>
<p>To show these in action, consider the use of extended attributes to associate an <a href="http://en.wikipedia.org/wiki/HTTP_ETag">HTTP Etag</a> for a file:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSHTTPURLResponse</span> <span class="o">*</span><span class="n">response</span> <span class="o">=</span> <span class="p">...;</span>
<span class="n">NSURL</span> <span class="o">*</span><span class="n">fileURL</span> <span class="o">=</span> <span class="p">...;</span>

<span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filePath</span> <span class="o">=</span> <span class="p">[</span><span class="n">fileURL</span> <span class="n">fileSystemRepresentation</span><span class="p">];</span>
<span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;com.Example.Etag&quot;</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="p">[[</span><span class="n">response</span> <span class="n">allHeaderFields</span><span class="p">][</span><span class="s">@&quot;Etag&quot;</span><span class="p">]</span> <span class="n">UTF8String</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">setxattr</span><span class="p">(</span><span class="n">filePath</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">value</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</code></pre></div>
<p>As another example, previous to iOS 5.0.1, EAs were the designated way to denote that a particular file should not be synchronized with iCloud (as of iOS 5.1, <code>NSURL -setResourceValue:forKey:error:</code> is used, which sets the <code>com.apple.metadata:com_apple_backup_excludeItem</code> EA instead):</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#include &lt;sys/xattr.h&gt;</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!&amp;</span><span class="n">NSURLIsExcludedFromBackupKey</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// iOS &lt;= 5.0.1</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filePath</span> <span class="o">=</span> <span class="p">[[</span><span class="n">URL</span> <span class="n">path</span><span class="p">]</span> <span class="n">fileSystemRepresentation</span><span class="p">];</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;com.apple.MobileBackup&quot;</span><span class="p">;</span>
    <span class="kt">u_int8_t</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">setxattr</span><span class="p">(</span><span class="n">filePath</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">value</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="c1">// iOS &gt;= 5.1</span>
    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
    <span class="p">[</span><span class="n">URL</span> <span class="n">setResourceValue</span><span class="o">:</span><span class="nb">@YES</span>
                   <span class="nl">forKey:</span><span class="n">NSURLIsExcludedFromBackupKey</span>
                    <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>Lest extended attributes veer dangerously close to &quot;being a hammer that makes everything look like a nail&quot;, let it be made clear: <strong>extended attributes should not be used for critical data</strong>. Not all volume formats support extended attributes, so copying between, say, HFS+ and FAT32 may result in a loss of information. Also consider that nothing is stopping from any application from deleting or overwriting extended attributes at any time.</p>

<p>For things like author, file history, window or cursor position, and networking metadata, extended attributes are a great choice. If you&#39;ve been struggling to synchronize file state, it may be exactly the solution you&#39;ve been looking for. Just be mindful about EAs limitations and understand why they would or would not be appropriate for a particular use case.</p>

<hr>

<p>Between domestic wiretapping, the botched launch of <a href="https://www.healthcare.gov">healthcare.gov</a>, various stories of retailers leaking customer information, and untold volumes of snark on social networks, our culture has taken a profound shift in its relationship to computers. The average person is more technically savvy, but also harbors a newfound suspicion and mistrust of technology.</p>

<p>Knowing the relationship between data, metadata, and the entities that interact with both offer the best chance at understanding and adapting to whatever the future holds. As programmers, we are the arbiters of digital reality for ourselves and others; it is our responsibility to act in good faith and good conscience. Taking this responsibility seriously is more important than ever before. However this manifests itself in your occupation, take care in what you do.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 20 Jan 2014 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:46:"http://nshipster.com/extended-file-attributes/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:46:"http://nshipster.com/extended-file-attributes/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:12;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:7:"NSRange";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:24057:"<p><code>NSRange</code> is one of the essential types of Foundation. Passed around and returned in methods throughout the framework, being well-versed in this struct has a range of benefits, which this week&#39;s article will help you locate.</p>

<hr>

<p>Ranges are data types used to describe a contiguous interval of integers. They are most commonly used with strings, arrays, and similarly-ordered collections.</p>

<p>For Objective-C programs, the Foundation type <code>NSRange</code> is used. In other languages, ranges are often encoded as a two-element array, containing the start and end indexes. In Foundation, <code>NSRange</code> instead encodes a range as struct containing the location and length. By command-clicking (<code>⌘-ʘ</code>) on the <code>NSRange</code> symbol in Xcode, we can jump directly to its declaration in <code>Foundation/NSRange.h</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_NSRange</span> <span class="p">{</span>
    <span class="n">NSUInteger</span> <span class="n">location</span><span class="p">;</span>
    <span class="n">NSUInteger</span> <span class="n">length</span><span class="p">;</span>
<span class="p">}</span> <span class="n">NSRange</span><span class="p">;</span>
</code></pre></div>
<p>In practice, this approach helps mitigate common off-by-one errors when working with ranges. For example, compare the equivalent Javascript and Objective-C code for creating a range of characters for a given string:</p>

<h4>range.js</h4>
<div class="highlight"><pre><code class="javascript language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">string</span> <span class="o">=</span> <span class="s2">&quot;hello, world&quot;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">range</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="nx">string</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</code></pre></div>
<p>Forgetting to subtract <code>1</code> for the end index in Javascript would result in an out-of-bounds error later.</p>

<h4>range.m</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="s">@&quot;hello, world&quot;</span><span class="p">;</span>
<span class="n">NSRange</span> <span class="n">range</span> <span class="o">=</span> <span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">string</span> <span class="n">length</span><span class="p">]);</span>
</code></pre></div>
<p><code>NSRange</code>&#39;s approach is clearer and less prone to error—especially when it comes to more complex arithmetic operations on ranges.</p>

<h2>Usage</h2>

<h3>Strings</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="s">@&quot;lorem ipsum dolor sit amet&quot;</span><span class="p">;</span>
<span class="n">NSRange</span> <span class="n">range</span> <span class="o">=</span> <span class="p">[</span><span class="n">string</span> <span class="n">rangeOfString</span><span class="o">:</span><span class="s">@&quot;ipsum&quot;</span><span class="p">];</span>
<span class="c1">// {.location=6, .length=5}</span>

<span class="n">NSString</span> <span class="o">*</span><span class="n">substring</span> <span class="o">=</span> <span class="p">[</span><span class="n">string</span> <span class="n">substringWithRange</span><span class="o">:</span><span class="n">range</span><span class="p">];</span>
<span class="c1">// @&quot;ipsum&quot;</span>
</code></pre></div>
<p><code>NSString</code> does not have a method like <code>containsString:</code>. Instead, <code>rangeOfString:</code> can be used to check for an <code>NSNotFound</code> location value:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">input</span> <span class="o">=</span> <span class="p">...;</span>
<span class="k">if</span> <span class="p">([</span><span class="n">input</span> <span class="n">rangeOfString</span><span class="o">:</span><span class="s">@&quot;keyword&quot;</span><span class="p">].</span><span class="n">location</span> <span class="o">!=</span> <span class="n">NSNotFound</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div>
<h3>Arrays</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSArray</span> <span class="o">*</span><span class="n">array</span> <span class="o">=</span> <span class="p">@[</span><span class="s">@&quot;a&quot;</span><span class="p">,</span> <span class="s">@&quot;b&quot;</span><span class="p">,</span> <span class="s">@&quot;c&quot;</span><span class="p">,</span> <span class="s">@&quot;d&quot;</span><span class="p">];</span>
<span class="n">NSArray</span> <span class="o">*</span><span class="n">subarray</span> <span class="o">=</span> <span class="p">[</span><span class="n">array</span> <span class="n">subarrayWithRange</span><span class="o">:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)];</span>
<span class="c1">// @[@&quot;b&quot;, @&quot;c&quot;]</span>
</code></pre></div>
<h3>Index Sets</h3>

<p><a href="http://nshipster.com/nsindexset/">NSIndexSet</a> is a Foundation collection class that is similar to <code>NSRange</code>, with the notable exception of being able to support non-contiguous series. An <code>NSIndexSet</code> can be created from a range using the <code>indexSetWithIndexesInRange:</code> class constructor:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSRange</span> <span class="n">range</span> <span class="o">=</span> <span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
<span class="n">NSIndexSet</span> <span class="o">*</span><span class="n">indexSet</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSIndexSet</span> <span class="n">indexSetWithIndexesInRange</span><span class="o">:</span><span class="n">range</span><span class="p">];</span>
</code></pre></div>
<h2>Functions</h2>

<p>Because <code>NSRange</code> is not a class, creating and using instances is done through function calls, rather than, say, instance methods.</p>

<blockquote>
<p>Many of the NSRange functions are named counter to the modern conventions of Foundation and CoreFoundation wherein the relevant type of the function immediately follows the two-letter namespace. For example, <code>NSMakeRange</code> should instead be named <code>NSRangeMake</code>, following the example of <code>CGRectMake</code> and <code>CGSizeMake</code>,  et al. Similarly,  a better name for <code>NSEqualRanges</code> would be <code>NSRangeEqualToRange</code>, just like <code>CGPointEqualToPoint</code>.</p>

<p>Although consistency in itself is likely not sufficient reason to go through the trouble of replacing existing usage, <a href="https://gist.github.com/mattt/8402537">this gist</a> shows how one could make their own code base a little more OCD-friendly.</p>
</blockquote>

<h3>Creating an NSRange</h3>

<blockquote>
<ul>
<li><code>NSMakeRange</code>:  Creates a new NSRange from the specified values.</li>
</ul>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSArray</span> <span class="o">*</span><span class="n">array</span> <span class="o">=</span> <span class="p">@[</span><span class="mi">@1</span><span class="p">,</span> <span class="mi">@2</span><span class="p">,</span> <span class="mi">@3</span><span class="p">];</span>
<span class="n">NSRange</span> <span class="n">range</span> <span class="o">=</span> <span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">array</span> <span class="n">count</span><span class="p">]);</span>
<span class="c1">// {.location=0, .length=3}</span>
</code></pre></div>
<h3>Querying Information</h3>

<blockquote>
<ul>
<li><code>NSEqualRanges</code>: Returns a Boolean value that indicates whether two given ranges are equal.</li>
</ul>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSRange</span> <span class="n">range1</span> <span class="o">=</span> <span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
<span class="n">NSRange</span> <span class="n">range2</span> <span class="o">=</span> <span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
<span class="kt">BOOL</span> <span class="n">equal</span> <span class="o">=</span> <span class="n">NSEqualRanges</span><span class="p">(</span><span class="n">range1</span><span class="p">,</span> <span class="n">range2</span><span class="p">);</span> <span class="c1">// NO</span>
</code></pre></div>
<blockquote>
<ul>
<li><code>NSLocationInRange</code>:  Returns a Boolean value that indicates whether a specified position is in a given range.</li>
</ul>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSRange</span> <span class="n">range</span> <span class="o">=</span> <span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
<span class="kt">BOOL</span> <span class="n">contained</span> <span class="o">=</span> <span class="n">NSLocationInRange</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">range</span><span class="p">);</span> <span class="c1">// YES</span>
</code></pre></div>
<blockquote>
<ul>
<li><code>NSMaxRange</code>: Returns the sum of the location and length of the range.</li>
</ul>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSRange</span> <span class="n">range</span> <span class="o">=</span> <span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
<span class="n">NSUInteger</span> <span class="n">max</span> <span class="o">=</span> <span class="n">NSMaxRange</span><span class="p">(</span><span class="n">range</span><span class="p">);</span> <span class="c1">// 7</span>
</code></pre></div>
<h3>Set Operations</h3>

<blockquote>
<ul>
<li><code>NSIntersectionRange</code>: Returns the intersection of the specified ranges. If the returned range’s length field is <code>0</code>, then the two ranges don’t intersect, and the value of the location field is undefined.</li>
</ul>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSRange</span> <span class="n">range1</span> <span class="o">=</span> <span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
<span class="n">NSRange</span> <span class="n">range2</span> <span class="o">=</span> <span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
<span class="n">NSRange</span> <span class="n">intersectionRange</span> <span class="o">=</span> <span class="n">NSIntersectionRange</span><span class="p">(</span><span class="n">range1</span><span class="p">,</span> <span class="n">range2</span><span class="p">);</span>
<span class="c1">// {.location=2, .length=4}</span>
</code></pre></div>
<blockquote>
<ul>
<li><code>NSUnionRange</code>: Returns the union of the specified ranges. A range covering all indices in and between range1 and range2. If one range is completely contained in the other, the returned range is equal to the larger range.</li>
</ul>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSRange</span> <span class="n">range1</span> <span class="o">=</span> <span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
<span class="n">NSRange</span> <span class="n">range2</span> <span class="o">=</span> <span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
<span class="n">NSRange</span> <span class="n">unionRange</span> <span class="o">=</span> <span class="n">NSUnionRange</span><span class="p">(</span><span class="n">range1</span><span class="p">,</span> <span class="n">range2</span><span class="p">);</span>
<span class="c1">// {.location=0, .length=9}</span>
</code></pre></div>
<h3>Converting Between NSString * &amp; NSRange</h3>

<blockquote>
<ul>
<li><code>NSStringFromRange</code>: Returns a string representation of a range.</li>
</ul>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSRange</span> <span class="n">range</span> <span class="o">=</span> <span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="n">NSStringFromRange</span><span class="p">(</span><span class="n">range</span><span class="p">);</span> <span class="c1">// @&quot;{3,4}&quot;</span>
</code></pre></div>
<blockquote>
<ul>
<li><code>NSRangeFromString</code>: Returns a range from a textual representation.</li>
</ul>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="s">@&quot;{1,5}&quot;</span><span class="p">;</span>
<span class="n">NSRange</span> <span class="n">range</span> <span class="o">=</span> <span class="n">NSRangeFromString</span><span class="p">(</span><span class="n">string</span><span class="p">);</span>
<span class="c1">// {.location=1, .length=5}</span>
</code></pre></div>
<p>If the string passed into <code>NSRangeFromString</code> does not represent a valid range, it will return a range with its location and length set to <code>0</code>.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="s">@&quot;invalid&quot;</span><span class="p">;</span>
<span class="n">NSRange</span> <span class="n">range</span> <span class="o">=</span> <span class="n">NSRangeFromString</span><span class="p">(</span><span class="n">string</span><span class="p">);</span>
<span class="c1">// {.location=0, .length=0}</span>
</code></pre></div>
<p>While one might be tempted to use <code>NSStringFromRange</code> to box <code>NSRange</code> for inclusion within an <code>NSArray</code>, <code>NSValue +valueWithRange:</code> is the way to go:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSRange</span> <span class="n">range</span> <span class="o">=</span> <span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="n">NSValue</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSValue</span> <span class="n">valueWithRange</span><span class="o">:</span><span class="n">range</span><span class="p">];</span>
</code></pre></div>
<hr>

<p><code>NSRange</code> is one of the few cases where some of the underlying implementation of its functions are actually exposed and inlined in the public headers:</p>

<h4>Foundation/NSRange.h</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NS_INLINE</span> <span class="n">NSRange</span> <span class="nf">NSMakeRange</span><span class="p">(</span><span class="n">NSUInteger</span> <span class="n">loc</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">NSRange</span> <span class="n">r</span><span class="p">;</span>
    <span class="n">r</span><span class="p">.</span><span class="n">location</span> <span class="o">=</span> <span class="n">loc</span><span class="p">;</span>
    <span class="n">r</span><span class="p">.</span><span class="n">length</span> <span class="o">=</span> <span class="n">len</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">NS_INLINE</span> <span class="n">NSUInteger</span> <span class="nf">NSMaxRange</span><span class="p">(</span><span class="n">NSRange</span> <span class="n">range</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">range</span><span class="p">.</span><span class="n">location</span> <span class="o">+</span> <span class="n">range</span><span class="p">.</span><span class="n">length</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">NS_INLINE</span> <span class="kt">BOOL</span> <span class="nf">NSLocationInRange</span><span class="p">(</span><span class="n">NSUInteger</span> <span class="n">loc</span><span class="p">,</span> <span class="n">NSRange</span> <span class="n">range</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">loc</span> <span class="o">&lt;</span> <span class="n">range</span><span class="p">.</span><span class="n">location</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">loc</span> <span class="o">-</span> <span class="n">range</span><span class="p">.</span><span class="n">location</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">range</span><span class="p">.</span><span class="n">length</span><span class="p">)</span> <span class="o">?</span> <span class="nb">YES</span> <span class="o">:</span> <span class="nb">NO</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">NS_INLINE</span> <span class="kt">BOOL</span> <span class="nf">NSEqualRanges</span><span class="p">(</span><span class="n">NSRange</span> <span class="n">range1</span><span class="p">,</span> <span class="n">NSRange</span> <span class="n">range2</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">range1</span><span class="p">.</span><span class="n">location</span> <span class="o">==</span> <span class="n">range2</span><span class="p">.</span><span class="n">location</span> <span class="o">&amp;&amp;</span> <span class="n">range1</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="n">range2</span><span class="p">.</span><span class="n">length</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<h2>NSRangePointer</h2>

<p>One oddity worth mentioning with <code>NSRange</code> is the existence of <code>NSRangePointer</code>. &quot;What the what?&quot;, you might exclaim in panicked confusion. Jumping to the source confirms our darkest fears:</p>

<h4>Foundation/NSRange.h</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">typedef</span> <span class="n">NSRange</span> <span class="o">*</span><span class="n">NSRangePointer</span><span class="p">;</span>
</code></pre></div>
<p>So. Without a definitive origin story, one would have to assume that this type was created by a well-meaning framework engineer who noted the confusion around <code>NSRange</code> being a struct and not a class. <code>NSRange *</code> is equivalent to <code>NSRangePointer</code>, though the latter can be found in out parameters for various methods throughout Foundation. <code>NSAttributedString</code>, for instance, has an <code>NSRangePointer</code> parameter for returning the effective range of an attribute at a particular index (since the attribute likely starts and ends before outside of the specified index):</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSMutableAttributedString</span> <span class="o">*</span><span class="n">mutableAttributedString</span> <span class="o">=</span> <span class="p">...;</span>
<span class="n">NSRange</span> <span class="n">range</span><span class="p">;</span>
<span class="k">if</span> <span class="p">([</span><span class="n">mutableAttributedString</span> <span class="n">attribute</span><span class="o">:</span><span class="n">NSUnderlineStyleAttributeName</span>
                               <span class="nl">atIndex:</span><span class="mi">0</span>
                        <span class="nl">effectiveRange:</span><span class="o">&amp;</span><span class="n">range</span><span class="p">])</span>
<span class="p">{</span>
    <span class="c1">// Make underlined text blue as well</span>
    <span class="p">[</span><span class="n">mutableAttributedString</span> <span class="n">addAttribute</span><span class="o">:</span><span class="n">NSForegroundColorAttributeName</span>
                                    <span class="nl">value:</span><span class="p">[</span><span class="n">UIColor</span> <span class="n">blueColor</span><span class="p">]</span>
                                    <span class="nl">range:</span><span class="n">range</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<h2>CFRange</h2>

<p>One final caveat: Core Foundation also defines a <code>CFRange</code> type, which differs from <code>NSRange</code> in using <code>CFIndex</code> types for its members, and having only the function <code>CFRangeMake</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
    <span class="n">CFIndex</span> <span class="n">location</span><span class="p">;</span>
    <span class="n">CFIndex</span> <span class="n">length</span><span class="p">;</span>
<span class="p">}</span> <span class="n">CFRange</span><span class="p">;</span>
</code></pre></div>
<p>Anyone working with CoreText or another low-level C API is likely to encounter <code>CFRange</code> in place of <code>NSRange</code>.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 13 Jan 2014 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:29:"http://nshipster.com/nsrange/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:29:"http://nshipster.com/nsrange/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:13;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:8:"Colophon";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:16913:"<p>As a way to kick off this new year, I thought it&#39;d be fun to share some insights of just how NSHipster is made. This article covers both the website and the recently-released NSHipster book, so if you&#39;ve wondered about the nitty gritty of digital or physical publishing, this article is for you.</p>

<hr>

<h2>Website</h2>

<p>I created NSHipster in July of 2012 in an attempt to form a lasting writing habit. I committed to putting out a new article each week, and (for the most part) I&#39;ve been able to stick to that. Having a consistent deadline keeps me motivated and accountable for writing something every week.</p>

<p>Here&#39;s the routine: on Monday mornings I wake up at 5AM, grab a bottle of Ito En tea, and get to work. Knowing that I <em>need</em> to get something out then and there allows me to stay focused on the task at hand.</p>

<h3>Organization: Things.app</h3>

<p>The first step is to figure out what to write about. I have a list of potential topics stashed away in <a href="http://culturedcode.com/things/">Things.app</a>, compiled from random ideas I get while programming, or while reading through Twitter.</p>

<p>With a topic in hand, then next step is to find as many relevant articles around the web as I can. Apple&#39;s documentation and guides serve as an outline of topics to discuss, while Stack Overflow questions serve as data points for where any confusion may lie. Any blog posts that come up in search also help to highlight any interesting tidbits or tricks.</p>

<blockquote>
<p>And every so often, I&#39;ll find that <a href="https://www.mikeash.com/pyblog/">Mike Ash has already written the definitive blog post</a> on the subject, in which case I go back and find a new topic.</p>
</blockquote>

<h3>Writing: TextMate &amp; Markdown</h3>

<p>After an hour or so of research on the web and experimentation in Xcode, I&#39;ll have a basic outline, along with a handful of code samples for the article. At this point, I have enough to go on for a first draft—and more importantly, have sufficiently warmed up my writing muscles, so that the words flow a little more easily.</p>

<p>Everything is written in <a href="http://en.wikipedia.org/wiki/Markdown">Markdown</a>, allowing me to focus on the content. My non-Xcode editor-of-choice is <a href="http://macromates.com">TextMate</a>, as it has been for nearly a decade.</p>

<p>With dozens of articles under my belt at this point, I&#39;m able to write comfortably in the familiar voice that you&#39;ve come to expect from NSHipster. Most articles start with a philosophical interlude, or some background to provide a broader context for that week&#39;s topic. What follows is a top-level description of the class, method, function, project, or language feature being discussed, describing what it is, how it works, and why it&#39;s cool and significant. Each section follows in a similar fashion, using code samples, figures, and tables to explain each concept. Finally, the conclusion aims to wrap up any concepts introduced in the beginning, and motivate the reader to use what they&#39;ve learned in their own work.</p>

<h3>Editing: Marked.app</h3>

<p>Once I&#39;ve gotten most of the first draft finished, I&#39;ll throw the markdown file into <a href="http://markedapp.com">Marked</a> to get a sense of the final document as it will read on the site. With all of the formatting in place, I&#39;m able to get a better idea of the actual length and flow of the document. The readability tools and Mac OS X&#39;s built-in grammar and spell check act as a first-pass for typos.</p>

<h3>Generating: Jekyll &amp; Compass</h3>

<p><a href="http://jekyllrb.com">Jekyll</a> is what brings all of the content together to generate the final HTML of the site. The <a href="https://github.com/NSHipster/nshipster.com">source code for the site</a> has evolved gradually over time to incorporate things like <a href="http://nshipster.com/feed.xml">RSS</a>, syndication on <a href="https://twitter.com/nshipster">Twitter</a>, Facebook, and <a href="https://plus.google.com/+MatttThompson">Google+</a>, and full-text search, as well as other best practices.</p>

<p>For CSS, I use <a href="http://en.wikipedia.org/wiki/Sass_%28stylesheet_language%29">Sass</a> &amp; <a href="http://compass-style.org">Compass</a>. Once you get used to Sass, there&#39;s just no going back to doing CSS by hand. The site itself is long overdue for a re-align, so look forward to that at some point.</p>

<h3>Hosting: Amazon S3</h3>

<p>I recently switched hosting over from <a href="http://heroku.com">Heroku</a> to <a href="http://aws.amazon.com/s3/">Amazon S3</a>. As much as I miss ease and simplicity of Heroku&#39;s git-based deployment, S3 can serve static websites much more quickly and inexpensively. Hosting in the <code>us-west-2</code> (Oregon) region also lends some extra hipster cred, with its relative proximity to Portlandia.</p>

<p>I use the <code>ALIAS</code> feature of <a href="https://dnsimple.com">DNSimple</a> to host the site at the Apex domain <code>nshipster.com</code>, rather than a <code>CNAME</code> like <code>www.nshipster.com</code>. Everything about DNSimple has been a dream; I whole-heartedly recommend them for as a DNS registrar and nameserver provider.</p>

<h3>Deploying: s3cmd &amp; Transmit.app</h3>

<p>Switching over from Heroku also meant coming up with a deployment script. Fortunately, <a href="http://s3tools.org/s3cmd">s3cmd</a> makes it easy to synchronize files from the Jekyll <code>_site</code> build folder to my static hosting bucket. (If anything goes wrong during deployment, or I need to quickly futz around with something in S3 directly, <a href="http://panic.com/transmit/">Transmit</a> is my go-to tool).</p>

<p>Before sending everything up to S3, I run <a href="http://tidy.sourceforge.net">HTML Tidy</a> (with a <a href="https://github.com/NSHipster/nshipster.com/blob/master/tidy.conf">highly-customized config file</a> to accomodate HTML5), and run my HTML and XML (sitemap &amp; RSS feed) through <a href="http://en.wikipedia.org/wiki/Gzip"><code>gzip</code></a>. By setting the <code>&#39;Content-Encoding: gzip&#39;</code> header on S3, compressed assets can be served directly, which <em>dramatically</em> reduces the size (and therefore transfer time) for files.</p>

<p>All together, the deploy script looks something like this:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">    jekyll build --config _config.en.yml
    find _site/ -iname &quot;*.html&quot;
        -exec tidy -config tidy.conf {} +
    find _site/ -iname &#39;*.html&#39;
        -exec gzip -n --best {} +
    find _site/ -iname &#39;*.xml&#39;
        -exec gzip -n --best {} +

    for f in `find _site/ -iname &#39;*.gz&#39;`; do
      mv $f ${f%.gz}
    done

    s3cmd sync --progress -M --acl-public
        --add-header &#39;Content-Encoding:gzip&#39;
        --exclude &#39;*.*&#39;
        --include &#39;*.html&#39; --include &#39;*.xml&#39;
        --verbose
        _site/ s3://nshipster.com/
</code></pre></div>
<h3>Collaboration: GitHub</h3>

<p>Using a static site generator like Jekyll has the additional benefit of tracking changes of documents over time with <a href="http://git-scm.com">git</a>. If someone finds an issue with an article, or has a correction to make, they can <a href="https://github.com/NSHipster/articles/issues">open a Pull Request</a>.</p>

<p>And since all of the content is licensed under a <a href="http://creativecommons.org/licenses/by-nc/3.0/">Creative Commons BY-NC License</a>, anyone is welcome to translate the source material into another language.</p>

<h3>Internationalization: <a href="http://nshipster.cn">NSHipster.cn</a></h3>

<p>Speaking of translation—over the last couple months, I&#39;ve been working with translators to make NSHipster more accessible to Chinese-speaking audiences. It&#39;s still a work in progress, but I&#39;m excited to give you <a href="http://nshipster.cn">a sneak peak at what we have so far: NSHipster.cn</a>.</p>

<hr>

<h2>Book</h2>

<p>Which brings us to the book. <a href="https://gumroad.com/l/nshipster">NSHipster: Obscure Topics in Cocoa &amp; Objective-C</a> is the culmination of all of my efforts so far with NSHipster. It combines articles from the site, along with new articles to create an essential resource for any aspiring iOS or Mac OS X developer.</p>

<p>I&#39;ll admit: I had no idea what I was getting myself into when I started. Turns out, writing and publishing a book is quite a bit different from a website. Working in the insulated, digital world of technology allows us to momentarily forget about most of the sharp edges of the real world. The process of writing the book was nothing if not a reality check.</p>

<h3>Editing &amp; Layout: Pages.app</h3>

<p>I&#39;m not proud of my process in creating the book. It was a long, manual slog using kludgy tools without much of a clue about what I was doing at any step in the process.</p>

<p>At first, I thought it would be pretty straightforward: run the site&#39;s articles through <a href="http://johnmacfarlane.net/pandoc/">Pandoc</a> and call it a day.</p>

<p>Nope.</p>

<p>After sinking at least 10 hours into hacking and tweaking every step of the process, I just wasn&#39;t able to produce anything that I could be proud of. Whether this is the fault of the tooling, or my inability to use it correctly, I can&#39;t help but conclude from my experiences that stylesheets just don&#39;t cut it when it comes to books: each page spread must be designed individually.</p>

<p>With this in mind, I turned to <a href="http://www.adobe.com/products/indesign.html">InDesign</a>. After an hour or two of fiddling with content tools and templates, I threw in the towel and decided to just use <a href="https://itunes.apple.com/us/app/pages/id409201541?mt=12">Pages</a>.</p>

<p>Yes, Pages. Seriously.</p>

<p>I even specifically upgraded to the latest iWork &#39;13 version, which turned out to be even less capable than its predecessor.</p>

<p>What started as a command-line driven process became 40 hours of getting to know this WYSIWYG editor. To its credit, WYSIWYG can actually be a really nice way to design content, as it allows for copy-editing decisions to be made in a tight loop with its implications on layout. This was especially useful when it came to placing <a href="http://www.conorheelan.com">Conor Heelan&#39;s</a> delightful animal illustrations.</p>

<p>Using Pages, I was able to generate the PDF that is available online, as well as the source document for the physical book. Even now, I&#39;m still at a loss for what would have been a better solution.</p>

<h3>Electronic Publishing: Gumroad</h3>

<p>Of all of the options for selling and distributing online goods, <a href="https://gumroad.com">Gumroad</a> is the best. In just a few minutes, I was able to put together <a href="https://gumroad.com/l/nshipster">an attractive listing</a>, with options for pre-sale and physical book add-ons.</p>

<p>Gumroad&#39;s dashboard analytics and tools provide an attractive view of sales, which was exciting to watch in real-time when I first hit publish. The small cut they take on each sale to host and handle payment (including international and state sales tax) was well worth it. I&#39;ll definitely be working with Gumroad again for my next project.</p>

<h3>Physical Publishing &amp; Fulfillment: CreateSpace</h3>

<p>The good news: it&#39;s never been easier to self-publish a book.<br/>
The bad news: parts of it are still a pain in the ass.</p>

<p>Here&#39;s how I did it:</p>

<ol>
<li><strong>Create an account with <a href="https://www.createspace.com">CreateSpace</a></strong>. As I understand it, Amazon effectively cornered the market of <a href="http://en.wikipedia.org/wiki/Print_on_demand">Print on Demand</a> by acquiring this company and buying all of the book printers it could find.</li>
<li><strong>Create a new title</strong>. In this case, it was a trade paperback book (6&quot; × 9&quot;).</li>
<li><strong>Purchase ISBNs from <a href="https://www.myidentifiers.com">Bowker</a></strong>. Since a unique <a href="http://en.wikipedia.org/wiki/International_Standard_Book_Number">ISBN</a> is required for each retail distribution—including one for each digital format (PDF, epub, Kindle Mobi, iBooks)—I bought a 10 pack. (Don&#39;t bother buying a barcode, those can be easily generated for free elsewhere)</li>
<li><strong>Create the cover and internal content</strong>. CreateSpace has some pretty decent tools for proofing content. They were able to find issues with margin and bleed before sending out for a physical proof.</li>
<li><strong>Behold your book, <a href="http://amzn.to/1cZBq78">now available for sale on Amazon</a></strong>. It&#39;s an incredible feeling, <a href="http://nshipster.s3.amazonaws.com/nshipster-books-box.jpg">holding something you&#39;ve created in your hands</a>. This alone made everything worth it. CreateSpace offers impressive wholesale price for a physical book (between $10–15 for printing a book and shipping domestically or internationally)</li>
</ol>

<p>Here&#39;s where I messed up:</p>

<p>Because I did a pre-order for physical books through Gumroad, it was up to me to translate those into wholesale orders from CreateSpace. Unfortunately, CreateSpace had no mechanism for bulk ordering online, and their support staff were unable to process that themselves. Their recommendation: go through the checkout process manually for each of the 1000+ orders.</p>

<p>Yikes.</p>

<p>Fortunately, this was the one part of the book writing process I <em>was</em> able to automate. Using <a href="http://mechanize.rubyforge.org">Mechanize</a>, I was able to write a Ruby script to go through each order, one-by-one, and manually create an order for each. Because the user input wasn&#39;t 100% correctly formatted, I had to keep watch over the script as it ran, ready to fix any errors as they came up. <strong>The process took the better part of two days</strong>. I&#39;ll try to get that cleaned up and packaged into a proper Ruby library soon.</p>

<p>Some other fun facts:</p>

<ul>
<li>I ran into the outgoing SMTP limit for my Gmail account, forcing me to create and send from several email aliases.</li>
<li>I used Numbers.app to clean up the <code>.csv</code> file provided by Gumroad, but because of its <em>delightful</em> insistence on automatically formatting postal codes as numbers, anything with a leading zero got screwed up. NSHipsters in Massachusetts: I love you, but you were the bane of my existence for an afternoon.</li>
<li>For a while, each error would silently create an order sent to my house. That was the first time a bug has so directly translated into a monetary cost for me. For fun, I added an <code>afplay cha-ching.aiff</code> after each order from that moment on.</li>
<li>At some point, the script started to fail silently because an order to the Ukraine triggered a fraud warning for my American Express card. Thanks to their amazing customer support, I was able to get everything running smoothly within 5 minutes.</li>
</ul>

<h3>Inspiration</h3>

<p>So why did I write the book, anyway? There are 3 primary reasons:</p>

<ul>
<li><strong>To Craft a Structured Narrative</strong>: NSHipster.com has built up its archive week-by-week, and is likewise organized by its particular chronology. And though articles are organized by topic in a long footer, it can be difficult for new readers to know where to start. A book allows for a linear narrative structure in a way that a blog simply cannot. A great deal of care was put into structuring the content in the book according to a logical progression, such that one could read from start to finish. There are also a number of articles that are exclusive to the book, dealing primarily with the cultural and emotional aspects of coding.</li>
<li><strong>To Provide Something Tangible</strong>: It&#39;s been amazing to see how much readers have related to NSHipster. A tangible object like a book offers a tangible <em>something</em> that you can be proud of and cherish. It also creates a tangible means of supporting the site, in the same way that one might for a favorite  <a href="http://www.kcrw.com">public radio station</a>, <a href="http://maximumfun.org">podcast</a>, or <a href="https://dribbble.com/account/pro">website</a>.</li>
<li><strong>To Change My Life</strong>: Last week, on New Year&#39;s Eve, I married the most amazing person I&#39;ve ever met. Thanks to your generous support, she and I are able to start our lives together comfortably, with something set aside for a house downpayment in the future (as well as a lovely honeymoon in Hawaii; I get back later this week). I can&#39;t begin to express my gratitude for all of the blessings I&#39;ve had in my work. Thank you.</li>
</ul>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 06 Jan 2014 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:30:"http://nshipster.com/colophon/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:30:"http://nshipster.com/colophon/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:14;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:52:"Reader Submissions -&lt;br/&gt; New Year&#039;s 2014";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:25735:"<p>As we prepare to increment our <code>NSDateComponents -year</code> by <code>1</code>, it&#39;s time once again for NSHipster end-of-the-year Reader Submissions! <a href="https://gist.github.com/mattt/4148342">Last year</a>, we got some <a href="http://nshipster.com/reader-submissions-new-years-2013/">mind-blowing tips and tricks</a>. With the release of iOS 7 &amp; Mavericks, and a year&#39;s worth of new developments in the Objective-C ecosystem, there was a ton of new stuff to write about.</p>

<p>Thanks to <a href="https://github.com/acoomans">Arnaud Coomans</a>, <a href="https://github.com/0xced">Cédric Luthi</a>, <a href="https://github.com/dbgrandi">David Grandinetti</a>, <a href="https://github.com/ellneal">Ell Neal</a>, <a href="https://github.com/rubymaverick">Eric Allam</a>, <a href="https://github.com/eskerber">Erik Kerber</a>, <a href="https://github.com/jkubicek">Jim Kubicek</a>, <a href="https://github.com/nevyn">Joachim Bengtsson</a>, <a href="https://github.com/Anviking">Johannes Lund</a>, <a href="https://github.com/joshavant">Josh Avant</a>, <a href="https://github.com/jpm">João Prado Maia</a>, <a href="https://github.com/incanus">Justin R. Miller</a>, <a href="https://github.com/PycKamil">Kamil Pyć</a>, <a href="https://github.com/mteece">Matthew Teece</a>, <a href="https://github.com/MaxGabriel">Maximilian Tagher</a>, <a href="https://github.com/mindbrix">Nigel Timothy Barber</a>, <a href="https://github.com/NSProgrammer">Nolan O&#39;Brien</a>, <a href="https://github.com/pitiphong-p">Pitiphong Phongpattranont</a>, <a href="https://gist.github.com/stevemoser">Steve Moser</a>, <a href="https://github.com/Thomvis">Thomas Visser</a>, <a href="https://github.com/shpakovski">Vadim Shpakovski</a>, &amp; <a href="https://github.com/jurre">@jurre</a> for <a href="https://gist.github.com/7414618">contributing their great tips</a>.</p>

<hr>

<h2>GCC Code Block Evaluation C Extension</h2>

<p>Let&#39;s make this official: <strong>NSHipster&#39;s Objective-C trend of 2013 is code block evaluation assignment</strong>. Recommended by both <a href="https://github.com/jkubicek">Jim Kubicek</a> and <a href="https://github.com/MaxGabriel">Maximilian Tagher</a> (citing <a href="http://cocoa-dom.tumblr.com/post/56517731293/new-thing-i-do-in-code">this blog post</a> by <a href="https://github.com/monkeydom">Dominik Wagner</a>), this trick does wonders to make code cleaner, safer, and more concise.</p>

<p>Behind the magic is a GCC C extension, which causes a code block to return a value if  enclosed within brackets and parentheses.</p>

<p>Watch, as it cuts through this view controller code like butter!</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">self</span><span class="p">.</span><span class="n">searchBar</span> <span class="o">=</span> <span class="p">({</span>
    <span class="n">UISearchBar</span> <span class="o">*</span><span class="n">searchBar</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UISearchBar</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithFrame</span><span class="o">:</span><span class="p">({</span>
        <span class="n">CGRect</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tableView</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
        <span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span> <span class="o">=</span> <span class="mf">50.0f</span><span class="p">;</span>
        <span class="n">frame</span><span class="p">;</span>
    <span class="p">})];</span>
    <span class="n">searchBar</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
    <span class="n">searchBar</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div>
<p>This not only segregates configuration details into initialization, but the additional scope allows generic variable names like <code>frame</code>, <code>button</code>, and <code>view</code> to be reused in subsequent initializations. No more <code>loginButtonFrame = ... / signupButtonFrame = ...</code>!</p>

<p>If code craftsmanship is important to you, strongly consider making this standard practice in your work. It may look a bit weird at first, but this will very likely become common convention by the end of 2014.</p>

<h2>Default Values with GNU-style Ternary <code>?:</code></h2>

<p>The ternary operator, <code>?</code>, is shorthand for <code>if () {...} else {...}</code>. However, because of how difficult it can be to understand statements with ternary operators at a glance, they are generally dispreferred by veteran coders.</p>

<p>Nonetheless, <a href="https://github.com/MaxGabriel">Maximilian Tagher</a> offers a lesser-known (yet much-loved by those in-the-know) use of the ternary operator: <code>?:</code>, which acts as a convenient way to specify a fallback value to return if the left-hand side is <code>nil</code>.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="s">@&quot;a&quot;</span> <span class="o">?:</span> <span class="s">@&quot;b&quot;</span><span class="p">);</span> <span class="c1">// @&quot;a&quot;</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="nb">nil</span> <span class="o">?:</span> <span class="s">@&quot;b&quot;</span><span class="p">);</span> <span class="c1">// @&quot;b&quot;</span>
</code></pre></div>
<p>This is especially convenient for providing default behavior when a property may not be set:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">dispatch_async</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">completionQueue</span> <span class="o">?:</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">});</span>
</code></pre></div>
<p>The main downside of this approach is that default Xcode project warning settings will raise a warning. You can get around this by wrapping the relevant code block in <code>#pragma</code> declarations, but the added LOC nullifies much of the brevity that this approach provides:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#pragma clang diagnostic push</span>
<span class="cp">#pragma clang diagnostic ignored &quot;-Wgnu&quot;</span>
<span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span> <span class="o">?:</span> <span class="s">@&quot;Unknown&quot;</span><span class="p">;</span>
<span class="cp">#pragma clang diagnostic pop</span>
</code></pre></div>
<h2><code>@import</code></h2>

<p><a href="https://github.com/shpakovski">Vadim Shpakovski</a> reminds us of one of the more obscure additions to LLVM 5.0, the <code>@import</code> keyword. No more are the days of <code>Xcode ▹ Project ▹ TARGETS ▹ General ▹ Linked Frameworks and Libraries ▹ +</code>. With <code>@import</code>, the Xcode will automatically link <code>MapKit</code>, <code>CoreData</code>, or any other referenced framework as necessary. Even <code>Prefix.pch</code> benefits, sporting a svelte new physique:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">@</span><span class="n">import</span> <span class="n">UIKit</span><span class="p">;</span>
<span class="p">@</span><span class="n">import</span> <span class="n">Foundation</span><span class="p">;</span>
<span class="p">@</span><span class="n">import</span> <span class="n">CoreGraphics</span><span class="p">;</span>
</code></pre></div>
<h2>Customizing MKMapView Tiles</h2>

<p><a href="https://github.com/incanus">Justin R. Miller</a>, of <a href="https://www.mapbox.com">MapBox</a> fame, brings to our attention what is perhaps the most important feature in iOS 7 mapping: custom tile overlays:</p>

<blockquote>
<p>Relatively little-known feature of iOS 7: you can turn off Apple&#39;s own maps now with <code>MKTileOverlay</code>, <code>MKTileOverlayRenderer</code>, and <code>canReplaceMapContent</code>, unlike you could before with Apple or (pre-iOS 6) Google. And check out <a href="http://github.com/mapbox/mbxmapkit">MBXMapKit</a> if you&#39;d like to do it in one line of code.</p>
</blockquote>

<h2>Thoughtbot&#39;s Blog Post on MapKit Performance</h2>

<p>Speaking of iOS maps, <a href="https://github.com/jpm">João Prado Maia</a> cites an amazing blog post by <a href="http://thoughtbot.com">thoughtbot</a>, <a href="http://robots.thoughtbot.com/how-to-handle-large-amounts-of-data-on-maps">&quot;How To Efficiently Display Large Amounts of Data on iOS Maps&quot;</a> by <a href="https://twitter.com/theocalmes">Theodore Calmes</a>. Consider it a must-read if you plan to do any significant iCartography in 2014.</p>

<h2>NSAttributedString + HTML in iOS 7</h2>

<p>Shifting gears a little bit, <a href="https://github.com/rubymaverick">Eric Allam</a> remarks that <code>NSAttributedString</code> can do HTML now in iOS 7 with the new <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/NSAttributedString_UIKit_Additions/Reference/Reference.html#//apple_ref/doc/uid/TP40011688"><code>NSHTMLTextDocumentType</code></a> document type attribute. Combine with <a href="https://github.com/mdiep/MMMarkdown">MMMarkdown</a> for ridiculously easy <a href="http://initwithfunk.com/blog/2013/09/29/easy-markdown-rendering-with-nsattributedstring-on-ios-7/">Markdown rendering in a <code>UITextView</code></a>.</p>

<hr>

<h2>Launch Arguments &amp; User Defaults</h2>

<p>Offering another tip, <a href="https://github.com/shpakovski">Vadim Shpakovski</a> calls our attention to the relationship between launch arguments and <code>NSUserDefaults</code>:</p>

<p>The command line argument <code>-TestFeatureEnabled YES</code> can be checked in code with <code>[[NSUserDefaults standardUserDefaults] boolForKey:@&quot;TestFeatureEnabled&quot;]</code>. This is useful for debugging development builds.</p>

<hr>

<h2>Woes of a Missing <code>UIViewAnimationCurve</code> Value</h2>

<p><a href="https://github.com/Thomvis">Thomas Visser</a> bemoans his pick for least awesome Objective-C development in 2013:</p>

<blockquote>
<p>In iOS7, the animation of the keyboard show/hide changed. Its duration and, most notably, its curve is different from previous iOS versions. As before, if you want to animate something with the keyboard, you can listen to <code>UIKeyboardWillShowNotification</code>/<code>UIKeyboardWillHideNotification</code> and use the values from the <code>userInfo</code> dictionary to coordinate your animations with the keyboard. The <code>userInfo</code> dictionary contains the keyboard&#39;s begin frame, end frame, animation curve and animation duration.</p>

<p>However, in iOS 7, the animation curve is an undefined value, meaning that it is not one of the 4 defined values of <code>UIViewAnimationCurve</code>. Instead, its value is <code>7</code>. This is a problem if you want to use the same curve in your own animation, because such a curve is not defined. The work-around, <a href="https://devforums.apple.com/message/878410#878410">as discussed on the Apple forums</a>, is to manually translate the <code>UIViewAnimationCurve</code> to a <code>UIViewAnimationOptions</code> value. From the definition of <code>UIViewAnimationOptions</code>, we learn that this translation is done by shifting the curve value 16 times to the left: <code>option = curve &lt;&lt; 16</code>. This works great, but shouldn&#39;t be necessary. I hope Apple will add this mysterious 5th curve to the definitions in a future iOS update.</p>
</blockquote>

<h2>Injecting Analytics on Outgoing Links</h2>

<p><a href="https://github.com/dbgrandi">David Grandinetti</a> has a tip for apps that want to track outgoing links from within an app: override <code>AppDelegate -openURL:</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">openURL:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">url</span><span class="p">{</span>
    <span class="k">if</span> <span class="p">([[</span><span class="n">url</span> <span class="n">scheme</span><span class="p">]</span> <span class="n">hasPrefix</span><span class="o">:</span><span class="s">@&quot;http&quot;</span><span class="p">])</span> <span class="p">{</span>
        <span class="p">[[</span><span class="n">GAI</span> <span class="n">sharedInstance</span><span class="p">].</span><span class="n">defaultTracker</span> <span class="n">sendView</span><span class="o">:</span><span class="p">[</span><span class="n">url</span> <span class="n">absoluteString</span><span class="p">]];</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">super</span> <span class="n">openURL</span><span class="o">:</span><span class="n">url</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>In this example, this information is being sent to Google Analytics, but one could easily adapt this approach for any analytics provider.</p>

<h2>Reviving the Look-and-Feel of iOS 6 in Your App with One Weird Trick (UI Designers <em>hate</em> it!)</h2>

<p>Still resisting the aesthetics of this year&#39;s iOS makeover? <a href="https://github.com/PycKamil">Kamil Pyć</a> shows us how to act as if iOS 7 never happened:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="n">setObject</span><span class="o">:</span><span class="p">@</span><span class="nb">YES</span> <span class="n">forKey</span><span class="o">:</span><span class="s">@&quot;UIUseLegacyUI&quot;</span><span class="p">]</span>
</code></pre></div>
<blockquote>
<p>And, of course, following up from a previous tip, since <code>NSUserDefaults</code> is tied to launch arguments, this can also be specified on launch. Keep this tucked in the back of your mind—this could make for a simple yet effective April Fool&#39;s joke.</p>
</blockquote>

<hr>

<h2>Detecting Category Method Collisions</h2>

<p>Categories are great, but suffer from that same original sin of Objective-C: lack of name-spacing. Duplicate method declarations in categories interact in undefined ways, and may lead to difficult-to-debug behavior.</p>

<p>Fortunately, <a href="https://github.com/0xced">Cédric Luthi</a> shows us how to tell if any category methods are getting up in one another&#39;s business:</p>

<blockquote>
<p>Set the <code>OBJC_PRINT_REPLACED_METHODS</code> environment variable to <code>YES</code> in order to automatically log all methods that are smashed by categories.</p>
</blockquote>

<hr>

<h2>A .plist of Emoji, Grouped by Category</h2>

<p>In an encore submission, Cédric brings us a  <a href="https://gist.github.com/mattt/8185075">.plist file of Emoji grouped by category</a> (mirrored from CloudApp to Gist in order to be more searchable). 😄👍</p>

<hr>

<h2>Quickly Determining the Type of Image Data</h2>

<p>Here&#39;s a simple function from <a href="https://github.com/NSProgrammer">Nolan O&#39;Brien</a> that can be used to determine the type of image data based on the first couple bytes of the header:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">static</span> <span class="kr">inline</span> <span class="n">NSPUIImageType</span> <span class="nf">NSPUIImageTypeFromData</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="n">imageData</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">imageData</span><span class="p">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">const</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">bytes</span> <span class="o">=</span> <span class="p">[</span><span class="n">imageData</span> <span class="n">bytes</span><span class="p">];</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">bytes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0xff</span> <span class="o">&amp;&amp;</span>
            <span class="n">bytes</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0xd8</span> <span class="o">&amp;&amp;</span>
            <span class="n">bytes</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0xff</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">NSPUIImageType_JPEG</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">bytes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0x89</span> <span class="o">&amp;&amp;</span>
            <span class="n">bytes</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0x50</span> <span class="o">&amp;&amp;</span>
            <span class="n">bytes</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0x4e</span> <span class="o">&amp;&amp;</span>
            <span class="n">bytes</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0x47</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">NSPUIImageType_PNG</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">NSPUIImageType_Unknown</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<hr>

<h2>Print KVO Context</h2>

<p>Once again, showing off his unmatched knowledge of Objective-C internals, Cédric shares this extremely useful tip for debugging <a href="http://nshipster.com/key-value-observing/">Key-Value Observing</a>.</p>

<blockquote>
<p>Print which <a href="https://gist.github.com/ddribin/5158614#comment-798104">context</a> is passed to <code>observeValueForKeyPath:ofObject:change:context:</code> in lldb.</p>

<p>Say you have declared a context like this:</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">static</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">MyFooContext</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">MyFooContext</span><span class="p">;</span>
</code></pre></div>
<blockquote>
<p>...and you want to to know what context it is when you are inside</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">observeValueForKeyPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyPath</span>
                      <span class="nl">ofObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span>
                        <span class="nl">change:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">change</span>
                       <span class="nl">context:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span>
</code></pre></div>
<blockquote>
<p>You can do this:</p>
</blockquote>
<div class="highlight"><pre><code class="text language-text" data-lang="text">(lldb) image lookup -a `context`
      Address: MyApp[0x00026258] (MyApp.__DATA.__data + 4)
      Summary: MyFooContext
</code></pre></div>
<hr>

<h2>Creating a KeyPath from Selectors</h2>

<p>On the subject of Key-Value Coding, <a href="https://github.com/pitiphong-p">Pitiphong Phongpattranont</a> offers this useful function that builds a keypath from a variable list of selectors:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="kr">inline</span> <span class="n">NSString</span> <span class="o">*</span> <span class="nf">PTPKeyPathForSelectors</span><span class="p">(</span><span class="kt">SEL</span> <span class="n">selector</span><span class="p">,</span> <span class="p">...)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">selector</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">selectors</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
  <span class="kt">va_list</span> <span class="n">args</span><span class="p">;</span>
  <span class="n">va_start</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">selector</span><span class="p">);</span>
  <span class="kt">SEL</span> <span class="n">arg</span> <span class="o">=</span> <span class="n">selector</span><span class="p">;</span>
  <span class="k">do</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">selectors</span> <span class="n">addObject</span><span class="o">:</span><span class="n">NSStringFromSelector</span><span class="p">(</span><span class="n">arg</span><span class="p">)];</span>
  <span class="p">}</span> <span class="k">while</span><span class="p">((</span><span class="n">arg</span> <span class="o">=</span> <span class="n">va_arg</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="kt">SEL</span><span class="p">)));</span>
  <span class="n">va_end</span><span class="p">(</span><span class="n">args</span><span class="p">);</span>

  <span class="k">return</span> <span class="p">[</span><span class="n">selectors</span> <span class="n">componentsJoinedByString</span><span class="o">:</span><span class="s">@&quot;.&quot;</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">keyPath</span> <span class="o">=</span> <span class="n">PTPKeyPathForSelectors</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="k">@selector</span><span class="p">(</span><span class="n">name</span><span class="p">),</span> <span class="nb">nil</span><span class="p">);</span>
<span class="c1">// =&gt; @&quot;data.name&quot;</span>
</code></pre></div>
<h2>Nomad CLI Utilities</h2>

<p>And finally, <a href="https://github.com/mteece">Matthew Teece</a> gives a shout-out to <a href="http://nomad-cli.com">Nomad</a>, a world-class collection of command-line utilities—specifically, <a href="https://github.com/nomad/houston">Houston</a>, which can send and manage push notifications from the command line, or within your Ruby application.</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">    $ apn push &quot;&lt;token&gt;&quot; -c /path/to/cert.pem -m &quot;Hello!&quot;
</code></pre></div>
<hr>

<p>Thus concludes this year&#39;s reader submissions. Thanks again to everyone for your submissions!</p>

<p>And thanks to you, dear reader, for sticking with NSHipster for another 52 weeks. Between the <a href="http://asciiwwdc.com/2013/sessions/228?q=NSHipster">WWDC session</a> and <a href="https://gumroad.com/l/nshipster">the book</a>, 2013 has been a bellwether year for NSHipster. Thank you for your support and enthusiasm for the site—it really does mean the world to me.</p>

<p>We have a ton of great stuff planned for 2014, so keep your fixies primed and your artisanal espresso hot for another season of great iOS and Mac OS X knowledge.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 30 Dec 2013 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:36:"http://nshipster.com/new-years-2014/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"http://nshipster.com/new-years-2014/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:15;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:45:"UIApplicationDelegate&lt;br/&gt;launchOptions";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:28928:"<p>AppDelegate is the dumping ground for functionality in iOS.</p>

<p>Application lifecycle management? URL routing? Notifications? Core Data incantations? Invasive and monolithic 3rd-party SDK initialization? Random functionality that doesn&#39;t seem to fit anywhere else? Just stash it in <code>AppDelegate.m</code>!</p>

<p>And of all of the crowded, over-loaded parts in AppDelegate, <code>-application:didFinishLaunchingWithOptions:</code> is the most congested of all.</p>

<p>For many developers, the <code>launchOptions</code> parameter is akin to the <code>String[] args</code> argument of a Java <code>main</code> method—something ignored in the rush to building an application. Hiding in plain sight, <code>launchOptions</code> contains a wealth of keyed knowledge that speaks to the multitude of ways an app can be launched on iOS.</p>

<p>This week, all will be revealed in this NSHipster tell-all about the least understood parameter of the most important method in UIKit: <code>launchOptions</code>.</p>

<hr>

<p>Every app begins with <code>UIApplicationDelegate -application:didFinishLaunchingWithOptions:</code> (or more accurately, <code>-application:willFinishLaunchingWithOptions:</code>, when implemented). It is called by the application to notify its delegate that the launch process is finishing, and nearly ready to run.</p>

<p>An app launches when its icon is tapped on <a href="http://en.wikipedia.org/wiki/SpringBoard">Springboard</a>, but there are several other occasions in which an app can be launched. For example, an app registered for a custom URL scheme, such as <code>twitter://</code>, could be launched as a result of opening a URL. An app could also be launched in response to a push notification, or a significant change in device location.</p>

<p>Determining why and how an app launched is the responsibility of the <code>launchOptions</code> parameter. Like a <code>userInfo</code> dictionary, <code>-application:didFinishLaunchingWithOptions:</code> can get information for particular named keys in <code>launchOptions</code>.</p>

<blockquote>
<p>Many of these keys are also available in the  <code>UIApplicationDidFinishLaunchingNotification</code> notification posted on application launch. Check the docs for additional details.</p>
</blockquote>

<p>Numerous as they are, <code>launchOptions</code> keys can be more easily understood when organized into groups, corresponding to why the app was launched:</p>

<h2>Opening from URL</h2>

<p>Apps can launch other apps by passing URLs:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="n">openURL</span><span class="o">:</span><span class="p">[</span><span class="n">NSURL</span> <span class="n">URLWithString</span><span class="o">:</span><span class="s">@&quot;app://...&quot;</span><span class="p">]];</span>
</code></pre></div>
<p>For example, an <code>http://</code> URL would open in Safari, a <code>mailto://</code> URL would open in Mail, and a <code>tel://</code> URL would open in Phone.</p>

<p>In these circumstances, the <code>UIApplicationLaunchOptionsURLKey</code> key would be populated in <code>launchOptions</code>.</p>

<blockquote>
<ul>
<li><code>UIApplicationLaunchOptionsURLKey</code>: Indicates that the app was launched in order to open a URL. The value of this key is an <code>NSURL</code> object containing the URL to open.</li>
</ul>
</blockquote>

<p>An app can also be launched through URLs with additional system information. When an app is launched from an <code>UIDocumentInteractionController</code> or via AirDrop, the following keys are set in <code>launchOptions</code>:</p>

<blockquote>
<ul>
<li><code>UIApplicationLaunchOptionsSourceApplicationKey</code>: Identifies the app that requested the launch of your app. The value of this key is an <code>NSString</code> object that represents the bundle ID of the app that made the request</li>
<li><code>UIApplicationLaunchOptionsAnnotationKey</code>: Indicates that custom data was provided by the app that requested the opening of the URL. The value of this key is a property-list object containing the custom data.</li>
</ul>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSURL</span> <span class="o">*</span><span class="n">fileURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">URLForResource</span><span class="o">:</span><span class="s">@&quot;Document&quot;</span> <span class="n">withExtension</span><span class="o">:</span><span class="s">@&quot;pdf&quot;</span><span class="p">];</span>
<span class="k">if</span> <span class="p">(</span><span class="n">fileURL</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">UIDocumentInteractionController</span> <span class="o">*</span><span class="n">documentInteractionController</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIDocumentInteractionController</span> <span class="n">interactionControllerWithURL</span><span class="o">:</span><span class="n">fileURL</span><span class="p">];</span>
    <span class="n">documentInteractionController</span><span class="p">.</span><span class="n">annotation</span> <span class="o">=</span> <span class="p">@{</span><span class="s">@&quot;foo&quot;</span><span class="o">:</span> <span class="s">@&quot;bar&quot;</span><span class="p">};</span>
    <span class="p">[</span><span class="n">documentInteractionController</span> <span class="n">setDelegate</span><span class="o">:</span><span class="n">self</span><span class="p">];</span>
    <span class="p">[</span><span class="n">documentInteractionController</span> <span class="n">presentPreviewAnimated</span><span class="o">:</span><span class="nb">YES</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<h2>Responding to Notification</h2>

<p>Not to be confused with <a href="http://nshipster.com/nsnotification-and-nsnotificationcenter/"><code>NSNotification</code></a>, apps can be sent remote or local notifications.</p>

<h3>Remote Notification</h3>

<p>Introduced in iOS 3, remote, or &quot;push&quot; notifications are one of the defining features of the mobile platform.</p>

<p>To register for remote notifications, <code>registerForRemoteNotificationTypes:</code> is called in <code>application:didFinishLaunchingWithOptions:</code>.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[</span><span class="n">application</span> <span class="n">registerForRemoteNotificationTypes</span><span class="o">:</span>
    <span class="n">UIRemoteNotificationTypeBadge</span> <span class="o">|</span>
    <span class="n">UIRemoteNotificationTypeSound</span> <span class="o">|</span>
    <span class="n">UIRemoteNotificationTypeAlert</span><span class="p">];</span>
</code></pre></div>
<p>...which, if successful, calls  <code>-application:didRegisterForRemoteNotificationsWithDeviceToken:</code>. Once the device has been successfully registered, it can receive push notifications at any time.</p>

<p>If an app receives a notification while in the foreground, its delegate will call <code>application:didReceiveRemoteNotification:</code>. However, if the app is launched, perhaps by swiping the alert in notification center, <code>application:didFinishLaunchingWithOptions:</code> is called with the  <code>UIApplicationLaunchOptionsRemoteNotificationKey</code> launch option:</p>

<blockquote>
<ul>
<li><code>UIApplicationLaunchOptionsRemoteNotificationKey</code>: Indicates that a remote notification is available for the app to process. The value of this key is an <code>NSDictionary</code> containing the payload of the remote notification.
&gt; - <code>alert</code>: Either a string for the alert message or a dictionary with two keys: <code>body</code> and <code>show-view</code>.
&gt; - <code>badge</code>: A number indicating the quantity of data items to download from the provider. This number is to be displayed on the app icon. The absence of a badge property indicates that any number currently badging the icon should be removed.
&gt; - <code>sound</code>: The name of a sound file in the app bundle to play as an alert sound. If “default” is specified, the default sound should be played.</li>
</ul>
</blockquote>

<p>Since this introduces two separate code paths for notification handling, a common approach is to have <code>application:didFinishLaunchingWithOptions:</code> manually call <code>application:didReceiveRemoteNotification:</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span>
<span class="nl">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">launchOptions</span><span class="p">[</span><span class="n">UIApplicationLaunchOptionsRemoteNotificationKey</span><span class="p">])</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">self</span> <span class="n">application</span><span class="o">:</span><span class="n">application</span> <span class="n">didReceiveRemoteNotification</span><span class="o">:</span><span class="n">launchOptions</span><span class="p">[</span><span class="n">UIApplicationLaunchOptionsRemoteNotificationKey</span><span class="p">]];</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h3>Local Notification</h3>

<p><a href="https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/IPhoneOSClientImp.html#//apple_ref/doc/uid/TP40008194-CH103-SW1">Local notifications</a> were added in iOS 4, and to this day, are still surprisingly misunderstood.</p>

<p>Apps can schedule <code>UILocalNotification</code>s to trigger at some future time or interval. If the app is active in the foreground at that time, the app calls <code>-application:didReceiveLocalNotification:</code> on its delegate. However, if the app is not active, the notification will be posted to Notification Center.</p>

<p>Unlike remote notifications, <code>UIApplication</code> delegate provides a unified code path for handling local notifications. If an app is launched through a local notification, it calls <code>-application:didFinishLaunchingWithOptions:</code> followed by <code>-application:didReceiveLocalNotification:</code> (that is, there is no need to call it from <code>-application:didFinishLaunchingWithOptions:</code> like remote notifications).</p>

<p>A local notification populates the launch options on <code>UIApplicationLaunchOptionsLocalNotificationKey</code>, which contains a payload with the same structure as a remote notification:</p>

<ul>
<li><code>UIApplicationLaunchOptionsLocalNotificationKey</code>: Indicates that a local notification is available for the app to process. The value of this key is an <code>NSDictionary</code> containing the payload of the local notification.</li>
</ul>

<p>In the case where it is desirable to show an alert for a local notification delivered when the app is active in the foreground, and otherwise wouldn&#39;t provide a visual indication, here&#39;s how one might use the information from <code>UILocalNotification</code> to do it manually:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">@</span><span class="n">import</span> <span class="n">AVFoundation</span><span class="p">;</span>

<span class="k">@interface</span> <span class="nc">AppDelegate</span> <span class="p">()</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">readwrite</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">SystemSoundID</span> <span class="n">localNotificationSound</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div><div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span>
<span class="nl">didReceiveLocalNotification:</span><span class="p">(</span><span class="n">UILocalNotification</span> <span class="o">*</span><span class="p">)</span><span class="nv">notification</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">application</span><span class="p">.</span><span class="n">applicationState</span> <span class="o">==</span> <span class="n">UIApplicationStateActive</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">UIAlertView</span> <span class="o">*</span><span class="n">alertView</span> <span class="o">=</span>
            <span class="p">[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithTitle</span><span class="o">:</span><span class="n">notification</span><span class="p">.</span><span class="n">alertAction</span>
                                       <span class="nl">message:</span><span class="n">notification</span><span class="p">.</span><span class="n">alertBody</span>
                                      <span class="nl">delegate:</span><span class="nb">nil</span>
                             <span class="nl">cancelButtonTitle:</span><span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;OK&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
                             <span class="nl">otherButtonTitles:</span><span class="nb">nil</span><span class="p">];</span>

        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">self</span><span class="p">.</span><span class="n">localNotificationSound</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">NSURL</span> <span class="o">*</span><span class="n">soundURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">URLForResource</span><span class="o">:</span><span class="s">@&quot;Sosumi&quot;</span>
                                                      <span class="nl">withExtension:</span><span class="s">@&quot;wav&quot;</span><span class="p">];</span>
            <span class="n">AudioServicesCreateSystemSoundID</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFURLRef</span><span class="p">)</span><span class="n">soundURL</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">_localNotificationSound</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">AudioServicesPlaySystemSound</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">localNotificationSound</span><span class="p">);</span>

        <span class="p">[</span><span class="n">alertView</span> <span class="n">show</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">applicationWillTerminate:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">localNotificationSound</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">AudioServicesDisposeSystemSoundID</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">localNotificationSound</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2>Location Event</h2>

<p>Building the next great geomobilelocalsocial check-in photo app? Well, you&#39;re about 4 years late to the party.</p>

<p>But fear not! With iOS region monitoring, your app can be launched on location events:</p>

<blockquote>
<ul>
<li><code>UIApplicationLaunchOptionsLocationKey</code>: Indicates that the app was launched in response to an incoming location event. The value of this key is an <code>NSNumber</code> object containing a Boolean value. You should use the presence of this key as a signal to create a <code>CLLocationManager</code> object and start location services again. Location data is delivered only to the location manager delegate and not using this key.</li>
</ul>
</blockquote>

<p>Here&#39;s an example of how an app might go about monitoring for significant location change to determine launch behavior:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">@</span><span class="n">import</span> <span class="n">CoreLocation</span><span class="p">;</span>

<span class="k">@interface</span> <span class="nc">AppDelegate</span> <span class="p">()</span> <span class="o">&lt;</span><span class="n">CLLocationManagerDelegate</span><span class="o">&gt;</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">readwrite</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">CLLocationManager</span> <span class="o">*</span><span class="n">locationManager</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div><div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span>
<span class="nl">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">CLLocationManager</span> <span class="n">locationServicesEnabled</span><span class="p">])</span> <span class="p">{</span>
        <span class="p">[[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithTitle</span><span class="o">:</span><span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;Location Services Disabled&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
                                    <span class="nl">message:</span><span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;You currently have all location services for this device disabled. If you proceed, you will be asked to confirm whether location services should be reenabled.&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
                                   <span class="nl">delegate:</span><span class="nb">nil</span>
                          <span class="nl">cancelButtonTitle:</span><span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;OK&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
                          <span class="nl">otherButtonTitles:</span><span class="nb">nil</span><span class="p">]</span> <span class="n">show</span><span class="p">];</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLLocationManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
        <span class="n">self</span><span class="p">.</span><span class="n">locationManager</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">startMonitoringSignificantLocationChanges</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">launchOptions</span><span class="p">[</span><span class="n">UIApplicationLaunchOptionsLocationKey</span><span class="p">])</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">startUpdatingLocation</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2>Newsstand</h2>

<p><em>All of the Newsstand developers in the house: say &quot;Yeah!&quot;</em></p>

<p><em><code>crickets.aiff</code></em></p>

<p>Well alright, then.</p>

<p>Newsstand can launch when newly-downloaded assets are available.</p>

<p>This is how you register:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[</span><span class="n">application</span> <span class="n">registerForRemoteNotificationTypes</span><span class="o">:</span>
    <span class="n">UIRemoteNotificationTypeNewsstandContentAvailability</span><span class="p">];</span>
</code></pre></div>
<p>And this is the key to look out for in <code>launchOptions</code>:</p>

<blockquote>
<ul>
<li><code>UIApplicationLaunchOptionsNewsstandDownloadsKey</code>: Indicates that newly downloaded Newsstand assets are available for your app. The value of this key is an array of string identifiers that identify the <code>NKAssetDownload</code> objects corresponding to the assets. Although you can use the identifiers for cross-checking purposes, you should obtain the definitive array of <code>NKAssetDownload</code> objects (representing asset downloads in progress or in error) through the downloadingAssets property of the <code>NKLibrary</code> object representing the Newsstand app’s library.</li>
</ul>
</blockquote>

<p>Not too much more to say about that.</p>

<h2>Bluetooth</h2>

<p>iOS 7 introduced functionality that allows apps to be relaunched by Bluetooth peripherals.</p>

<p>If an app launches, instantiates a <code>CBCentralManager</code> or <code>CBPeripheralManager</code> with a particular identifier, and connects to other Bluetooth peripherals, the app can be re-launched by certain actions from the Bluetooth system. Depending on whether it was a central or peripheral manager that was notified, one of the following keys will be passed into <code>launchOptions</code>:</p>

<blockquote>
<ul>
<li><code>UIApplicationLaunchOptionsBluetoothCentralsKey</code>: Indicates that the app previously had one or more <code>CBCentralManager</code> objects and was relaunched by the Bluetooth system to continue actions associated with those objects. The value of this key is an <code>NSArray</code> object containing one or more <code>NSString</code> objects. Each string in the array represents the restoration identifier for a central manager object.</li>
<li><code>UIApplicationLaunchOptionsBluetoothPeripheralsKey</code>:  Indicates that the app previously had one or more <code>CBPeripheralManager</code> objects and was relaunched by the Bluetooth system to continue actions associated with those objects. The value of this key is an <code>NSArray</code> object containing one or more <code>NSString</code> objects. Each string in the array represents the restoration identifier for a peripheral manager object.</li>
</ul>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">@</span><span class="n">import</span> <span class="n">CoreBluetooth</span><span class="p">;</span>

<span class="k">@interface</span> <span class="nc">AppDelegate</span> <span class="p">()</span> <span class="o">&lt;</span><span class="n">CBCentralManagerDelegate</span><span class="o">&gt;</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">readwrite</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">CBCentralManager</span> <span class="o">*</span><span class="n">centralManager</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div><div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">self</span><span class="p">.</span><span class="n">centralManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CBCentralManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithDelegate</span><span class="o">:</span><span class="n">self</span> <span class="n">queue</span><span class="o">:</span><span class="nb">nil</span> <span class="n">options</span><span class="o">:</span><span class="p">@{</span><span class="n">CBCentralManagerOptionRestoreIdentifierKey</span><span class="o">:</span><span class="p">(</span><span class="n">launchOptions</span><span class="p">[</span><span class="n">UIApplicationLaunchOptionsBluetoothCentralsKey</span><span class="p">]</span> <span class="o">?:</span> <span class="p">[[</span><span class="n">NSUUID</span> <span class="n">UUID</span><span class="p">]</span> <span class="n">UUIDString</span><span class="p">])}];</span>

<span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">centralManager</span><span class="p">.</span><span class="n">state</span> <span class="o">==</span> <span class="n">CBCentralManagerStatePoweredOn</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">UID</span> <span class="o">=</span> <span class="s">@&quot;7C13BAA0-A5D4-4624-9397-15BF67161B1C&quot;</span><span class="p">;</span> <span class="c1">// generated with `$ uuidgen`</span>
    <span class="n">NSArray</span> <span class="o">*</span><span class="n">services</span> <span class="o">=</span> <span class="p">@[[</span><span class="n">CBUUID</span> <span class="n">UUIDWithString</span><span class="o">:</span><span class="n">UID</span><span class="p">]];</span>
    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">scanOptions</span> <span class="o">=</span> <span class="p">@{</span><span class="n">CBCentralManagerScanOptionAllowDuplicatesKey</span><span class="o">:</span><span class="p">@</span><span class="nb">YES</span><span class="p">};</span>
    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">centralManager</span> <span class="n">scanForPeripheralsWithServices</span><span class="o">:</span><span class="n">services</span> <span class="n">options</span><span class="o">:</span><span class="n">scanOptions</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<hr>

<p>Keeping track of all of the various ways and means of application launching can be exhausting. So it&#39;s fortunate that any given app will probably only have to handle one or two of these possibilities.</p>

<p>Knowing what&#39;s possible is often what it takes to launch an app from concept to implementation, so bear in mind all of your options when the next great idea springs to mind.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 16 Dec 2013 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:36:"http://nshipster.com/launch-options/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"http://nshipster.com/launch-options/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:16;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:22:"Multipeer Connectivity";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:34443:"<p>As consumer web technologies and enterprises race towards cloud infrastructure, there is a curious and significant counter-movement towards connected devices.</p>

<p>In this age of mobile computing, the possibilities of collaboration, whether in work or play, have never been greater. In this age of privacy concerns and mass surveillance, the need for secure, ad hoc communications has never been more prescient. In this age of connected devices, the promise of mastery over the everyday objects of our lives has never been closer at hand.</p>

<p>The Multipeer Connectivity APIs, introduced in iOS 7, therefore may well be the most significant for the platform. It allows developers to completely reimagine how mobile apps are built, and to redefine what is possible. And we&#39;re not just talking about successors to the lame bump-to-send-contact-information genre, either: multi-peer connectivity has implications on everything from collaborative editing and file sharing to multiplayer gaming and sensor aggregation.</p>

<hr>

<p>Multipeer Connectivity is a framework that enables nearby devices to communicate over infrastructure Wi-Fi networks, peer-to-peer Wi-Fi, and Bluetooth personal area networks. Connected peers are able securely transmit messages, streams, or file resources to other devices without going through an intermediary web service.</p>

<h2>Advertising &amp; Discovering</h2>

<p>The first step in communication is to make peers aware of one another. This is accomplished by advertising and discovering services.</p>

<p>Advertising makes a service known to other peers, while discovery is the inverse process of the client being made aware of services advertised by other peers. In many cases, clients both discover and advertise for the same service, which can lead to some initial confusion—especially to anyone rooted in the client-server paradigm.</p>

<p>Each service is identified by a type, which is a short text string of ASCII letters, numbers, and dashes, up to 15 characters in length. By convention, a service name should begin with the app name, followed by a dash and a unique descriptor for that service (think of it as simplified <code>com.apple.*</code>-esque reverse-DNS notation):</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">static</span> <span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">XXServiceType</span> <span class="o">=</span> <span class="s">@&quot;xx-service&quot;</span><span class="p">;</span>
</code></pre></div>
<p>Peers are uniquely identified by an <code>MCPeerID</code> object, which are initialized with a display name. This could be a user-specified nickname, or simply the current device name:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">MCPeerID</span> <span class="o">*</span><span class="n">localPeerID</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MCPeerID</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithDisplayName</span><span class="o">:</span><span class="p">[[</span><span class="n">UIDevice</span> <span class="n">currentDevice</span><span class="p">]</span> <span class="n">name</span><span class="p">]];</span>
</code></pre></div>
<blockquote>
<p>Peers can be also be advertised or discovered manually using <code>NSNetService</code> or the Bonjour C APIs, but this is a rather advanced and specific concern. Additional information about manual peer management can be found in the <code>MCSession</code> documentation.</p>
</blockquote>

<h3>Advertising</h3>

<p>Services are advertised by the <code>MCNearbyServiceAdvertiser</code>, which is initialized with a local peer, service type, and any optional information to be communicated to peers that discover the service.</p>

<blockquote>
<p>Discovery information is sent as Bonjour <code>TXT</code> records encoded according to <a href="http://tools.ietf.org/html/rfc6763">RFC 6763</a>.</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">MCNearbyServiceAdvertiser</span> <span class="o">*</span><span class="n">advertiser</span> <span class="o">=</span>
    <span class="p">[[</span><span class="n">MCNearbyServiceAdvertiser</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithPeer</span><span class="o">:</span><span class="n">localPeerID</span>
                                      <span class="nl">discoveryInfo:</span><span class="nb">nil</span>
                                        <span class="nl">serviceType:</span><span class="n">XXServiceType</span><span class="p">];</span>
<span class="n">advertiser</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
<span class="p">[</span><span class="n">advertiser</span> <span class="n">startAdvertisingPeer</span><span class="p">];</span>
</code></pre></div>
<p>Events are handled by the advertiser&#39;s <code>delegate</code>, conforming to the <code>MCNearbyServiceAdvertiserDelegate</code> protocol.</p>

<p>As an example implementation, consider a client that allows the user to choose whether to accept or reject incoming connection requests, with the option to reject and block any subsequent requests from that peer:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#pragma mark - MCNearbyServiceAdvertiserDelegate</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">advertiser:</span><span class="p">(</span><span class="n">MCNearbyServiceAdvertiser</span> <span class="o">*</span><span class="p">)</span><span class="nv">advertiser</span>
<span class="nl">didReceiveInvitationFromPeer:</span><span class="p">(</span><span class="n">MCPeerID</span> <span class="o">*</span><span class="p">)</span><span class="nv">peerID</span>
       <span class="nl">withContext:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span>
 <span class="nl">invitationHandler:</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">BOOL</span> <span class="n">accept</span><span class="p">,</span> <span class="n">MCSession</span> <span class="o">*</span><span class="n">session</span><span class="p">))</span><span class="nv">invitationHandler</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">self</span><span class="p">.</span><span class="n">mutableBlockedPeers</span> <span class="n">containsObject</span><span class="o">:</span><span class="n">peerID</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">invitationHandler</span><span class="p">(</span><span class="nb">NO</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="p">[[</span><span class="n">UIActionSheet</span> <span class="n">actionSheetWithTitle</span><span class="o">:</span><span class="p">[</span><span class="n">NSString</span> <span class="n">stringWithFormat</span><span class="o">:</span><span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;Received Invitation from %@&quot;</span><span class="p">,</span> <span class="s">@&quot;Received Invitation from {Peer}&quot;</span><span class="p">),</span> <span class="n">peerID</span><span class="p">.</span><span class="n">displayName</span><span class="p">]</span>
                       <span class="nl">cancelButtonTitle:</span><span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;Reject&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
                  <span class="nl">destructiveButtonTitle:</span><span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;Block&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
                       <span class="nl">otherButtonTitles:</span><span class="p">@[</span><span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;Accept&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)]</span>
                                   <span class="nl">block:</span><span class="o">^</span><span class="p">(</span><span class="n">UIActionSheet</span> <span class="o">*</span><span class="n">actionSheet</span><span class="p">,</span> <span class="n">NSInteger</span> <span class="n">buttonIndex</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">BOOL</span> <span class="n">acceptedInvitation</span> <span class="o">=</span> <span class="p">(</span><span class="n">buttonIndex</span> <span class="o">==</span> <span class="p">[</span><span class="n">actionSheet</span> <span class="n">firstOtherButtonIndex</span><span class="p">]);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">buttonIndex</span> <span class="o">==</span> <span class="p">[</span><span class="n">actionSheet</span> <span class="n">destructiveButtonIndex</span><span class="p">])</span> <span class="p">{</span>
            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">mutableBlockedPeers</span> <span class="n">addObject</span><span class="o">:</span><span class="n">peerID</span><span class="p">];</span>
        <span class="p">}</span>

        <span class="n">MCSession</span> <span class="o">*</span><span class="n">session</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MCSession</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithPeer</span><span class="o">:</span><span class="n">localPeerID</span>
                                            <span class="nl">securityIdentity:</span><span class="nb">nil</span>
                                        <span class="nl">encryptionPreference:</span><span class="n">MCEncryptionNone</span><span class="p">];</span>
        <span class="n">session</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>

        <span class="n">invitationHandler</span><span class="p">(</span><span class="n">acceptedInvitation</span><span class="p">,</span> <span class="p">(</span><span class="n">acceptedInvitation</span> <span class="o">?</span> <span class="n">session</span> <span class="o">:</span> <span class="nb">nil</span><span class="p">));</span>
    <span class="p">}]</span> <span class="n">showInView</span><span class="o">:</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<blockquote>
<p>For sake of simplicity, this example contrives a block-based initializer for <code>UIActionSheet</code>, which allows for the <code>invitationHandler</code> to be passed directly into the action sheet responder in order to avoid the messy business of creating and managing a custom delegate object. This method can be implemented in a category, or adapted from <a href="http://cocoapods.org/?q=uiactionsheet%20blocks">any of the implementations available on CocoaPods</a></p>
</blockquote>

<h3>Creating a Session</h3>

<p>As in the example above, sessions are created by advertisers, and passed to peers when accepting an invitation to connect. An <code>MCSession</code> object is initialized with the local peer identifier, as well as <code>securityIdentity</code> and <code>encryptionPreference</code> parameters.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">MCSession</span> <span class="o">*</span><span class="n">session</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MCSession</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithPeer</span><span class="o">:</span><span class="n">localPeerID</span>
                                    <span class="nl">securityIdentity:</span><span class="nb">nil</span>
                                <span class="nl">encryptionPreference:</span><span class="n">MCEncryptionNone</span><span class="p">];</span>
<span class="n">session</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</code></pre></div>
<p><code>securityIdentity</code> is an optional parameter that allows peers to securely identify peers by X.509 certificates. When specified, the first object should be an <code>SecIdentityRef</code> identifying the client, followed by one or more <code>SecCertificateRef</code> objects than can be used to verify the local peer’s identity.</p>

<p>The <code>encryptionPreference</code> parameter specifies whether to encrypt communication between peers. Three possible values are provided by the <code>MCEncryptionPreference</code> enum:</p>

<ul>
<li><code>MCEncryptionOptional</code>: The session prefers to use encryption, but will accept unencrypted connections.</li>
<li><code>MCEncryptionRequired</code>: The session requires encryption.</li>
<li><code>MCEncryptionNone</code>: The session should not be encrypted.</li>
</ul>

<blockquote>
<p>Enabling encryption can significantly reduce transfer rates, so unless your application specifically deals with user-sensitive information, <code>MCEncryptionNone</code> is recommended.</p>
</blockquote>

<p>The <code>MCSessionDelegate</code> protocol will be covered in the section on sending and receiving information.</p>

<h3>Discovering</h3>

<p>Clients can discover advertised services using <code>MCNearbyServiceBrowser</code>, which is initialized with the local peer identifier and the service type, much like for <code>MCNearbyServiceAdvertiser</code>.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">MCNearbyServiceBrowser</span> <span class="o">*</span><span class="n">browser</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MCNearbyServiceBrowser</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithPeer</span><span class="o">:</span><span class="n">localPeerID</span> <span class="n">serviceType</span><span class="o">:</span><span class="n">XXServiceType</span><span class="p">];</span>
<span class="n">browser</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</code></pre></div>
<p>There may be many peers advertising a particular service, so as a convenience to the user (and the developer), the <code>MCBrowserViewController</code> offers a built-in, standard way to present and connect to advertising peers:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">MCBrowserViewController</span> <span class="o">*</span><span class="n">browserViewController</span> <span class="o">=</span>
    <span class="p">[[</span><span class="n">MCBrowserViewController</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithBrowser</span><span class="o">:</span><span class="n">browser</span>
                                             <span class="nl">session:</span><span class="n">session</span><span class="p">];</span>
<span class="n">browserViewController</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
<span class="p">[</span><span class="n">self</span> <span class="n">presentViewController</span><span class="o">:</span><span class="n">browserViewController</span>
                   <span class="nl">animated:</span><span class="nb">YES</span>
                 <span class="nl">completion:</span>
<span class="o">^</span><span class="p">{</span>
    <span class="p">[</span><span class="n">browser</span> <span class="n">startBrowsingForPeers</span><span class="p">];</span>
<span class="p">}];</span>
</code></pre></div>
<p>When a browser has finished connecting to peers, it calls <code>-browserViewControllerDidFinish:</code> on its delegate, to notify the presenting view controller that it should update its UI to accommodate the newly-connected clients.</p>

<h2>Sending &amp; Receiving Information</h2>

<p>Once peers are connected to one another, information can be sent between them. The Multipeer Connectivity framework distinguishes between three different forms of data transfer:</p>

<ul>
<li><strong>Messages</strong> are information with well-defined boundaries, such as short text or small serialized objects.</li>
<li><strong>Streams</strong> are open channels of information used to continuously transfer data like audio, video, or real-time sensor events.</li>
<li><strong>Resources</strong> are files like images, movies, or documents.</li>
</ul>

<h3>Messages</h3>

<p>Messages are sent with <code>-sendData:toPeers:withMode:error:</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">message</span> <span class="o">=</span> <span class="s">@&quot;Hello, World!&quot;</span><span class="p">;</span>
<span class="n">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">message</span> <span class="n">dataUsingEncoding</span><span class="o">:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
<span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">session</span> <span class="n">sendData</span><span class="o">:</span><span class="n">data</span>
                    <span class="nl">toPeers:</span><span class="n">peers</span>
                   <span class="nl">withMode:</span><span class="n">MCSessionSendDataReliable</span>
                      <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;[Error] %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<hr>

<p>Messages are received through the <code>MCSessionDelegate</code> method <code>-sessionDidReceiveData:fromPeer:</code>. Here&#39;s how one would decode the message sent in the previous code example:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#pragma mark - MCSessionDelegate</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">session:</span><span class="p">(</span><span class="n">MCSession</span> <span class="o">*</span><span class="p">)</span><span class="nv">session</span>
 <span class="nl">didReceiveData:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span>
       <span class="nl">fromPeer:</span><span class="p">(</span><span class="n">MCPeerID</span> <span class="o">*</span><span class="p">)</span><span class="nv">peerID</span>
<span class="p">{</span>
    <span class="n">NSString</span> <span class="o">*</span><span class="n">message</span> <span class="o">=</span>
        <span class="p">[[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithData</span><span class="o">:</span><span class="n">data</span>
                              <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">message</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>Another approach would be to send <code>NSKeyedArchiver</code>-encoded objects:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="kt">id</span> <span class="o">&lt;</span><span class="n">NSSecureCoding</span><span class="o">&gt;</span> <span class="n">object</span> <span class="o">=</span> <span class="c1">// ...;</span>
<span class="n">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSKeyedArchiver</span> <span class="n">archivedDataWithRootObject</span><span class="o">:</span><span class="n">object</span><span class="p">];</span>
<span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">session</span> <span class="n">sendData</span><span class="o">:</span><span class="n">data</span>
                    <span class="nl">toPeers:</span><span class="n">peers</span>
                   <span class="nl">withMode:</span><span class="n">MCSessionSendDataReliable</span>
                      <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;[Error] %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#pragma mark - MCSessionDelegate</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">session:</span><span class="p">(</span><span class="n">MCSession</span> <span class="o">*</span><span class="p">)</span><span class="nv">session</span>
 <span class="nl">didReceiveData:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="nv">data</span>
       <span class="nl">fromPeer:</span><span class="p">(</span><span class="n">MCPeerID</span> <span class="o">*</span><span class="p">)</span><span class="nv">peerID</span>
<span class="p">{</span>
    <span class="n">NSKeyedUnarchiver</span> <span class="o">*</span><span class="n">unarchiver</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSKeyedUnarchiver</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initForReadingWithData</span><span class="o">:</span><span class="n">data</span><span class="p">];</span>
    <span class="n">unarchiver</span><span class="p">.</span><span class="n">requiresSecureCoding</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
    <span class="kt">id</span> <span class="n">object</span> <span class="o">=</span> <span class="p">[</span><span class="n">unarchiver</span> <span class="n">decodeObject</span><span class="p">];</span>
    <span class="p">[</span><span class="n">unarchiver</span> <span class="n">finishDecoding</span><span class="p">];</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">object</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<blockquote>
<p>In order to guard against object substitution attacks, it is important to set <code>requiresSecureCoding</code> to <code>YES</code>, such that an exception is thrown if the root object class does not conform to <code>&lt;NSSecureCoding&gt;</code>.  For more information, see the [NSHipster article on <a href="http://nshipster.com/nssecurecoding/">NSSecureCoding</a>.</p>
</blockquote>

<h3>Streams</h3>

<p>Streams are created with <code>-startStreamWithName:toPeer:</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSOutputStream</span> <span class="o">*</span><span class="n">outputStream</span> <span class="o">=</span>
    <span class="p">[</span><span class="n">session</span> <span class="n">startStreamWithName</span><span class="o">:</span><span class="n">name</span>
                          <span class="nl">toPeer:</span><span class="n">peer</span><span class="p">];</span>

<span class="n">stream</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
<span class="p">[</span><span class="n">stream</span> <span class="n">scheduleInRunLoop</span><span class="o">:</span><span class="p">[</span><span class="n">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">]</span>
                <span class="nl">forMode:</span><span class="n">NSDefaultRunLoopMode</span><span class="p">];</span>
<span class="p">[</span><span class="n">stream</span> <span class="n">open</span><span class="p">];</span>

<span class="c1">// ...</span>
</code></pre></div>
<hr>

<p>Streams are received by the <code>MCSessionDelegate</code> with <code>-session:didReceiveStream:withName:fromPeer:</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#pragma mark - MCSessionDelegate</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">session:</span><span class="p">(</span><span class="n">MCSession</span> <span class="o">*</span><span class="p">)</span><span class="nv">session</span>
<span class="nl">didReceiveStream:</span><span class="p">(</span><span class="n">NSInputStream</span> <span class="o">*</span><span class="p">)</span><span class="nv">stream</span>
       <span class="nl">withName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">streamName</span>
       <span class="nl">fromPeer:</span><span class="p">(</span><span class="n">MCPeerID</span> <span class="o">*</span><span class="p">)</span><span class="nv">peerID</span>
<span class="p">{</span>
    <span class="n">stream</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
    <span class="p">[</span><span class="n">stream</span> <span class="n">scheduleInRunLoop</span><span class="o">:</span><span class="p">[</span><span class="n">NSRunLoop</span> <span class="n">mainRunLoop</span><span class="p">]</span>
                      <span class="nl">forMode:</span><span class="n">NSDefaultRunLoopMode</span><span class="p">];</span>
    <span class="p">[</span><span class="n">stream</span> <span class="n">open</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>Both the input and output streams must be scheduled and opened before they can be used. Once that&#39;s done, streams can be read from and written to just like any other bound pair.</p>

<h3>Resources</h3>

<p>Resources are sent with <code>sendResourceAtURL:withName:toPeer:withCompletionHandler:</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSURL</span> <span class="o">*</span><span class="n">fileURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="n">fileURLWithPath</span><span class="o">:</span><span class="s">@&quot;path/to/resource&quot;</span><span class="p">];</span>
<span class="n">NSProgress</span> <span class="o">*</span><span class="n">progress</span> <span class="o">=</span>
    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">session</span> <span class="n">sendResourceAtURL</span><span class="o">:</span><span class="n">fileURL</span>
                           <span class="nl">withName:</span><span class="p">[</span><span class="n">fileURL</span> <span class="n">lastPathComponent</span><span class="p">]</span>
                             <span class="nl">toPeer:</span><span class="n">peer</span>
                  <span class="nl">withCompletionHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;[Error] %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
<span class="p">}];</span>
</code></pre></div>
<p>The returned <code>NSProgress</code> object can be <a href="http://nshipster.com/key-value-observing/">Key-Value Observed</a> to monitor progress of the file transfer, as well as provide a cancellation handler, through the <code>-cancel</code> method.</p>

<hr>

<p>Receiving resources happens across two methods in <code>MCSessionDelegate</code>: <code>-session:didStartReceivingResourceWithName:fromPeer:withProgress:</code> &amp; <code>-session:didFinishReceivingResourceWithName:fromPeer:atURL:withError:</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#pragma mark - MCSessionDelegate</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">session:</span><span class="p">(</span><span class="n">MCSession</span> <span class="o">*</span><span class="p">)</span><span class="nv">session</span>
<span class="nl">didStartReceivingResourceWithName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">resourceName</span>
       <span class="nl">fromPeer:</span><span class="p">(</span><span class="n">MCPeerID</span> <span class="o">*</span><span class="p">)</span><span class="nv">peerID</span>
   <span class="nl">withProgress:</span><span class="p">(</span><span class="n">NSProgress</span> <span class="o">*</span><span class="p">)</span><span class="nv">progress</span>
<span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">session:</span><span class="p">(</span><span class="n">MCSession</span> <span class="o">*</span><span class="p">)</span><span class="nv">session</span>
<span class="nl">didFinishReceivingResourceWithName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">resourceName</span>
       <span class="nl">fromPeer:</span><span class="p">(</span><span class="n">MCPeerID</span> <span class="o">*</span><span class="p">)</span><span class="nv">peerID</span>
          <span class="nl">atURL:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">localURL</span>
      <span class="nl">withError:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span>
<span class="p">{</span>
    <span class="n">NSURL</span> <span class="o">*</span><span class="n">destinationURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="n">fileURLWithPath</span><span class="o">:</span><span class="s">@&quot;/path/to/destination&quot;</span><span class="p">];</span>
    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="n">moveItemAtURL</span><span class="o">:</span><span class="n">localURL</span>
                                                 <span class="nl">toURL:</span><span class="n">destinationURL</span>
                                                 <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;[Error] %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Again, the <code>NSProgress</code> parameter in <code>-session:didStartReceivingResourceWithName:fromPeer:withProgress:</code> allows the receiving peer to monitor the file transfer progress. In <code>-session:didFinishReceivingResourceWithName:fromPeer:atURL:withError:</code>, it is the responsibility of the delegate to move the file at the temporary <code>localURL</code> to a permanent location.</p>

<hr>

<p>Multipeer Connectivity is a ground-breaking API, whose value is only just starting to be fully understood. Although full support for features like AirDrop are currently limited to latest-gen devices, you should expect to see this kind of functionality become expected behavior.</p>

<p>As you look forward to the possibilities of the new year ahead, get your head out of the cloud, and start to consider the incredible possibilities around you.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 09 Dec 2013 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:44:"http://nshipster.com/multipeer-connectivity/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:44:"http://nshipster.com/multipeer-connectivity/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:17;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:51:"NSNotification &amp;&lt;br/&gt;NSNotificationCenter";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:14551:"<p>Any idea is inextricably linked to how it&#39;s communicated. A medium defines the form and scale of significance in such a way to shape the very meaning of an idea. Very truly, the medium is the message.</p>

<p>One of the first lessons of socialization is to know one&#39;s audience. Sometimes communication is one-to-one, like an in-person conversation, while at other times, such as a television broadcast, it&#39;s one-to-many. Not being able to distinguish between these two circumstances leads to awkward situations.</p>

<p>This is as true of humans as it is within a computer process. In Cocoa, there are a number of approaches to communicating between objects, with different characteristics of intimacy and coupling:</p>

<table id="notification-center-coupling">
    <thead>
        <tr>
            <td class="empty" colspan="2" rowspan="2"></td>
            <th colspan="2">Audience</th>
        </tr>
        <tr>
            <th>Intimate (One-to-One)</th>
            <th>Broadcast (One-to-Many)</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <th rowspan="2">Coupling</th>
            <th>Loose</th>
            <td>
                <ul>
                    <li>Target-Action</li>
                    <li>Delegate</li>
                    <li>Callbacks</li>
                </ul>
            </td>
            <td>
                <ul>
                    <li><tt>Notifications</tt></li>
                </ul>
            </td>
        </tr>
        <tr>
            <th>Strong</th>
            <td>
                <ul>
                    <li>Direct Method Invocation</li>
                </ul>
            </td>
            <td>
                <ul>
                    <li>Key-Value Observing</li>
                </ul>
            </td>
        </tr>
    </tbody>
</table>

<p>We&#39;ve discussed the importance of how events are communicated in APIs previously in our <a href="http://nshipster.com/key-value-observing/">article on Key-Value Observing</a>. This week, we&#39;ll expand our look at the available options, with <code>NSNotificationCenter</code> &amp; <code>NSNotification</code>.</p>

<hr>

<p><code>NSNotificationCenter</code> provides a centralized hub through which any part of an application may notify and be notified of changes from any other part of the application. Observers register with a notification center to respond to particular events with a specified action. Each time an event occurs, the notification goes through its dispatch table, and messages any registered observers for that event.</p>

<blockquote>
<p>Each running Cocoa program manages its own default notification center, so it&#39;s unusual for a new notification center to be instantiated separately.</p>
</blockquote>

<p>Each <code>NSNotification</code> object has a <code>name</code>, with additional context optionally provided by an associated <code>object</code> and <code>userInfo</code> dictionary.</p>

<p>For example, <code>UITextField</code> posts an <code>NSNotification</code> with the name <code>UITextFieldTextDidChangeNotification</code> each time its text changes. The object associated with that notification is the text field itself. In the case of <code>UIKeyboardWillShowNotification</code>, frame positioning and animation timing are passed in <code>userInfo</code>, while the notification&#39;s associated <code>object</code> is <code>nil</code>.</p>

<h3>Adding Observers</h3>

<p>All sorts of notifications are constantly passing through <code>NSNotificationCenter</code>.<sup>*</sup>  But like a tree falling in the woods, a notification is moot unless there&#39;s something listening for it.</p>

<p>The traditional way to add an observer is <code>–addObserver:selector:name:object:</code>, in which an object (usually <code>self</code>) adds itself to have the specified selector performed when a matching notification is posted.</p>

<p>The modern, block-based API for adding notification observers is <code>–addObserverForName:object:queue:usingBlock:</code>. Instead of registering an existing object as an observer for a notification, this method creates its own anonymous object to be the observer, which performs a block on the specified queue (or the calling thread, if <code>nil</code>) when a matching notification is posted. Unlike its similarly named <code>@selector</code>-based counterpart, this method actually returns the constructed observer object, which is necessary for unregistering the observer, as discussed in the next section.</p>

<blockquote>
<p>Contrary to a recent article claiming otherwise, <code>–addObserverForName:object:queue:usingBlock:</code> should <em>not</em> be considered harmful. It&#39;s perfectly safe and suitable for use in applications. Just make sure to understand memory management rules when referencing <code>self</code> in blocks. Any concerns in this respect are the same as for any other block-based API.</p>
</blockquote>

<p>The <code>name</code> and <code>object</code> parameters of both methods are used to decide whether the criteria of a posted notification match the observer. If <code>name</code> is set, only notifications with that name will trigger, but if <code>nil</code> is set, then <em>all</em> names will match. The same is true of <code>object</code>. So, if both <code>name</code> and <code>object</code> are set, only notifications with that name <em>and</em> the specified object will trigger. However, if both <code>name</code> and <code>object</code> are <code>nil</code>, then <em>all</em> notifications posted will trigger.</p>

<blockquote>
<p><sup>*</sup>See for yourself! An ordinary iOS app fires dozens of notifications just in the first second of being launched—many that you&#39;ve probably never heard of before, nor will ever have to think about again.</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSNotificationCenter</span> <span class="o">*</span><span class="n">center</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">];</span>
<span class="p">[</span><span class="n">center</span> <span class="n">addObserverForName</span><span class="o">:</span><span class="nb">nil</span>
                    <span class="nl">object:</span><span class="nb">nil</span>
                     <span class="nl">queue:</span><span class="nb">nil</span>
                <span class="nl">usingBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="n">notification</span><span class="p">)</span>
<span class="p">{</span>
     <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">notification</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
<span class="p">}];</span>
</code></pre></div>
<h3>Removing Observers</h3>

<p>It&#39;s important for objects to remove observers before they&#39;re deallocated, in order to prevent further messages from being sent.</p>

<p>There are two methods for removing observers: <code>-removeObserver:</code> and <code>-removeObserver:name:object:</code>. Again, just as with adding observers, <code>name</code> and <code>object</code> are used to define scope. <code>-removeObserver:</code>, or <code>-removeObserver:name:object</code> with <code>nil</code> for both parameters, will remove the observer from the notification center dispatch table entirely, while specifying parameters for <code>-removeObserver:name:object:</code> will only remove the observer for registrations with that name and/or object.</p>

<h3>Posting Notifications</h3>

<p>Of course, consuming is but one side of the story. In addition to subscribing to system-provided notifications, applications may want to publish and subscribe to their own.</p>

<p>Notifications are created with <code>+notificationWithName:object:userInfo:</code>.</p>

<p>Notification names are generally defined as string constants. Like any string constant, it should be declared <code>extern</code> in a public interface, and defined privately in the corresponding implementation. It doesn&#39;t matter too much what a notification name&#39;s value is defined to be; the name of the variable itself is commonplace, but a reverse-DNS identifier is also a classy choice. So long as notification names are unique (or explicitly aliased), everything will work as expected.</p>

<p>Keys for <code>userInfo</code> should likewise be defined as string constants. It&#39;s important to clearly document the expected kinds of values for each key, since the compiler can&#39;t enforce constraints on dictionaries the same way it can for an object.</p>

<h4>Foo.h</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">extern</span> <span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">XXFooDidBarNotification</span><span class="p">;</span>
</code></pre></div>
<h4>Foo.m</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">XXFooDidBarNotification</span> <span class="o">=</span> <span class="s">@&quot;XXFooDidBarNotification&quot;</span><span class="p">;</span>
</code></pre></div>
<p>Notifications are posted with <code>–postNotificationName:object:userInfo:</code> or its convenience method <code>–postNotificationName:object:</code>, which passes <code>nil</code> for <code>userInfo</code>. <code>–postNotification:</code> is also available, but it&#39;s generally preferable to have the notification object creation handled by the method itself.</p>

<p>Recall from the previous section how <code>name</code> and <code>object</code> act to scope notification dispatch. Developers are advised to be consistent in how objects are posted with notifications, and to have this behavior documented clearly in the public interface.</p>

<p>Since notification dispatch happens on the posting thread, it may be necessary to <code>dispatch_async</code> to <code>dispatch_get_main_queue()</code> so that a notification is handled on the main thread. This is not usually necessary, but it&#39;s important to keep in mind.</p>

<h2>KVO != NSNotificationCenter</h2>

<p>Something that often slips up developers is how similar the method signatures for <a href="http://nshipster.com/key-value-observing/">Key-Value Observing</a> are to those of <code>NSNotificationCenter</code>:</p>

<h4>Key-Value Observing</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addObserver:</span><span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nv">observer</span>
         <span class="nl">forKeyPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyPath</span>
            <span class="nl">options:</span><span class="p">(</span><span class="n">NSKeyValueObservingOptions</span><span class="p">)</span><span class="nv">options</span>
            <span class="nl">context:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span>
</code></pre></div>
<h4>NSNotificationCenter</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addObserver:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">notificationObserver</span>
           <span class="nl">selector:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">notificationSelector</span>
               <span class="nl">name:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">notificationName</span>
             <span class="nl">object:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">notificationSender</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">addObserverForName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span>
                  <span class="nl">object:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj</span>
                   <span class="nl">queue:</span><span class="p">(</span><span class="n">NSOperationQueue</span> <span class="o">*</span><span class="p">)</span><span class="nv">queue</span>
              <span class="nl">usingBlock:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">))</span><span class="nv">block</span>
</code></pre></div>
<p><strong>Key-Value Observing adds observers for keypaths, while NSNotificationCenter adds observers for notifications.</strong> Keep this distinction clear in your mind, and proceed to use both APIs confidently.</p>

<hr>

<p>Notifications are an essential tool for communicating across an application. Because of its distributed, low-coupling characteristics, notifications are well-suited to a wide range of architectures. APIs would do well to add them for any significant events that might benefit from greater circulation—the performance overhead for this sort of chattiness is negligible.</p>

<p>As it were, thinking about notifications in your own life can do wonders for improving your relationships with others. Communicating intent and giving sufficient notice are the trappings of a mature, grounded individual.</p>

<p>...but don&#39;t take that advice too far and use it to justify life-streaming, or anything. Seriously, stop taking pictures, and just eat your damn food, <em>amiright</em>?</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 02 Dec 2013 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:61:"http://nshipster.com/nsnotification-and-nsnotificationcenter/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:61:"http://nshipster.com/nsnotification-and-nsnotificationcenter/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:18;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:13:"NSFileManager";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:27994:"<p><code>NSFileManager</code> is Foundation&#39;s high-level API for working with file systems. It abstracts Unix and Finder internals, providing a convenient way to create, read, move, copy, and delete files &amp; directories on local or networked drives, as well as iCloud ubiquitous containers.</p>

<p>File systems are a complex topic, with decades of history, vestigial complexities, and idiosyncrasies, and is well outside the scope of a single article. And since most applications don&#39;t often interact with the file system much beyond simple file operations, one can get away with only knowing the basics.</p>

<p>What follows are some code samples for your copy-pasting pleasure. Use them as a foundation for understanding how to adjust parameters to your particular use case:</p>

<h2>Common Tasks</h2>

<blockquote>
<p>Throughout the code samples is the magical incantation <code>NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)</code>. This may be tied with KVO as one of the worst APIs in Cocoa. Just know that this returns an array containing the user documents directory as the first object. Thank goodness for the inclusion of <code>NSArray -firstObject</code>.</p>
</blockquote>

<h3>Determining If A File Exists</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSFileManager</span> <span class="o">*</span><span class="n">fileManager</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">];</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">documentsPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="nb">YES</span><span class="p">)</span> <span class="n">firstObject</span><span class="p">];</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">filePath</span> <span class="o">=</span> <span class="p">[</span><span class="n">documentsPath</span> <span class="n">stringByAppendingPathComponent</span><span class="o">:</span><span class="s">@&quot;file.txt&quot;</span><span class="p">];</span>
<span class="kt">BOOL</span> <span class="n">fileExists</span> <span class="o">=</span> <span class="p">[</span><span class="n">fileManager</span> <span class="n">fileExistsAtPath</span><span class="o">:</span><span class="n">filePath</span><span class="p">];</span>
</code></pre></div>
<h3>Listing All Files In A Directory</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSFileManager</span> <span class="o">*</span><span class="n">fileManager</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">];</span>
<span class="n">NSURL</span> <span class="o">*</span><span class="n">bundleURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">bundleURL</span><span class="p">];</span>
<span class="n">NSArray</span> <span class="o">*</span><span class="n">contents</span> <span class="o">=</span> <span class="p">[</span><span class="n">fileManager</span> <span class="n">contentsOfDirectoryAtURL</span><span class="o">:</span><span class="n">bundleURL</span>
                               <span class="nl">includingPropertiesForKeys:</span><span class="p">@[]</span>
                                                  <span class="nl">options:</span><span class="n">NSDirectoryEnumerationSkipsHiddenFiles</span>
                                                    <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>

<span class="n">NSPredicate</span> <span class="o">*</span><span class="n">predicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="n">predicateWithFormat</span><span class="o">:</span><span class="s">@&quot;pathExtension == &#39;png&#39;&quot;</span><span class="p">];</span>
<span class="k">for</span> <span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="n">fileURL</span> <span class="k">in</span> <span class="p">[</span><span class="n">contents</span> <span class="n">filteredArrayUsingPredicate</span><span class="o">:</span><span class="n">predicate</span><span class="p">])</span> <span class="p">{</span>
    <span class="c1">// Enumerate each .png file in directory</span>
<span class="p">}</span>
</code></pre></div>
<h2>Recursively Enumerating Files In A Directory</h2>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSFileManager</span> <span class="o">*</span><span class="n">fileManager</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">];</span>
<span class="n">NSURL</span> <span class="o">*</span><span class="n">bundleURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">bundleURL</span><span class="p">];</span>
<span class="n">NSDirectoryEnumerator</span> <span class="o">*</span><span class="n">enumerator</span> <span class="o">=</span> <span class="p">[</span><span class="n">fileManager</span> <span class="n">enumeratorAtURL</span><span class="o">:</span><span class="n">bundleURL</span>
                                      <span class="nl">includingPropertiesForKeys:</span><span class="p">@[</span><span class="n">NSURLNameKey</span><span class="p">,</span> <span class="n">NSURLIsDirectoryKey</span><span class="p">]</span>
                                                         <span class="nl">options:</span><span class="n">NSDirectoryEnumerationSkipsHiddenFiles</span>
                                                    <span class="nl">errorHandler:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="n">url</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;[Error] %@ (%@)&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="n">url</span><span class="p">);</span>
<span class="p">}];</span>

<span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">mutableFileURLs</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
<span class="k">for</span> <span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="n">fileURL</span> <span class="k">in</span> <span class="n">enumerator</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">NSString</span> <span class="o">*</span><span class="n">filename</span><span class="p">;</span>
    <span class="p">[</span><span class="n">fileURL</span> <span class="n">getResourceValue</span><span class="o">:&amp;</span><span class="n">filename</span> <span class="n">forKey</span><span class="o">:</span><span class="n">NSURLNameKey</span> <span class="n">error</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span>

    <span class="n">NSNumber</span> <span class="o">*</span><span class="n">isDirectory</span><span class="p">;</span>
    <span class="p">[</span><span class="n">fileURL</span> <span class="n">getResourceValue</span><span class="o">:&amp;</span><span class="n">isDirectory</span> <span class="n">forKey</span><span class="o">:</span><span class="n">NSURLIsDirectoryKey</span> <span class="n">error</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span>

    <span class="c1">// Skip directories with &#39;_&#39; prefix, for example</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">filename</span> <span class="n">hasPrefix</span><span class="o">:</span><span class="s">@&quot;_&quot;</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">isDirectory</span> <span class="n">boolValue</span><span class="p">])</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">enumerator</span> <span class="n">skipDescendants</span><span class="p">];</span>
        <span class="k">continue</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">isDirectory</span> <span class="n">boolValue</span><span class="p">])</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">mutableFileURLs</span> <span class="n">addObject</span><span class="o">:</span><span class="n">fileURL</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h3>Creating a Directory</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSFileManager</span> <span class="o">*</span><span class="n">fileManager</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">];</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">documentsPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="nb">YES</span><span class="p">)</span> <span class="n">firstObject</span><span class="p">];</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">imagesPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">documentsPath</span> <span class="n">stringByAppendingPathComponent</span><span class="o">:</span><span class="s">@&quot;images&quot;</span><span class="p">];</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">fileManager</span> <span class="n">fileExistsAtPath</span><span class="o">:</span><span class="n">imagesPath</span><span class="p">])</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">fileManager</span> <span class="n">createDirectoryAtPath</span><span class="o">:</span><span class="n">imagesPath</span> <span class="n">withIntermediateDirectories</span><span class="o">:</span><span class="nb">NO</span> <span class="n">attributes</span><span class="o">:</span><span class="nb">nil</span> <span class="n">error</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<h3>Deleting a File</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSFileManager</span> <span class="o">*</span><span class="n">fileManager</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">];</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">documentsPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="nb">YES</span><span class="p">)</span> <span class="n">firstObject</span><span class="p">];</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">filePath</span> <span class="o">=</span> <span class="p">[</span><span class="n">documentsPath</span> <span class="n">stringByAppendingPathComponent</span><span class="o">:</span><span class="s">@&quot;image.png&quot;</span><span class="p">];</span>
<span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">fileManager</span> <span class="n">removeItemAtPath</span><span class="o">:</span><span class="n">filePath</span> <span class="n">error</span><span class="o">:&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;[Error] %@ (%@)&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="n">filePath</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<h3>Determining the Creation Date of a File</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSFileManager</span> <span class="o">*</span><span class="n">fileManager</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">];</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">documentsPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="nb">YES</span><span class="p">)</span> <span class="n">firstObject</span><span class="p">];</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">filePath</span> <span class="o">=</span> <span class="p">[</span><span class="n">documentsPath</span> <span class="n">stringByAppendingPathComponent</span><span class="o">:</span><span class="s">@&quot;Document.pages&quot;</span><span class="p">];</span>

<span class="n">NSDate</span> <span class="o">*</span><span class="n">creationDate</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
<span class="k">if</span> <span class="p">([</span><span class="n">fileManager</span> <span class="n">fileExistsAtPath</span><span class="o">:</span><span class="n">filePath</span><span class="p">])</span> <span class="p">{</span>
    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">attributes</span> <span class="o">=</span> <span class="p">[</span><span class="n">fileManager</span> <span class="n">attributesOfItemAtPath</span><span class="o">:</span><span class="n">filePath</span> <span class="n">error</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span>
    <span class="n">creationDate</span> <span class="o">=</span> <span class="n">attributes</span><span class="p">[</span><span class="n">NSFileCreationDate</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>There are a number of file attributes that are made accessible through <code>NSFileManager</code>, which can be fetched with <code>-attributesOfItemAtPath:error:</code>, and other methods:</p>

<h4>File Attribute Keys</h4>

<blockquote>
<ul>
<li><code>NSFileAppendOnly</code>: The key in a file attribute dictionary whose value indicates whether the file is read-only.</li>
<li><code>NSFileBusy</code>: The key in a file attribute dictionary whose value indicates whether the file is busy.</li>
<li><code>NSFileCreationDate</code>: The key in a file attribute dictionary whose value indicates the file&#39;s creation date.</li>
<li><code>NSFileOwnerAccountName</code>: The key in a file attribute dictionary whose value indicates the name of the file&#39;s owner.</li>
<li><code>NSFileGroupOwnerAccountName</code>: The key in a file attribute dictionary whose value indicates the group name of the file&#39;s owner.</li>
<li><code>NSFileDeviceIdentifier</code>: The key in a file attribute dictionary whose value indicates the identifier for the device on which the file resides.</li>
<li><code>NSFileExtensionHidden</code>: The key in a file attribute dictionary whose value indicates whether the file&#39;s extension is hidden.</li>
<li><code>NSFileGroupOwnerAccountID</code>: The key in a file attribute dictionary whose value indicates the file&#39;s group ID.</li>
<li><code>NSFileHFSCreatorCode</code>: The key in a file attribute dictionary whose value indicates the file&#39;s HFS creator code.</li>
<li><code>NSFileHFSTypeCode</code>: The key in a file attribute dictionary whose value indicates the file&#39;s HFS type code.</li>
<li><code>NSFileImmutable</code>: The key in a file attribute dictionary whose value indicates whether the file is mutable.</li>
<li><code>NSFileModificationDate</code>: The key in a file attribute dictionary whose value indicates the file&#39;s last modified date.</li>
<li><code>NSFileOwnerAccountID</code>: The key in a file attribute dictionary whose value indicates the file&#39;s owner&#39;s account ID.</li>
<li><code>NSFilePosixPermissions</code>: The key in a file attribute dictionary whose value indicates the file&#39;s Posix permissions.</li>
<li><code>NSFileReferenceCount</code>: The key in a file attribute dictionary whose value indicates the file&#39;s reference count.</li>
<li><code>NSFileSize</code>: The key in a file attribute dictionary whose value indicates the file&#39;s size in bytes.</li>
<li><code>NSFileSystemFileNumber</code>: The key in a file attribute dictionary whose value indicates the file&#39;s filesystem file number.</li>
<li><p><code>NSFileType</code>: The key in a file attribute dictionary whose value indicates the file&#39;s type.</p></li>
<li><p><code>NSDirectoryEnumerationSkipsSubdirectoryDescendants</code>: Perform a shallow enumeration; do not descend into directories.</p></li>
<li><p><code>NSDirectoryEnumerationSkipsPackageDescendants</code>: Do not descend into packages.</p></li>
<li><p><code>NSDirectoryEnumerationSkipsHiddenFiles</code>: Do not enumerate hidden files.</p></li>
</ul>
</blockquote>

<h2>NSFileManagerDelegate</h2>

<p><code>NSFileManager</code> may optionally set a delegate to verify that it should perform a particular file operation. This allows the business logic of, for instance, which files to protect from deletion, to be factored out of the controller.</p>

<p>There are four kinds of methods in the <code>&lt;NSFileManagerDelegate&gt;</code> protocol, each with a variation for working with paths, as well as methods for error handling:</p>

<ul>
<li><code>-fileManager:shouldMoveItemAtURL:toURL:</code></li>
<li><code>-fileManager:shouldCopyItemAtURL:toURL:</code></li>
<li><code>-fileManager:shouldRemoveItemAtURL:</code></li>
<li><code>-fileManager:shouldLinkItemAtURL:toURL:</code></li>
</ul>

<p>If you were wondering when you might <code>alloc init</code> your own <code>NSFileManager</code> rather than using the shared instance, this is it. As per the documentation:</p>

<blockquote>
<p>If you use a delegate to receive notifications about the status of move, copy, remove, and link operations, you should create a unique instance of the file manager object, assign your delegate to that object, and use that file manager to initiate your operations.</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSFileManager</span> <span class="o">*</span><span class="n">fileManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="n">fileManager</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">delegate</span><span class="p">;</span>

<span class="n">NSURL</span> <span class="o">*</span><span class="n">bundleURL</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">bundleURL</span><span class="p">];</span>
<span class="n">NSArray</span> <span class="o">*</span><span class="n">contents</span> <span class="o">=</span> <span class="p">[</span><span class="n">fileManager</span> <span class="n">contentsOfDirectoryAtURL</span><span class="o">:</span><span class="n">bundleURL</span>
                               <span class="nl">includingPropertiesForKeys:</span><span class="p">@[]</span>
                                                  <span class="nl">options:</span><span class="n">NSDirectoryEnumerationSkipsHiddenFiles</span>
                                                    <span class="nl">error:</span><span class="nb">nil</span><span class="p">];</span>

<span class="k">for</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">filePath</span> <span class="k">in</span> <span class="n">contents</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">fileManager</span> <span class="n">removeItemAtPath</span><span class="o">:</span><span class="n">filePath</span> <span class="n">error</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<h4>CustomFileManagerDelegate.m</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#pragma mark - NSFileManagerDelegate</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">fileManager:</span><span class="p">(</span><span class="n">NSFileManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">fileManager</span>
<span class="nl">shouldRemoveItemAtURL:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">URL</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="o">!</span><span class="p">[[[</span><span class="n">URL</span> <span class="n">lastPathComponent</span><span class="p">]</span> <span class="n">pathExtension</span><span class="p">]</span> <span class="n">isEqualToString</span><span class="o">:</span><span class="s">@&quot;pdf&quot;</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<h2>Ubiquitous Storage</h2>

<p>Documents can also be moved to iCloud. If you guessed that this would be anything but straight forward, you&#39;d be 100% correct.</p>

<p>This is another occasion when you&#39;d <code>alloc init</code> your own <code>NSFileManager</code> rather than using the shared instance. Because <code>URLForUbiquityContainerIdentifier:</code> and <code>setUbiquitous:itemAtURL:destinationURL:error:</code> are blocking calls, this entire operation needs to be dispatched to a background queue.</p>

<h3>Moving an Item to Ubiquitous Storage</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="n">DISPATCH_QUEUE_PRIORITY_BACKGROUND</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="o">^</span><span class="p">{</span>
    <span class="n">NSFileManager</span> <span class="o">*</span><span class="n">fileManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
    <span class="n">NSString</span> <span class="o">*</span><span class="n">documentsPath</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="nb">YES</span><span class="p">)</span> <span class="n">firstObject</span><span class="p">];</span>
    <span class="n">NSURL</span> <span class="o">*</span><span class="n">fileURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="n">fileURLWithPath</span><span class="o">:</span><span class="p">[</span><span class="n">documentsPath</span> <span class="n">stringByAppendingPathComponent</span><span class="o">:</span><span class="s">@&quot;Document.pages&quot;</span><span class="p">]];</span>

    <span class="c1">// Defaults to first listed in entitlements when `nil`; should replace with real identifier</span>
    <span class="n">NSString</span> <span class="o">*</span><span class="n">identifier</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>

    <span class="n">NSURL</span> <span class="o">*</span><span class="n">ubiquitousContainerURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">fileManager</span> <span class="n">URLForUbiquityContainerIdentifier</span><span class="o">:</span><span class="n">identifier</span><span class="p">];</span>
    <span class="n">NSURL</span> <span class="o">*</span><span class="n">ubiquitousFileURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">ubiquitousContainerURL</span> <span class="n">URLByAppendingPathComponent</span><span class="o">:</span><span class="s">@&quot;Document.pages&quot;</span><span class="p">];</span>

    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
    <span class="kt">BOOL</span> <span class="n">success</span> <span class="o">=</span> <span class="p">[</span><span class="n">fileManager</span> <span class="n">setUbiquitous</span><span class="o">:</span><span class="nb">YES</span>
                                    <span class="nl">itemAtURL:</span><span class="n">fileURL</span>
                               <span class="nl">destinationURL:</span><span class="n">ubiquitousFileURL</span>
                                        <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">success</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;[Error] %@ (%@) (%@)&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">,</span> <span class="n">fileURL</span><span class="p">,</span> <span class="n">ubiquitousFileURL</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre></div>
<blockquote>
<p>You can find more information about ubiquitous document storage in Apple&#39;s &quot;iCloud File Management&quot; document.</p>
</blockquote>

<hr>

<p>There&#39;s a lot to know about file systems, but as an app developer, it&#39;s mostly an academic exercise. Now don&#39;t get me wrong—academic exercises are great! But they don&#39;t ship code. <code>NSFileManager</code> allows you to ignore most of the subtlety of all of this and get things done.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 18 Nov 2013 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:35:"http://nshipster.com/nsfilemanager/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:35:"http://nshipster.com/nsfilemanager/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:19;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:11:"NSFormatter";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:16523:"<p>Conversion is the tireless errand of software development. Most programming tasks boil down to some variation of transforming data into something more useful.</p>

<p>In the case of user-facing software, converting data into human-readable form is an essential task, and a complex one at that. A user&#39;s preferred language, locale, calendar, or currency can all factor into how information should be displayed, as can other constraints, such as a label&#39;s dimensions.</p>

<p>All of this is to say that sending <code>-description</code> to an object just isn&#39;t going to cut it in most circumstances. Even <code>+stringWithFormat:</code> is going to ultimately disappoint. No, the real tool for this job is <code>NSFormatter</code>. </p>

<hr>

<p><code>NSFormatter</code> is an abstract class for transforming data into a textual representation. It can also interpret valid textual representations back into data.</p>

<p>Its origins trace back to <code>NSCell</code>, which is used to display information and accept user input in tables, form fields, and other views in AppKit. Much of the API design of NSFormatter reflects this.</p>

<p>Foundation provides two concrete subclasses for <code>NSFormatter</code>: <code>NSNumberFormatter</code> and <code>NSDateFormatter</code>. As some of the oldest members of the Foundation framework, these classes are astonishingly well-suited to their respective domains, in that way only decade-old software can.</p>

<h2>NSNumberFormatter</h2>

<p><code>NSNumberFormatter</code> handles every aspect of number formatting imaginable, from mathematical and scientific notation, to currencies and percentages. Nearly everything about the formatter can be customized, whether it&#39;s the currency symbol, grouping separator, number of significant digits, rounding behavior, fractions, character for infinity, string representation for <code>0</code>, or maximum / minimum values. It can even write out numbers in several languages!</p>

<h3>Number Styles</h3>

<p>When using an <code>NSNumberFormatter</code>, the first order of business is to determine what kind of information you&#39;re displaying. Is it a price? Is this a whole number, or should decimal values be shown?</p>

<p><code>NSNumberFormatter</code> can be configured for any one of the following formats, with <code>-setNumberStyle:</code>:</p>

<p>To illustrate the differences between each style, here is how the number <code>12345.6789</code> would be displayed for each: </p>

<blockquote>
<ul>
<li><code>NSNumberFormatterNoStyle</code>: 12346</li>
<li><code>NSNumberFormatterDecimalStyle</code>: 12345.6789</li>
<li><code>NSNumberFormatterCurrencyStyle</code>: $12345.68</li>
<li><code>NSNumberFormatterPercentStyle</code>: 1234567%</li>
<li><code>NSNumberFormatterScientificStyle</code>: 1.23456789E4</li>
<li><code>NSNumberFormatterSpellOutStyle</code>: twelve thousand three hundred forty-five point six seven eight nine</li>
</ul>
</blockquote>

<h3>Locale Awareness</h3>

<p>By default, <code>NSNumberFormatter</code> will format according to the current locale settings, for things like currency symbol ($, £, €, etc.) and whether to use &quot;,&quot; or &quot;.&quot; as the decimal separator.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSNumberFormatter</span> <span class="o">*</span><span class="n">numberFormatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSNumberFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="p">[</span><span class="n">numberFormatter</span> <span class="n">setNumberStyle</span><span class="o">:</span><span class="n">NSNumberFormatterCurrencyStyle</span><span class="p">];</span>

<span class="k">for</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">identifier</span> <span class="k">in</span> <span class="p">@[</span><span class="s">@&quot;en_US&quot;</span><span class="p">,</span> <span class="s">@&quot;fr_FR&quot;</span><span class="p">])</span> <span class="p">{</span>
    <span class="n">numberFormatter</span><span class="p">.</span><span class="n">locale</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSLocale</span> <span class="n">localeWithLocaleIdentifier</span><span class="o">:</span><span class="n">identifier</span><span class="p">];</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@: %@&quot;</span><span class="p">,</span> <span class="n">identifier</span><span class="p">,</span> <span class="p">[</span><span class="n">numberFormatter</span> <span class="n">stringFromNumber</span><span class="o">:</span><span class="p">@(</span><span class="mf">1234.5678</span><span class="p">)]);</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre><code class="text language-text" data-lang="text">en_US: $1,234.57
fr_FR: 1 234,57 €
</code></pre></div>
<blockquote>
<p>All of those settings can be overridden on an individual basis, but for most apps, the best strategy would be deferring to the locale&#39;s default settings.</p>
</blockquote>

<h3>Rounding &amp; Significant Digits</h3>

<p>In order to prevent numbers from getting annoyingly pedantic (<em>&quot;thirty-two point three three, repeating, of course...&quot;</em>), make sure to get a handle on <code>NSNumberFormatter</code>&#39;s rounding behavior.</p>

<p>The easiest way to do this, would be to <code>setUsesSignificantDigits:</code> to <code>YES</code>, and then set minimum and maximum number of significant digits appropriately. For example, a number formatter used for approximate distances in directions, would do well with significant digits to the tenths place for miles or kilometers, but only the ones place for feet or meters.</p>

<p>For anything more advanced, an <code>NSDecimalNumberHandler</code> object can be passed as the <code>roundingBehavior</code> property of a number formatter.</p>

<h2>NSDateFormatter</h2>

<p><code>NSDateFormatter</code> is the be all and end all of getting textual representations of both dates and times.</p>

<h3>Date &amp; Time Styles</h3>

<p>The most important properties for an <code>NSDateFormatter</code> object are its <code>dateStyle</code> and <code>timeStyle</code>. Like <code>-[NSNumberFormatter numberStyle]</code>, these styles provide common preset configurations for common formats. In this case, the various formats are distinguished by their specificity (more specific = longer).</p>

<p>Both properties share a single set of <code>enum</code> values: </p>

<table>
    <thead>
        <tr>
            <th>Style</th>
            <th>Description</th>
            <th colspan="2">Examples</th>
        </tr>
        <tr>
            <th colspan="2"></th>
            <th>Date</th>
            <th>Time</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td><tt>NSDateFormatterNoStyle</tt></td>
            <td>Specifies no style.</td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td><tt>NSDateFormatterShortStyle</tt></td>
            <td>Specifies a short style, typically numeric only.</td>
            <td>11/23/37</td>
            <td>3:30pm</td>
        </tr>
        <tr>
            <td><tt>NSDateFormatterMediumStyle</tt></td>
            <td>Specifies a medium style, typically with abbreviated text.</td>
            <td>Nov 23, 1937</td>
            <td>3:30:32pm</td>
        </tr>
        <tr>
            <td><tt>NSDateFormatterLongStyle</tt></td>
            <td>Specifies a long style, typically with full text.</td>
            <td>November 23, 1937</td>
            <td>3:30:32pm</td>
        </tr>
        <tr>
            <td><tt>NSDateFormatterFullStyle</tt></td>
            <td>Specifies a full style with complete details.</td>
            <td>Tuesday, April 12, 1952 AD</td>
            <td>3:30:42pm PST</td>
        </tr>
    </tbody>
</table>

<p><code>dateStyle</code> and <code>timeStyle</code> are set independently. For example to display just the time, an <code>NSDateFormatter</code> would be configured with a <code>dateStyle</code> of <code>NSDateFormatterNoStyle</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSDateFormatter</span> <span class="o">*</span><span class="n">formatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSDateFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="p">[</span><span class="n">formatter</span> <span class="n">setDateStyle</span><span class="o">:</span><span class="n">NSDateFormatterNoStyle</span><span class="p">];</span>
<span class="p">[</span><span class="n">formatter</span> <span class="n">setTimeStyle</span><span class="o">:</span><span class="n">NSDateFormatterMediumStyle</span><span class="p">];</span>

<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">formatter</span> <span class="n">stringFromDate</span><span class="o">:</span><span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">]]);</span>
<span class="c1">// 12:11:19pm</span>
</code></pre></div>
<p>Whereas setting both to <code>NSDateFormatterLongStyle</code> yields the following:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSDateFormatter</span> <span class="o">*</span><span class="n">formatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSDateFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="p">[</span><span class="n">formatter</span> <span class="n">setDateStyle</span><span class="o">:</span><span class="n">NSDateFormatterLongStyle</span><span class="p">];</span>
<span class="p">[</span><span class="n">formatter</span> <span class="n">setTimeStyle</span><span class="o">:</span><span class="n">NSDateFormatterLongStyle</span><span class="p">];</span>

<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">formatter</span> <span class="n">stringFromDate</span><span class="o">:</span><span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">]]);</span>
<span class="c1">// Monday, November 11, 2013 12:11:19pm PST</span>
</code></pre></div>
<p>As you might expect, each aspect of the date format can alternatively be configured individually, a la carte. For any aspiring time wizards <code>NSDateFormatter</code> has a bevy of different knobs and switches to play with.</p>

<h3>Relative Formatting</h3>

<p>As of iOS 4 / OS X 10.6, <code>NSDateFormatter</code> supports relative date formatting for certain locales with the <code>doesRelativeDateFormatting</code> property. Setting this to <code>YES</code> would format the date of <code>[NSDate date]</code> to &quot;Today&quot;.</p>

<h2>Re-Using Formatter Instances</h2>

<p>Perhaps the most critical detail to keep in mind when using formatters is that they are <em>extremely</em> expensive to create. Even just an <code>alloc init</code> of an <code>NSNumberFormatter</code> in a tight loop is enough to bring an app to its knees.</p>

<p>Therefore, it&#39;s strongly recommended that formatters be created once, and re-used as much as possible.</p>

<p>If it&#39;s just a single method using a particular formatter, a static instance is a good strategy:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">fooWithNumber:</span><span class="p">(</span><span class="n">NSNumber</span> <span class="o">*</span><span class="p">)</span><span class="nv">number</span> <span class="p">{</span>
    <span class="k">static</span> <span class="n">NSNumberFormatter</span> <span class="o">*</span><span class="n">_numberFormatter</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
        <span class="n">_numberFormatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSNumberFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
        <span class="p">[</span><span class="n">_numberFormatter</span> <span class="n">setNumberStyle</span><span class="o">:</span><span class="n">NSNumberFormatterDecimalStyle</span><span class="p">];</span>
    <span class="p">});</span>

    <span class="n">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="p">[</span><span class="n">_numberFormatter</span> <span class="n">stringFromNumber</span><span class="o">:</span><span class="n">number</span><span class="p">];</span>

    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div>
<blockquote>
<p><code>dispatch_once</code> guarantees that the specified block is called only the first time it&#39;s encountered.</p>
</blockquote>

<p>If the formatter is used across several methods in the same class, that static instance can be refactored into a singleton method:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">+</span> <span class="p">(</span><span class="n">NSNumberFormatter</span> <span class="o">*</span><span class="p">)</span><span class="nf">numberFormatter</span> <span class="p">{</span>
    <span class="k">static</span> <span class="n">NSNumberFormatter</span> <span class="o">*</span><span class="n">_numberFormatter</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
    <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
        <span class="n">_numberFormatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSNumberFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
        <span class="p">[</span><span class="n">_numberFormatter</span> <span class="n">setNumberStyle</span><span class="o">:</span><span class="n">NSNumberFormatterDecimalStyle</span><span class="p">];</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="n">_numberFormatter</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>If the same formatter is privately implemented across several classes, one could either expose it publicly in one of the classes, or implement the static singleton method in a category on <code>NSNumberFormatter</code>.</p>

<hr>

<p>If your app deals in numbers or dates, <code>NSFormatter</code> is indespensable. Actually, if your app doesn&#39;t… then what <em>does</em> it do, exactly?</p>

<p>Presenting useful information to users is as much about content as presentation. Invest in learning all of the secrets of <code>NSNumberFormatter</code> and <code>NSDateFormatter</code> to get everything exactly how you want them.</p>

<p>And if you find yourself with formatting logic scattered across your app, consider creating your own <code>NSFormatter</code> subclass to consolidate all of that business logic in one place. </p>

<blockquote>
<p><a href="https://github.com/mattt/FormatterKit">FormatterKit</a> has great examples of <code>NSFormatter</code> subclasses for addresses, arrays, colors, locations, ordinal numbers, time intervals, and units of information.</p>
</blockquote>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 11 Nov 2013 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:33:"http://nshipster.com/nsformatter/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:33:"http://nshipster.com/nsformatter/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:20;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:6:"xctool";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:8592:"<blockquote>
<p>Control the build system, and you control the destiny of the language, its ecosystem, and community.</p>
</blockquote>

<p>Objective-C has changed so very much in such a very short timespan. In just a few short years, the language has gone from humdrum NeXT vestige to a <a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">position of commanding influence</a>. A significant portion of these prolific contributions from the open source community for Objective-C has been directly enabled and encouraged by increased ownership around tooling. </p>

<p><a href="http://cocoapods.org">CocoaPods</a>, in particular, exemplifies the compounding influences of technology and community. Now two years into the project, there are over 2,700 community-submitted libraries and frameworks that can be integrated into your own project with a simple <code>pod install</code> command.</p>

<p>Dependency management is just one of the many aspects of iOS and Mac OS X development that have been dramatically improved by the community. Other examples include <a href="http://nomad-cli.com">provisioning and distribution automation</a>, <a href="http://www.quickradar.com">bug reporting</a>, and <a href="http://cocoadocs.org">documentation</a>.</p>

<p>But this week, our focus is on a tool that redefines the actual build process itself, to serve as the foundation for a new generation of tooling and integration: <code>xctool</code>.</p>

<hr>

<p><a href="https://github.com/facebook/xctool"><code>xctool</code></a> is an open source project by <a href="https://github.com/fpotter">Fred Potter</a> that came from his work on build system automation at <a href="https://github.com/facebook">Facebook</a>. It is a drop-in replacement for <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html"><code>xcodebuild</code></a>, the utility underlying Xcode.app itself.</p>

<p>When you click &quot;Build &amp; Run&quot; in Xcode, all of the project, build target, and scheme settings are passed to <code>xcodebuild</code>, which invokes build commands to create and then launch an <code>.ipa</code> executable on the device or simulator.</p>

<p>Don&#39;t get me wrong—it&#39;s a <em>blessing</em> that things work in this way, instead of, say, Xcode wrapping its own private build system in a way that was inaccessible from outside the application. But anyone who has ever attempted to interact with <code>xcodebuild</code> from Terminal.app can attest to its... less-than-streamlined experience.</p>

<p>Rather than belabor the point by enumerating all of the flaws in this decade-old utility, let&#39;s cut to the hero of the story—XCtool—to show how it improves on the status quo:</p>

<h2>Aesthetics &amp; Style Points</h2>

<p>The first you&#39;ll notice about <code>xctool</code> is its gorgeous, colorized output.</p>

<p><img src="http://nshipster.s3.amazonaws.com/xctool-example.gif" alt="xctool in Action"></p>

<p>As consumers of Apple hardware and software ourselves, the role of design cannot be under-stated. In this respect, <code>xctool</code> absolutely nails it. Every step of the build process is neatly organized and reported in a way that is understandable and visually appealing, with ANSI colorization and a splash of Unicode ornamentation.</p>

<p>But xctool&#39;s beauty is not just skin-deep: build progress can also be reported in formats that can be read by other tools:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">xctool -reporter plain:output.txt build
</code></pre></div>
<h4>Reporters</h4>

<ul>
<li><code>pretty</code>: (<em>default</em>) a text-based reporter that uses ANSI colors and unicode symbols for pretty output.</li>
<li><code>plain</code>: like <code>pretty</code>, but with with no colors or Unicode.</li>
<li><code>phabricator</code>: outputs a JSON array of build/test results which can be fed into the <a href="http://phabricator.org">Phabricator</a> code-review tool.</li>
<li><code>junit</code>: produces a <a href="http://junit.org">JUnit</a>/<a href="http://xunit.codeplex.com">xUnit</a> compatible XML file with test results.</li>
<li><code>json-stream</code>: a stream of build/test events as JSON dictionaries, one per line (example output).</li>
<li><code>json-compilation-database</code>: outputs a <a href="http://clang.llvm.org/docs/JSONCompilationDatabase.html">JSON Compilation Database</a> of build events which can be used by <a href="http://clang.llvm.org/docs/LibTooling.html">Clang Tooling</a> based tools, e.g. <a href="http://oclint.org">OCLint</a>.</li>
</ul>

<h2>Build System Integration</h2>

<p>Another major improvement over <code>xcodebuild</code> is that <code>xctool</code> will run application tests in your project in the same way Xcode.app does (<code>xcodebuild</code> can&#39;t discern which targets in your scheme are test targets, let alone run them in the simulator)</p>

<p>For this reason alone, xctool has great implications for the emerging discipline of continuous integration testing within the Objective-C community.</p>

<h3>Travis CI</h3>

<p><a href="https://travis-ci.org">Travis CI</a> offers free continuous integration services for open source projects (as well as a <a href="http://travis-ci.com">paid plan for commercial software</a>), and is rather unique for supporting Objective-C. It can be configured to run your test suite on every <code>git push</code> to GitHub (or your favorite SCM host), and will notify you if your most recent change-set breaks the build.</p>

<p>To add Travis CI to your own Objective-C project, <a href="http://about.travis-ci.org/docs/user/getting-started/">create an account and webservice hook</a>, and create a <code>.travis.yml</code> file in your repository: </p>

<h4>.travis.yml</h4>
<div class="highlight"><pre><code class="yaml language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">objective-c</span>
<span class="l-Scalar-Plain">before_install</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">brew update</span>
    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">brew install xctool</span>
<span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">xctool -workspace MyApp.xcworkspace -scheme MyApp test</span>
</code></pre></div>
<h3>OCLint</h3>

<p><a href="http://oclint.org">OCLint</a> is a static code analyzer that inspects Objective-C (as well as C and C++) code for common sources of problems, like empty <code>if</code>/<code>else</code>/<code>try</code>/<code>catch</code>/<code>finally</code> statements,unused local variables and parameters, complicated code with high NCSS or cyclomatic / NPath complexity, redundant code, code smells, and other bad practices.</p>

<p>Remember <code>xctool</code>&#39;s <code>json-compilation-database</code> reporter option? Well, that output <a href="http://docs.oclint.org/en/dev/guide/xctool.html">can be read directly</a> by OCLint to do its magical static analysis.</p>

<p>At the time of writing, there is still a ways to go before this becomes widely adopted, but my hope is that, now that the cat is out of the bag, some enterprising individuals might work together to make an insanely great experience around this promising tool.</p>

<hr>

<p>Just as with the growth population within cities, infrastructure makes all of difference. One way or another, whether by local <a href="http://en.wikipedia.org/wiki/Commissioners&#x27;_Plan_of_1811">government mandate</a>, <a href="http://en.wikipedia.org/wiki/Kowloon_Walled_City">emergent self-organization</a>, or somewhere in-between, environments are changed to accommodate this growth.</p>

<p>Objective-C has and continues to undergo rapid growth based on the popularity of iOS. It is up to the community, in working with (and sometimes against) Apple to create infrastructure necessary to integrate so many new developers. How successful we are in this respect determines how we understand and communicate our roles and responsibilities as professional developers. </p>

<p>Are we clumsy amateurs, or do we take an active role in refining our craft?</p>

<p>xctool, like so many other tools from the community, provide hope and, indeed, inspiration about the future of the language and its ecosystem. Let&#39;s continue to build upon these tools, to create a developer experience that we can be proud of.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 04 Nov 2013 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:28:"http://nshipster.com/xctool/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://nshipster.com/xctool/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:21;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:17:"NSHipster Quiz #4";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:10134:"<p>The fourth and final NSHipster pub quiz of the year was held in the beautiful city of Amsterdam on October 22nd, with help from the good folks at <a href="http://appsterdam.rs">Appsterdam</a>, <a href="http://www.bignerdranch.com/">The Big Nerd Ranch</a>, and <a href="http://www.heroku.com">Heroku</a>.</p>

<p>The competition was fierce, but ultimately the team of <a href="https://twitter.com/bmf">Mike Lee</a>, <a href="https://twitter.com/judykitteh">Judy Chen</a>, <a href="https://twitter.com/alloy">Eloy Dúran</a>, <a href="https://twitter.com/arepty">Alexander Repty</a>, <a href="https://twitter.com/Yumyoko">Maxie Ketschau-Repty</a>, and <a href="https://twitter.com/paneidos">Sernin van de Krol</a> were victorious. This was, by design, to be the highest-scoring of any pub quiz, with generous portions of extra points, and Team &quot;<a href="http://en.wikipedia.org/wiki/Grace_Hopper">Graceful Hoppers</a>&quot; came through with an impressive 53 points (which, interestingly enough, only edged out the 2nd place team by ½ of a point).</p>

<p>As always, you can play along at home or at work with your colleagues. Here are the rules:</p>

<ul>
<li>There are 4 Rounds, with 10 questions each</li>
<li>Record answers on a separate sheet of paper</li>
<li>Each correct answer to a question gets you 1 point (unless otherwise specified)</li>
<li>Play with up to 5 friends for maximum enjoyment</li>
<li>Don&#39;t be lame and look things up on the Internet or in Xcode</li>
</ul>

<hr>

<h2>Round 1: General Knowledge</h2>

<p>Current events, miscellaneous tidbits, and random trivia. Following a time-honored traditions for NSHipster quizzes, the first round is always a mis-mash of people, places, and pop culture.</p>

<ol>
<li>What hardware products did Apple announce at its October 22nd Media Event? (1pt for each correct answer)</li>
<li>What two products were announced during the <em>last event</em> to be held at the Yerba Buena Center for the Arts,  on March 7, 2012? (1pt for each correct answer)</li>
<li>Which company&#39;s CEO was recently named as Apple&#39;s new Head of Retail? (1pt bonus if you know her name)</li>
<li>In September of this year, Steve Ballmer held his last meeting as CEO at Microsoft. How many years did he serve in this role?</li>
<li>Jony Ive recently designed a (<em>beautiful</em>) one-off camera with which famed camera company?</li>
<li>Which website&#39;s failure has given cause for President Obama to do a post-mortem for the failed Rails app?</li>
<li>Doomed former smartphone juggernaut BlackBerry recently released an iOS app. What is it called?</li>
<li>Apple prompted some raised eyebrows with the final developer release of  Mac OS X Mavericks. What was the controversy?</li>
<li>During development, the  Gold iPhone 5s was jokingly named after which American &quot;celebrity&quot;?</li>
<li>At an average per capita rate of 8.4kg per year, the Netherlands is the world&#39;s #5 consumer of what?</li>
</ol>

<h2>Round 2: Foundation Potpourri</h2>

<p>With the fluff out of the way, it&#39;s now time to dive into some hardcore Cocoa fundamentals. How well do <em>you</em> know the standard library?</p>

<ol>
<li><code>NSPredicate</code> objects can be decomposed into left and right hand side components of which class?</li>
<li>Which of the following is <em>not</em> something <code>NSDataDetector</code> can detect? Addresses, Phone Numbers, Product Listings, or Flight Information.</li>
<li>Which Foundation collection class allows values to be weakly referenced?</li>
<li>What method would you implement in an <code>NSFormatter</code> subclass in order to override what&#39;s displayed while editing?</li>
<li>Which Xcode launch argument can be specified to have NON-LOCALIZED STRINGS YELL AT YOU?</li>
<li>Which Core Foundation  collection type corresponds to  (but does not toll-free bridge) <code>NSCountedSet</code>?</li>
<li>Which <code>NSValue</code> class constructor allows for non-<code>NSCopying</code>-conforming objects to be used as keys in an <code>NSDictionary</code>?</li>
<li>Which <code>@</code> compiler directive allows classes to be referred to by another name?</li>
<li>Name the 4 Classes that conform to <code>&lt;NSLocking&gt;</code> (1 pt. each)</li>
<li>What is the name of the method called by the following code:</li>
</ol>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">array</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s">@&quot;foo&quot;</span><span class="p">;</span>
</code></pre></div>
<h2>Round 3: Picture Round - Indie Devs</h2>

<p>Following another tradition of the NSHipster quiz is everybody&#39;s favorite: the Picture Round! This time, the theme is indie developers. Earn up to 3 points for each set of pictures by naming the <strong>founder</strong>, the <strong>name of the company</strong> they&#39;re known for, and the <strong>name of their flagship app</strong> represented by the icon.</p>

<ol>
<li><img src="http://nshipster-quiz-4.s3.amazonaws.com/nshipster-quiz-4-question-1.png" alt="Question 1"></li>
<li><img src="http://nshipster-quiz-4.s3.amazonaws.com/nshipster-quiz-4-question-2.png" alt="Question 2"></li>
<li><img src="http://nshipster-quiz-4.s3.amazonaws.com/nshipster-quiz-4-question-3.png" alt="Question 3"></li>
<li><img src="http://nshipster-quiz-4.s3.amazonaws.com/nshipster-quiz-4-question-4.png" alt="Question 4"></li>
<li><img src="http://nshipster-quiz-4.s3.amazonaws.com/nshipster-quiz-4-question-5.png" alt="Question 5"></li>
<li><img src="http://nshipster-quiz-4.s3.amazonaws.com/nshipster-quiz-4-question-6.png" alt="Question 6"></li>
<li><img src="http://nshipster-quiz-4.s3.amazonaws.com/nshipster-quiz-4-question-7.png" alt="Question 7"></li>
<li><img src="http://nshipster-quiz-4.s3.amazonaws.com/nshipster-quiz-4-question-8.png" alt="Question 8"></li>
<li><img src="http://nshipster-quiz-4.s3.amazonaws.com/nshipster-quiz-4-question-9.png" alt="Question 9"></li>
<li><img src="http://nshipster-quiz-4.s3.amazonaws.com/nshipster-quiz-4-question-10.png" alt="Question 10"></li>
</ol>

<h2>Round 4: NSAnagram</h2>

<p>And finally, an admittedly <em>sadistic</em> round that combines wordplay with Cocoa arcana. Each question is an anagram, whose letters can be rearranged to form the name of a class or type in a well-known system framework (hint: Foundation, Core Foundation, UIKit, and AddressBook are represented here). Good luck!</p>

<ol>
<li>Nose Call</li>
<li>Uncle Consort Inn</li>
<li>Oi! Inaccurate Wit Vividity</li>
<li>A Band&#39;s Cement Jog</li>
<li>Tartan&#39;s Screech</li>
<li>Kebab&#39;s Sad Odor</li>
<li>Macs Fret</li>
<li>Manservant of Rulers</li>
<li>Measurably Rant</li>
<li>Ill-Oiled Canonicalized Tuxedo</li>
</ol>

<hr>

<h1>Answers</h1>

<h2>Round 1: General Knowledge</h2>

<ol>
<li>Updated MacBook Pros, Mac Pro, iPad Mini Retina, iPad Air</li>
<li>3rd Generation TV &amp; 3rd Generation iPad</li>
<li>Burberry CEO Angela Ahrendts</li>
<li>13 Years</li>
<li>Leica</li>
<li>healthcare.gov</li>
<li>BBM</li>
<li>GM Seed was Bumped / 2nd &quot;GM&quot; Release</li>
<li>Kim Kardashian</li>
<li>Coffee</li>
</ol>

<h2>Round 2: Foundation Potpourri</h2>

<ol>
<li><code>NSExpression</code></li>
<li>Product Listings</li>
<li><code>NSMapTable</code></li>
<li><code>editingStringForObjectValue:</code></li>
<li><code>-NSShowNonLocalizedStrings</code></li>
<li><code>CFBag</code></li>
<li><code>NSValue +valueWithNonretainedObject:</code></li>
<li><code>@compatibility_alias</code></li>
<li><code>NSLock</code>, <code>NSConditionLock</code>, <code>NSRecursiveLock</code>, &amp; <code>NSCondition</code></li>
<li><code>setObject:atIndexedSubscript:</code></li>
</ol>

<h2>Round 3: Picture Round</h2>

<ol>
<li><a href="https://twitter.com/cabel">Cabel Sasser</a> / <a href="http://panic.com/">Panic</a> / <a href="http://panic.com/transmit/">Transmit</a></li>
<li><a href="https://twitter.com/danwood">Dan Wood</a> / <a href="http://www.karelia.com/">Karelia</a> / <a href="http://www.karelia.com/products/sandvox/">Sandvox</a></li>
<li><a href="https://twitter.com/_soaps">Sophia Teutschler</a> / <a href="http://sophiestication.com/">Sophiestication</a> / <a href="http://sophiestication.com/articles/">Articles</a></li>
<li><a href="https://twitter.com/kcase">Ken Case</a> / <a href="http://www.omnigroup.com/">The Omni Group</a> / <a href="http://www.omnigroup.com/omnigraffle/">OmniGraffle</a></li>
<li><a href="https://twitter.com/liscio">Chris Liscio</a> / <a href="http://supermegaultragroovy.com/">Super Mega Ultra Groovy</a> / <a href="http://supermegaultragroovy.com/products/Capo/">Capo</a></li>
<li><a href="https://twitter.com/PBones">Paul Kafasis</a> / <a href="http://rogueamoeba.com/">Rogue Amoeba</a> / <a href="http://rogueamoeba.com/fission/">Fission</a></li>
<li><a href="https://twitter.com/lorenb">Loren Brichter</a> / <a href="http://www.atebits.com/">atebits</a> / <a href="http://www.atebits.com/letterpress/">Letterpress</a></li>
<li><a href="https://twitter.com/chockenberry">Craig Hockenberry</a> / <a href="http://iconfactory.com/">The Iconfactory</a> / <a href="http://twitterrific.com/ios">Twitterific</a></li>
<li><a href="https://twitter.com/dlpasco">Daniel Pasco</a> / <a href="http://blackpixel.com/">Black Pixel</a> / <a href="http://netnewswireapp.com/">NetNewsWire</a></li>
<li><a href="https://twitter.com/bmf">Mike Lee</a> / <a href="http://newlemurs.com/">New Lemurs</a> / <a href="http://newlemurs.com/">Lemurs Chemistry</a></li>
</ol>

<h2>Round 4: NSAnagram</h2>

<ol>
<li><code>NSLocale</code></li>
<li><code>NSURLConnection</code></li>
<li><code>UIActivityIndicatorView</code></li>
<li><code>NSManagedObject</code></li>
<li><code>NSCharacterSet</code></li>
<li><code>ABAddressBook</code></li>
<li><code>CFStream</code></li>
<li><code>NSValueTransformer</code></li>
<li><code>NSMutableArray</code></li>
<li><code>UILocalizedIndexedCollation</code></li>
</ol>

<hr>

<p>How did you do this time? Tweet out your score to see how you stack up to your peers!</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 28 Oct 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/nshipster-quiz-4/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/nshipster-quiz-4/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:22;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:54:"Launch Arguments &amp;&lt;br/&gt;Environment Variables";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:12670:"<p>Walk into any American fast food establishment, and you&#39;ll be greeted with a colorful, back-lit display of specials, set menus, and other a la carte items. But as those in-the-know are quick to point out, larger chains often have a <em>secret</em> menu, passed down by oral tradition between line cook workers and patrons over the generations.</p>

<p>At McDonald&#39;s, one can order a &quot;Poor Man’s Big Mac&quot;, which transforms a double cheeseburger alchemy-like into the chain&#39;s signature sandwich on the cheap.</p>

<p>At Chipotle, there is an unwritten rule that they&#39;ll make anything within the scope of available ingredients. Since Mexican food is a testament to culinary combinatorics, an off-book order for a Quesadilla or Nachos is well within their wheelhouse.</p>

<p>In life, it&#39;s all about knowing what to ask for.</p>

<p>Which brings us to Xcode Launch Arguments &amp; Environment Variables. There are a number of options that can be passed into a target&#39;s scheme to enable useful debugging behavior, but like a fast food secret menu, they&#39;re obscure and widely unknown.</p>

<p>So this week on NSHipster, we&#39;ll take a look at the hidden world of Xcode runtime configuration, so that you, dear reader, may also saunter up to the great lunch counter of Objective-C and order to your heart&#39;s content.</p>

<hr>

<p>To enable launch arguments and set environment variables for your app, select your target from the Xcode toolbar and select &quot;Edit Scheme...&quot;</p>

<p><img src="http://nshipster.s3.amazonaws.com/launch-arguments-edit-scheme.png" alt="Edit Scheme..."></p>

<p>On the left side of the panel, select &quot;Run [AppName].app&quot;, and select the &quot;Arguments&quot; segment on the right side. There will be two drop-downs, for &quot;Arguments Passed on Launch&quot; and &quot;Environment Variables&quot;.</p>

<p><img src="http://nshipster.s3.amazonaws.com/launch-arguments-edit-scheme-panel.png" alt="Edit Scheme Panel"></p>

<p>For the purposes of debugging an app target, launch arguments and environment variables can be thought to be equivalent—both change the runtime behavior by defining certain values. In practice, the main difference between the two is that launch arguments begin with a dash (<code>-</code>) and don&#39;t have a separate field for argument values.</p>

<h2>Arguments Passed on Launch</h2>

<p>Any argument passed on launch will override the current value in <code>NSUserDefaults</code> for the duration of execution. While this can be used for domain-specific testing and debugging, the two most widely applicable use cases are for localization and Core Data.</p>

<h3>Localization</h3>

<p>Getting localization right is a challenging and time-consuming task in and of itself. Fortunately, there are a few launch arguments that make the process <em>much</em> nicer.</p>

<blockquote>
<p>For more information about localization, check out our article about <a href="http://nshipster.com/nslocalizedstring/"><code>NSLocalizedString</code></a>.</p>
</blockquote>

<h4>NSDoubleLocalizedStrings</h4>

<p>To simulate German&#39;s UI-breaking <em>götterdämmere Weltanschauung</em> of long-compound-words-unbroken-by-breakable-whitespace, there&#39;s <code>NSDoubleLocalizedStrings</code>.</p>

<p>According to <a href="http://www-01.ibm.com/software/globalization/guidelines/a3.html">IBM&#39;s Globalization Guidelines</a>, we can expect translations from English to many European languages to be double or even triple the physical space of the source:</p>

<table>
<thead>
<tr>
<th>Number of Characters in Text</th>
<th>Additional Physical Space Required</th>
</tr>
<tbody>
<tr><td>≤ 10</td><td>100% to 200%</td></tr>
<tr><td>11 – 20</td><td>80% to 100%</td></tr>
<tr><td>21 – 30</td><td>60% to 80%</td></tr>
<tr><td>31 – 50</td><td>40% to 60%</td></tr>
<tr><td>51 – 70</td><td>31% to 40%</td></tr>
<tr><td>70</td><td>30%</td></tr>
</tbody>
</table>

<p>While you&#39;re waiting for the first batch of translations to come back, or are merely curious to see how badly your UI breaks under linguistic pressure, specify the following launch argument:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">-NSDoubleLocalizedStrings YES
</code></pre></div>
<p><img src="http://nshipster.s3.amazonaws.com/launch-arguments-nsdoublelocalizedstrings.png" alt="NSDoubleLocalizedStrings - Before &amp; After"></p>

<h4>NSShowNonLocalizedStrings</h4>

<p>Project managers screaming at you to get localization finished? Now you can configure your app to scream at you as well!</p>

<p>If you pass the <code>NSShowNonLocalizedStrings</code> launch argument, any unlocalized string will SCREAM AT YOU IN CAPITAL LETTERS. HOW DELIGHTFUL!</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">-NSShowNonLocalizedStrings YES
</code></pre></div>
<h4>AppleLanguages</h4>

<p>Perhaps the most useful launch argument of all, however, is <code>AppleLanguages</code>.</p>

<p>Normally, one would have to manually go through Settings &gt; General &gt; International &gt; Language and wait for the Simulator or Device to restart. But the same can be accomplished much more simply with the following launch argument:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">-AppleLanguages (es)
</code></pre></div>
<blockquote>
<p>The value for <code>AppleLanguages</code> can either be the name of the language (&quot;Spanish&quot;), or its language code (<code>es</code>), but since localization files are keyed by their ISO 639 code, using the code is preferable to the actual name of the language.</p>
</blockquote>

<h3>Core Data</h3>

<p>Of all of the system frameworks, Core Data may be the most in need of debugging. Managed objects passing across contexts and threads, and notifications firing with dazzlingly fervor, there&#39;s too much going on to keep track of yourself. Call in reinforcements with these essential launch arguments:</p>

<h4>SQL Debug</h4>

<p>Most Core Data stacks use SQLite as a persistent store, so if your app is anything like the majority, you&#39;ll appreciate being able to watch SQL statements and statistics fly by as Core Data works its magic.</p>

<p>Set the following launch argument:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">-com.apple.CoreData.SQLDebug 3
</code></pre></div>
<p>...and let the spice flow.</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">CoreData: sql: pragma cache_size=1000
CoreData: sql: SELECT Z_VERSION, Z_UUID, Z_PLIST FROM Z_METADATA
CoreData: sql: SELECT 0, t0.Z_PK, t0.Z_OPT, t0.ZAUTHOR, t0.ZTITLE, t0.ZCOPYRIGHT FROM ZBOOK t0 ORDER BY t0.ZAUTHOR, t0.ZTITLE
CoreData: annotation: sql connection fetch time: 0.0001s
CoreData: annotation: total fetch execution time: 0.0010s for 20 rows.
</code></pre></div>
<p><code>com.apple.CoreData.SQLDebug</code> takes a value between <code>1</code> and <code>3</code>; the higher the value, the more verbose the output. Adjust according to taste.</p>

<h4>Syntax Colored Logging</h4>

<p>Want your debug statements to be <em>even spicier</em>? Toss <code>com.apple.CoreData.SyntaxColoredLogging</code> into the mix and brace yourself for an explosion of color:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">-com.apple.CoreData.SyntaxColoredLogging YES
</code></pre></div>
<h4>Migration Debug</h4>

<p>In any other persistence layer, migrations are a blessing. Yet, for some reason, Core Data manages to make them into something out of a nightmare. When things go wrong and you have no one to blame except your own ignorant self, unworthy of such an intuitive and well-designed <del>ORM</del> <ins>graph persistence framework</ins>, then here&#39;s an argument you&#39;ll want to pass at launch:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">-com.apple.CoreData.MigrationDebug
</code></pre></div>
<hr>

<h2>Environment Variables</h2>

<p>Whereas launch arguments are specific to the executable, environment variables have a wider scope, more along the lines of a global variable (but without all of the knee-jerk derision from programmers).</p>

<p>Configure your environment with the following settings to shape the memory management policies to aide in debugging.</p>

<blockquote>
<p>Unless otherwise specified, environment variables are passed <code>YES</code> or <code>NO</code> to enable or disable a particular feature.</p>
</blockquote>

<h3>Zombies!</h3>

<p>Over-played in popular media, under-played in Objective-C, everyone can agree that it pays to know about zombies.</p>

<p>Setting <code>NSZombie</code>-related environment variables allows you to control the <em>BRAAAAINS!</em> of your app. To be more specific, when objects are deallocated, they become &quot;zombified&quot;, able to communicate any messages that are passed after they have been freed. This can be useful for tracing any errant <code>EXC_BAD_ACCESS</code> exceptions you get during execution.</p>

<table>
<thead>
<tr>
<th>Name</th><th>Effect</th></tr>
</thead>
<tbody>
<tr><td><tt>NSZombieEnabled</tt></td></td><td>If set to <tt>YES</tt>, deallocated objects are 'zombified'; this allows you to quickly debug problems where you send a message to an object that has already been freed.</td></tr>
<tr><td><tt>NSDeallocateZombies</tt></td><td>If set to <tt>YES</tt>, the memory for 'zombified' objects is actually freed.</td></tr>
</tbody>
</table>

<h3>Memory Allocator</h3>

<p>The memory allocator includes several debugging hooks that can be enabled by environment variables. As explained in Apple&#39;s <a href="https://developer.apple.com/library/mac/documentation/performance/Conceptual/ManagingMemory/Articles/MallocDebug.html">Memory Usage Performance Guidelines</a>:</p>

<blockquote>
<p>Guard Malloc is a special version of the malloc library that replaces the standard library during debugging. Guard Malloc uses several techniques to try and crash your application at the specific point where a memory error occurs. For example, it places separate memory allocations on different virtual memory pages and then deletes the entire page when the memory is freed. Subsequent attempts to access the deallocated memory cause an immediate memory exception rather than a blind access into memory that might now hold other data. When the crash occurs, you can then go and inspect the point of failure in the debugger to identify the problem.</p>
</blockquote>

<p>Here are some of the most useful ones:</p>

<table>
<thead>
<tr><th>Name</th><th>Effect</th></tr>
</thead>
<tbody>
<tr><td><tt>MallocScribble</tt></td><td>Fill allocated memory with 0xAA and scribble deallocated memory with <tt>0x55</tt>.</td></tr>
<tr><td><tt>MallocGuardEdges</tt></td><td>Add guard pages before and after large allocations.</td></tr>
<tr><td><tt>MallocStackLogging</tt></td><td>Record backtraces for each memory block to assist memory debugging tools; if the block is allocated and then immediately freed, both entries are removed from the log, which helps reduce the size of the log.</td></tr>
<tr><td><tt>MallocStackLoggingNoCompact</tt></td><td>Same as <tt>MallocStackLogging</tt> but keeps all log entries.</td></tr>
</tbody>
</table>

<h3>I/O Buffering</h3>

<p>Although unlikely, you may come across a situation where you want logging to <code>stdout</code> to be unbuffered (ensuring that the output has been written before continuing). You can set that with the <code>NSUnbufferedIO</code> environment variable:</p>

<table>
<thead>
<tr><th>Name</th><th>Effect</th></tr>
</thead>
<tbody>
<tr><td><tt>NSUnbufferedIO</tt></td><td>If set to YES, Foundation will use unbuffered I/O for <tt>stdout</tt> (<tt>stderr</tt> is unbuffered by default).</td></tr>
</tbody>
</table>

<hr>

<p>Just as secret menus are bound by the implications of Gödel&#39;s Incompleteness Theorem, it is impossible to document all of the secret incantations to get special treatment in Xcode. However, perhaps you can find a few more (and learn a <em>ton</em> about runtime internals) by perusing Apple&#39;s <a href="https://developer.apple.com/library/ios/technotes/tn2239/_index.html">Technical Note TN2239: iOS Debugging Magic</a> and <a href="https://developer.apple.com/library/mac/technotes/tn2124/_index.html">Technical Note TN2124: Mac OS X Debugging Magic</a>.</p>

<p>Hopefully, though, the secret knowledge you&#39;ve been exposed to in this article will sustain you in your app endeavors. Use them wisely, and pass them onto your coworkers like an urban legend or juicy rumor.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 21 Oct 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:64:"http://nshipster.com/launch-arguments-and-environment-variables/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:64:"http://nshipster.com/launch-arguments-and-environment-variables/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:23;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:7:"NSError";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:35034:"<blockquote>
<p>To err is human.<br>
To <code>NSError</code> is Cocoa.</p>
</blockquote>

<p>All programs on a Unix system are a child process of another process, forking all the way from the original process, the unmoved mover: <code>pid</code> 1 (which in the case of Mac OS X is <code>launchd</code>). When the executable finishes, it communicates a status code between <code>0</code> and <code>255</code> to its parent, as a way to communicate why or how the process exited. <code>0</code> means &quot;everything exited normally; nothing to report here&quot;, while any non-zero value indicates something that the parent process should be aware of. Exit status codes may be used to indicate whether the process crashed, or terminated prematurely. By some conventions, the higher the return value, the more severe the cause of the error.</p>

<p>In an OO paradigm processes are, for the most part, abstracted away, leaving only objects and the messages they pass between one another. That distinction between success and failure (and between different varieties of failure) is still useful in object-oriented programming. But considering that methods are often wont to return values other than <code>BOOL</code>, this can create something of a predicament.</p>

<p>Languages more drama-prone and trigger-happy than Objective-C reconcile this by abusing the hell out of exceptions, raising at even the slightest breach in contract. To our good fortune as Cocoanauts, however, Objective-C takes a more civilized approach when it comes to giving us bad news, and that approach is <code>NSError</code>.</p>

<hr>

<p><code>NSError</code> is the unsung hero of the Foundation framework. Passed gallantly in and out of perilous method calls, it is the messenger by which we are able to contextualize our failures. No news is good news, when it comes to such matters, but passing a <code>nil</code> pointer to an <code>NSError **</code> isn&#39;t going to do you any favors.</p>

<p><code>NSError</code> is toll-free bridged with <code>CFError</code>, but it&#39;s unlikely that you&#39;ll ever find a reason to dip down to its Core Foundation counterpart.</p>

<p>Each <code>NSError</code> object encodes three critical pieces of information: a status <code>code</code>, corresponding to a particular error <code>domain</code>, as well as additional context provided by a <code>userInfo</code> dictionary.</p>

<h2><code>code</code> &amp; <code>domain</code></h2>

<p>Like exit status codes, an <code>NSError -code</code> signals the nature of the problem. These status codes are defined within a particular error <code>domain</code>, in order to avoid overlap and confusion. These status codes are generally defined by constants in an <code>enum</code>.</p>

<p>For example, in the <code>NSCocoaErrorDomain</code>, the status code for an error caused by <code>NSFileManager</code> attempting to access a non-existant file is <code>4</code>, as defined by <code>NSFileNoSuchFileError</code>. However, <code>4</code> in <code>NSPOSIXErrorDomain</code> refers to a <a href="http://250bpm.com/blog:12">POSIX <code>EINTR</code>, or &quot;interupted function&quot; error</a>.</p>

<p>Now, anyone coming from a systems programming background may have just had a vision of a <code>switch</code> statement with smatterings of <code>printf</code> to translate numeric constants into something human-readable. <code>NSError</code> is way ahead of you.  </p>

<h2><code>userInfo</code></h2>

<p>What gives <code>NSError</code> its particular charm is everyone&#39;s favorite grab bag property: <code>userInfo</code>. As a convention throughout Cocoa, <code>userInfo</code> is a dictionary that contains arbitrary key-value pairs that, whether for reasons of subclassing or schematic sparsity, are not suited to full-fledged properties in and of themselves. In the case of <code>NSError</code>, there are several special keys that correspond to <code>readonly</code> properties.</p>

<p>Three are generally useful:</p>

<ul>
<li><code>localizedDescription</code> (<code>NSLocalizedDescriptionKey</code>): A localized description of the error.</li>
<li><code>localizedRecoverySuggestion</code> (<code>NSLocalizedRecoverySuggestionErrorKey</code>): A localized recovery suggestion for the error.</li>
<li><code>localizedFailureReason</code> (<code>NSLocalizedFailureReasonErrorKey</code>): A localized explanation of the reason for the error.</li>
</ul>

<p>...whereas three others are specific to OS X:</p>

<ul>
<li><code>localizedRecoveryOptions</code> (<code>NSLocalizedRecoveryOptionsErrorKey</code>): An array containing the localized titles of buttons appropriate for displaying in an alert panel</li>
<li><code>recoveryAttempter</code> (<code>NSRecoveryAttempterErrorKey</code>)</li>
<li><code>helpAnchor</code> (<code>NSHelpAnchorErrorKey</code>): Used by an alert panel by a help anchor button.</li>
</ul>

<p>Here&#39;s how to construct <code>NSError</code> with a <code>userInfo</code> dictionary: </p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">userInfo</span> <span class="o">=</span> <span class="p">@{</span>
  <span class="nl">NSLocalizedDescriptionKey:</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;Operation was unsuccessful.&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">),</span>
  <span class="nl">NSLocalizedFailureReasonErrorKey:</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;The operation timed out.&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">),</span>
  <span class="nl">NSLocalizedRecoverySuggestionErrorKey:</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;Have you tried turning it off and on again?&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
                          <span class="p">};</span>
<span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSError</span> <span class="n">errorWithDomain</span><span class="o">:</span><span class="n">NSHipsterErrorDomain</span> 
                                     <span class="n">code</span><span class="o">:-</span><span class="mi">57</span> 
                                 <span class="n">userInfo</span><span class="o">:</span><span class="n">userInfo</span><span class="p">];</span>
</code></pre></div>
<p>The advantage of encapsulating this information in an object like <code>NSError</code>, as opposed to, say, throwing exceptions willy-nilly, is that these error objects can be easily passed between different objects and contexts.</p>

<p>For example, a controller that calls a method that populates an <code>NSError **</code> (as discussed in the next section) might pass that error into an alert view:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[[[</span><span class="n">UIAlertView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithTitle</span><span class="o">:</span><span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span>
                            <span class="nl">message:</span><span class="n">error</span><span class="p">.</span><span class="n">localizedRecoverySuggestion</span>
                           <span class="nl">delegate:</span><span class="nb">nil</span>
                  <span class="nl">cancelButtonTitle:</span><span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;OK&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">)</span>
                  <span class="nl">otherButtonTitles:</span><span class="nb">nil</span><span class="p">,</span> <span class="nb">nil</span><span class="p">]</span> <span class="n">show</span><span class="p">];</span>
</code></pre></div>
<blockquote>
<p>As a brief non-sequitur: one clever hack used by C functions to communicate errors is to <a href="https://github.com/mattt/Xcode-Snippets/blob/master/checkerror.m">encode 4-letter ASCII sequences in the 32 bit return type</a>. It&#39;s no <code>localizedDescription</code>, but it&#39;s better than cross-referencing error codes from a table every time!</p>
</blockquote>

<p>For sake of completeness: here is a list of the standard <code>NSError</code> <code>userInfo</code> keys:</p>

<ul>
<li><code>NSLocalizedDescriptionKey</code></li>
<li><code>NSLocalizedFailureReasonErrorKey</code></li>
<li><code>NSLocalizedRecoverySuggestionErrorKey</code></li>
<li><code>NSLocalizedRecoveryOptionsErrorKey</code></li>
<li><code>NSFilePathErrorKey</code></li>
<li><code>NSStringEncodingErrorKey</code></li>
<li><code>NSUnderlyingErrorKey</code></li>
<li><code>NSRecoveryAttempterErrorKey</code></li>
<li><code>NSHelpAnchorErrorKey</code></li>
</ul>

<h2>Using <code>NSError</code></h2>

<p>There are two ways in which you will encounter <code>NSError</code>: as a consumer and as a producer.</p>

<h3>Consuming</h3>

<p>As a consumer, you are primarily concerned with methods that have a final parameter of type <code>NSError **</code>. Again, this is to get around the single return value constraint of Objective-C; by passing a pointer to an uninitialized <code>NSError *</code> variable, that variable will be populated with any error the method encounters:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
<span class="kt">BOOL</span> <span class="n">success</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSFileManager</span> <span class="n">defaultManager</span><span class="p">]</span> <span class="n">moveItemAtPath</span><span class="o">:</span><span class="s">@&quot;/path/to/target&quot;</span>
                                                       <span class="nl">toPath:</span><span class="s">@&quot;/path/to/destination&quot;</span>
                                                        <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">success</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<blockquote>
<p>According to Cocoa conventions, methods returning <code>BOOL</code> to indicate success or failure are encouraged to have a final <code>NSError **</code> parameter if there are multiple failure conditions to distinguish between. A good guideline is whether you could imagine that <code>NSError</code> bubbling up, and being presented to the user.</p>
</blockquote>

<p>Another way <code>NSError</code> objects are passed is the inclusion of an <code>NSError *</code> argument in <code>completionHandler</code> blocks. This gets around both a constraint on single value returns as well as one on that value being returned synchronously. This has become especially popular with newer Foundation APIs, like <code>NSURLSession</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSURL</span> <span class="o">*</span><span class="n">URL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="n">URLWithString</span><span class="o">:</span><span class="s">@&quot;http://example.com&quot;</span><span class="p">];</span>
<span class="n">NSURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLRequest</span> <span class="n">requestWithURL</span><span class="o">:</span><span class="n">URL</span><span class="p">];</span>
<span class="n">NSURLSession</span> <span class="o">*</span><span class="n">session</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLSession</span> <span class="n">sessionWithConfiguration</span><span class="o">:</span><span class="p">[</span><span class="n">NSURLSessionConfiguration</span> <span class="n">defaultSessionConfiguration</span><span class="p">]];</span>
<span class="p">[[</span><span class="n">session</span> <span class="n">dataTaskWithRequest</span><span class="o">:</span><span class="n">request</span>
            <span class="nl">completionHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">NSURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}]</span> <span class="n">resume</span><span class="p">];</span>
</code></pre></div>
<h3>Producing</h3>

<p>One would be well-advised to follow the same conventions for error handling as other Foundation classes. In situations where a custom method invokes a method with an <code>NSError **</code> parameter, it is usually a good idea to similarly pass that <code>NSError **</code> parameter into the signature of the custom method. More substantial apps or libraries are encouraged to define their own error domains and error code constants as suitable.</p>

<p>To pass an error to an <code>NSError **</code> parameter, do the following:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">validateObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span> 
                 <span class="nf">error:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span> <span class="n">__autoreleasing</span> <span class="o">*</span><span class="p">)</span><span class="nv">error</span>
<span class="p">{</span>
    <span class="c1">// ...</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSError</span> <span class="n">errorWithDomain</span><span class="o">:</span><span class="n">NSHipsterErrorDomain</span> 
                                   <span class="n">code</span><span class="o">:-</span><span class="mi">42</span>
                               <span class="nl">userInfo:</span><span class="nb">nil</span><span class="p">];</span>

      <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<h2><code>NSURLErrorDomain</code> &amp; <code>CFNetworkErrors</code></h2>

<p>The greatest source of failure in iOS apps is networking. Between radios, transport, data roaming policies, proxies, security, authentication, and any number of protocol-specific negotiation, there is a lot that can go wrong.</p>

<p>On the plus side, the Foundation URL Loading system is incredibly mature, and takes care of most of that for you. The only negative is that the documentation for all of the various things that can go wrong is scattered across different programming guides and headers. If you get a request failing with error <code>-1004</code>, it can be <em>surprisingly</em> difficult to figure out exactly what that means.</p>

<p>As such, here is an exhaustive, well-formatted table at your disposal:</p>

<table id="CFNetworkErrors">
<tr><td rowspan="3">-1</td><td></td></tr>
<tr><td><tt>NSURLErrorUnknown</tt></td></tr>
<tr><td></td></tr>

<tr><td rowspan="3">1</td><td><tt>kCFHostErrorHostNotFound</tt></td>
<tr><td></td></tr>
<tr><td><q>Indicates that the DNS lookup failed.</q></td></tr>

<tr><td rowspan="3">2</td><td><tt>kCFHostErrorUnknown</tt></td></tr><tr><td></td></tr>
<tr><td><q>An unknown error occurred (a name server failure, for example). For additional information, query the <tt>kCFGetAddrInfoFailureKey</tt> to get the value returned from <tt>getaddrinfo</tt>; lookup in <tt>netdb.h</tt></q></td></tr>
<tr><td></td></tr>

<tr><td rowspan="3">100</td><td><tt>kCFSOCKSErrorUnknownClientVersion</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The SOCKS server rejected access because it does not support connections with the requested SOCKS version.Query <tt>kCFSOCKSStatusCodeKey</tt> to recover the status code returned by the server.</q></td></tr>

<tr><td rowspan="3">101</td><td><tt>kCFSOCKSErrorUnsupportedServerVersion</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The version of SOCKS requested by the server is not supported. Query <tt>kCFSOCKSStatusCodeKey</tt> to recover the status code returned by the server.<br/>Query the <tt>kCFSOCKSVersionKey</tt> to find the version requested by the server.</q></td></tr>


<tr><th colspan="2">SOCKS4 Error</th></tr>

<tr><td rowspan="3">110</td><td><tt>kCFSOCKS4ErrorRequestFailed</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>Request rejected or failed by the server.</q></td></tr>

<tr><td rowspan="3">111</td><td><tt>kCFSOCKS4ErrorIdentdFailed</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>Request rejected because SOCKS server cannot connect to identd on the client.</q></td></tr>

<tr><td rowspan="3">112</td><td><tt>kCFSOCKS4ErrorIdConflict</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>Request rejected because the client program and identd report different user-ids.</q></td></tr>

<tr><td rowspan="3">113</td><td><tt>kCFSOCKS4ErrorUnknownStatusCode</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The status code returned by the server is unknown.</q></td></tr>


<tr><th colspan="2">SOCKS5 Errors</th></tr>

<tr><td rowspan="3">120</td><td><tt>kCFSOCKS5ErrorBadState</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The stream is not in a state that allows the requested operation.</q></td></tr>

<tr><td rowspan="3">121</td><td><tt>kCFSOCKS5ErrorBadResponseAddr</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The address type returned is not supported.</q></td></tr>

<tr><td rowspan="3">122</td><td><tt>kCFSOCKS5ErrorBadCredentials</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The SOCKS server refused the client connection because of bad login credentials.</q></td></tr>

<tr><td rowspan="3">123</td><td><tt>kCFSOCKS5ErrorUnsupportedNegotiationMethod</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The requested method is not supported. Query <tt>kCFSOCKSNegotiationMethodKey</tt> to find the method requested.</q></td></tr>

<tr><td rowspan="3">124</td><td><tt>kCFSOCKS5ErrorNoAcceptableMethod</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The client and server could not find a mutually agreeable authentication method.</q></td></tr>


<tr><th colspan="2">FTP Errors</th></tr>

<tr><td rowspan="3">200</td><td><tt>kCFFTPErrorUnexpectedStatusCode</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The server returned an unexpected status code. Query the <tt>kCFFTPStatusCodeKey</tt> to get the status code returned by the server</q></td></tr>


<tr><th colspan="2">HTTP Errors</th></tr>

<tr><td rowspan="3">300</td><td><tt>kCFErrorHTTPAuthenticationTypeUnsupported</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The client and server could not agree on a supported authentication type.</q></td></tr>

<tr><td rowspan="3">301</td><td><tt>kCFErrorHTTPBadCredentials</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The credentials provided for an authenticated connection were rejected by the server.</q></td></tr>

<tr><td rowspan="3">302</td><td><tt>kCFErrorHTTPConnectionLost</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The connection to the server was dropped. This usually indicates a highly overloaded server.</q></td></tr>

<tr><td rowspan="3">303</td><td><tt>kCFErrorHTTPParseFailure</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The HTTP server response could not be parsed.</q></td></tr>

<tr><td rowspan="3">304</td><td><tt>kCFErrorHTTPRedirectionLoopDetected</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>Too many HTTP redirects occurred before reaching a page that did not redirect the client to another page. This usually indicates a redirect loop.</q></td></tr>

<tr><td rowspan="3">305</td><td><tt>kCFErrorHTTPBadURL</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The requested URL could not be retrieved.</q></td></tr>

<tr><td rowspan="3">306</td><td><tt>kCFErrorHTTPProxyConnectionFailure</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>A connection could not be established to the HTTP proxy.</q></td></tr>

<tr><td rowspan="3">307</td><td><tt>kCFErrorHTTPBadProxyCredentials</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The authentication credentials provided for logging into the proxy were rejected.</q></td></tr>


<tr><td rowspan="3">308</td><td><tt>kCFErrorPACFileError</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>An error occurred with the proxy autoconfiguration file.</q></td></tr>

<tr><td rowspan="3">309</td><td><tt>kCFErrorPACFileAuth</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The authentication credentials provided by the proxy autoconfiguration file were rejected.</q></td></tr>

<tr><td rowspan="3">310</td><td><tt>kCFErrorHTTPSProxyConnectionFailure</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>A connection could not be established to the HTTPS proxy.</q></td></tr>

<tr><td rowspan="3">311</td><td><tt>kCFStreamErrorHTTPSProxyFailureUnexpectedResponseToCONNECTMethod</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The HTTPS proxy returned an unexpected status code, such as a 3xx redirect.</q></td></tr>


<tr><th colspan="2">CFURLConnection &amp; CFURLProtocol Errors</th></tr>

<tr><td rowspan="3">-998</td><td><tt>kCFURLErrorUnknown</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>An unknown error occurred.</q></td></tr>

<tr><td rowspan="3">-999</td><td><tt>kCFURLErrorCancelled</tt></td></tr>
<tr><td><tt>NSURLErrorCancelled</tt></td></tr>
<tr><td><q>The connection was cancelled.</q></td></tr>

<tr><td rowspan="3">-1000</td><td><tt>kCFURLErrorBadURL</tt></td></tr>
<tr><td><tt>NSURLErrorBadURL</tt></td></tr>
<tr><td><q>The connection failed due to a malformed URL.</q></td></tr>

<tr><td rowspan="3">-1001</td><td><tt>kCFURLErrorTimedOut</tt></td></tr>
<tr><td><tt>NSURLErrorTimedOut</tt></td></tr>
<tr><td><q>The connection timed out.</q></td></tr>

<tr><td rowspan="3">-1002</td><td><tt>kCFURLErrorUnsupportedURL</tt></td></tr>
<tr><td><tt>NSURLErrorUnsupportedURL</tt></td></tr>
<tr><td><q>The connection failed due to an unsupported URL scheme.</q></td></tr>

<tr><td rowspan="3">-1003</td><td><tt>kCFURLErrorCannotFindHost</tt></td></tr>
<tr><td><tt>NSURLErrorCannotFindHost</tt></td></tr>
<tr><td><q>The connection failed because the host could not be found.</q></td></tr>

<tr><td rowspan="3">-1004</td><td><tt>kCFURLErrorCannotConnectToHost</tt></td></tr>
<tr><td><tt>NSURLErrorCannotConnectToHost</tt></td></tr>
<tr><td><q>The connection failed because a connection cannot be made to the host.</q></td></tr>

<tr><td rowspan="3">-1005</td><td><tt>kCFURLErrorNetworkConnectionLost</tt></td></tr>
<tr><td><tt>NSURLErrorNetworkConnectionLost</tt></td></tr>
<tr><td><q>The connection failed because the network connection was lost.</q></td></tr>

<tr><td rowspan="3">-1006</td><td><tt>kCFURLErrorDNSLookupFailed</tt></td></tr>
<tr><td><tt>NSURLErrorDNSLookupFailed</tt></td></tr>
<tr><td><q>The connection failed because the DNS lookup failed.</q></td></tr>

<tr><td rowspan="3">-1007</td><td><tt>kCFURLErrorHTTPTooManyRedirects</tt></td></tr>
<tr><td><tt>NSURLErrorHTTPTooManyRedirects</tt></td></tr>
<tr><td><q>The HTTP connection failed due to too many redirects.</q></td></tr>

<tr><td rowspan="3">-1008</td><td><tt>kCFURLErrorResourceUnavailable</tt></td></tr>
<tr><td><tt>NSURLErrorResourceUnavailable</tt></td></tr>
<tr><td><q>The connection’s resource is unavailable.</q></td></tr>

<tr><td rowspan="3">-1009</td><td><tt>kCFURLErrorNotConnectedToInternet</tt></td></tr>
<tr><td><tt>NSURLErrorNotConnectedToInternet</tt></td></tr>
<tr><td><q>The connection failed because the device is not connected to the internet.</q></td></tr>

<tr><td rowspan="3">-1010</td><td><tt>kCFURLErrorRedirectToNonExistentLocation</tt></td></tr>
<tr><td><tt>NSURLErrorRedirectToNonExistentLocation</tt></td></tr>
<tr><td><q>The connection was redirected to a nonexistent location.</q></td></tr>

<tr><td rowspan="3">-1011</td><td><tt>kCFURLErrorBadServerResponse</tt></td></tr>
<tr><td><tt>NSURLErrorBadServerResponse</tt></td></tr>
<tr><td><q>The connection received an invalid server response.</q></td></tr>

<tr><td rowspan="3">-1012</td><td><tt>kCFURLErrorUserCancelledAuthentication</tt></td></tr>
<tr><td><tt>NSURLErrorUserCancelledAuthentication</tt></td></tr>
<tr><td><q>The connection failed because the user cancelled required authentication.</q></td></tr>

<tr><td rowspan="3">-1013</td><td><tt>kCFURLErrorUserAuthenticationRequired</tt></td>
<tr><td><tt>NSURLErrorUserAuthenticationRequired</tt></td></tr>
<tr><td><q>The connection failed because authentication is required.</q></td></tr>

<tr><td rowspan="3">-1014</td><td><tt>kCFURLErrorZeroByteResource</tt></td></tr>
<tr><td><tt>NSURLErrorZeroByteResource</tt></td></tr>
<tr><td><q>The resource retrieved by the connection is zero bytes.</q></td></tr>

<tr><td rowspan="3">-1015</td><td><tt>kCFURLErrorCannotDecodeRawData</tt></td></tr>
<tr><td><tt>NSURLErrorCannotDecodeRawData</tt></td></tr>
<tr><td><q>The connection cannot decode data encoded with a known content encoding.</q></td></tr>

<tr><td rowspan="3">-1016</td><td><tt>kCFURLErrorCannotDecodeContentData</tt></td></tr>
<tr><td><tt>NSURLErrorCannotDecodeContentData</tt></td></tr>
<tr><td><q>The connection cannot decode data encoded with an unknown content encoding.</q></td></tr>

<tr><td rowspan="3">-1017</td><td><tt>kCFURLErrorCannotParseResponse</tt></td></tr>
<tr><td><tt>NSURLErrorCannotParseResponse</tt></td></tr>
<tr><td><q>The connection cannot parse the server’s response.</q></td></tr>

<tr><td rowspan="3">-1018</td><td><tt>kCFURLErrorInternationalRoamingOff</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The connection failed because international roaming is disabled on the device.</q></td></tr>

<tr><td rowspan="3">-1019</td><td><tt>kCFURLErrorCallIsActive</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The connection failed because a call is active.</q></td></tr>

<tr><td rowspan="3">-1020</td><td><tt>kCFURLErrorDataNotAllowed</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The connection failed because data use is currently not allowed on the device.</q></td></tr>

<tr><td rowspan="3">-1021</td><td><tt>kCFURLErrorRequestBodyStreamExhausted</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The connection failed because its request’s body stream was exhausted.</q></td></tr>

<tr><th colspan="2">File Errors</th></tr>

<tr><td rowspan="3">-1100</td><td><tt>kCFURLErrorFileDoesNotExist</tt></td></tr>
<tr><td><tt>NSURLErrorFileDoesNotExist</tt></td></tr>
<tr><td><q>The file operation failed because the file does not exist.</q></td></tr>

<tr><td rowspan="3">-1101</td><td><tt>kCFURLErrorFileIsDirectory</tt></td></tr>
<tr><td><tt>NSURLErrorFileIsDirectory</tt></td></tr>
<tr><td><q>The file operation failed because the file is a directory.</q></td></tr>

<tr><td rowspan="3">-1102</td><td><tt>kCFURLErrorNoPermissionsToReadFile</tt></td></tr>
<tr><td><tt>NSURLErrorNoPermissionsToReadFile</tt></td></tr>
<tr><td><q>The file operation failed because it does not have permission to read the file.</q></td></tr>

<tr><td rowspan="3">-1103</td><td><tt>kCFURLErrorDataLengthExceedsMaximum</tt></td></tr>
<tr><td><tt>NSURLErrorDataLengthExceedsMaximum</tt></td></tr>
<tr><td><q>The file operation failed because the file is too large.</q></td></tr>

<tr><th colspan="2">SSL Errors</th></tr>

<tr><td rowspan="3">-1200</td><td><tt>kCFURLErrorSecureConnectionFailed</tt></td></tr>
<tr><td><tt>NSURLErrorSecureConnectionFailed</tt></td></tr>
<tr><td><q>The secure connection failed for an unknown reason.</q></td></tr>

<tr><td rowspan="3">-1201</td><td><tt>kCFURLErrorServerCertificateHasBadDate</tt></td></tr>
<tr><td><tt>NSURLErrorServerCertificateHasBadDate</tt></td></tr>
<tr><td><q>The secure connection failed because the server’s certificate has an invalid date.</q></td></tr>

<tr><td rowspan="3">-1202</td><td><tt>kCFURLErrorServerCertificateUntrusted</tt></td></tr>
<tr><td><tt>NSURLErrorServerCertificateUntrusted</tt></td></tr>
<tr><td><q>The secure connection failed because the server’s certificate is not trusted.</q></td></tr>

<tr><td rowspan="3">-1203</td><td><tt>kCFURLErrorServerCertificateHasUnknownRoot</tt></td>
<tr><td><tt>NSURLErrorServerCertificateHasUnknownRoot</tt></td></tr>
<tr><td><q>The secure connection failed because the server’s certificate has an unknown root.</q></td></tr>

<tr><td rowspan="3">-1204</td><td><tt>kCFURLErrorServerCertificateNotYetValid</tt></td></tr>
<tr><td><tt>NSURLErrorServerCertificateNotYetValid</tt></td></tr>
<tr><td><q>The secure connection failed because the server’s certificate is not yet valid.</q></td></tr>

<tr><td rowspan="3">-1205</td><td><tt>kCFURLErrorClientCertificateRejected</tt></td>
<tr><td><tt>NSURLErrorClientCertificateRejected</tt></td></tr>
<tr><td><q>The secure connection failed because the client’s certificate was rejected.</q></td></tr>

<tr><td rowspan="3">-1206</td><td><tt>kCFURLErrorClientCertificateRequired</tt></td></tr>
<tr><td><tt>NSURLErrorClientCertificateRequired</tt></td></tr>
<tr><td><q>The secure connection failed because the server requires a client certificate.</q></td></tr>

<tr><th colspan="2">Download and File I/O Errors</th></tr>

<tr><td rowspan="3">-2000</td><td><tt>kCFURLErrorCannotLoadFromNetwork</tt></td></tr>
<tr><td><tt>NSURLErrorCannotLoadFromNetwork</tt></td></tr>
<tr><td><q>The connection failed because it is being required to return a cached resource, but one is not available.</q></td></tr>

<tr><td rowspan="3">-3000</td><td><tt>kCFURLErrorCannotCreateFile</tt></td></tr>
<tr><td><tt>NSURLErrorCannotCreateFile</tt></td></tr>
<tr><td><q>The file cannot be created.</q></td></tr>

<tr><td rowspan="3">-3001</td><td><tt>kCFURLErrorCannotOpenFile</tt></td></tr>
<tr><td><tt>NSURLErrorCannotOpenFile</tt></td></tr>
<tr><td><q>The file cannot be opened.</q></td></tr>

<tr><td rowspan="3">-3002</td><td><tt>kCFURLErrorCannotCloseFile</tt></td></tr>
<tr><td><tt>NSURLErrorCannotCloseFile</tt></td></tr>
<tr><td><q>The file cannot be closed.</q></td></tr>

<tr><td rowspan="3">-3003</td><td><tt>kCFURLErrorCannotWriteToFile</tt></td></tr>
<tr><td><tt>NSURLErrorCannotWriteToFile</tt></td></tr>
<tr><td><q>The file cannot be written.</q></td></tr>

<tr><td rowspan="3">-3004</td><td><tt>kCFURLErrorCannotRemoveFile</tt></td></tr>
<tr><td><tt>NSURLErrorCannotRemoveFile</tt></td></tr>
<tr><td><q>The file cannot be removed.</q></td></tr>

<tr><td rowspan="3">-3005</td><td><tt>kCFURLErrorCannotMoveFile</tt></td></tr>
<tr><td><tt>NSURLErrorCannotMoveFile</tt></td></tr>
<tr><td><q>The file cannot be moved.</q></td></tr>

<tr><td rowspan="3">-3006</td><td><tt>kCFURLErrorDownloadDecodingFailedMidStream</tt></td></tr>
<tr><td><tt>NSURLErrorDownloadDecodingFailedMidStream</tt></td></tr>
<tr><td><q>The download failed because decoding of the downloaded data failed mid-stream.</q></td></tr>

<tr><td rowspan="3">-3007</td><td><tt>kCFURLErrorDownloadDecodingFailedToComplete</tt></td></tr>
<tr><td><tt>NSURLErrorDownloadDecodingFailedToComplete</tt></td></tr>
<tr><td><q>The download failed because decoding of the downloaded data failed to complete.</q></td></tr>


<tr><th colspan="2">Cookie errors</th></tr>

<tr><td rowspan="3">-4000</td><td><tt>kCFHTTPCookieCannotParseCookieFile</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The cookie file cannot be parsed.</q></td></tr>


<tr><th colspan="2">CFNetServices Errors</th></tr>

<tr><td rowspan="3">-72000L</td><td><tt>kCFNetServiceErrorUnknown</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>An unknown error occurred.</q></td></tr>

<tr><td rowspan="3">-72001L</td><td><tt>kCFNetServiceErrorCollision</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>An attempt was made to use a name that is already in use.</q></td></tr>

<tr><td rowspan="3">-72002L</td><td><tt>kCFNetServiceErrorNotFound</tt></td></tr>
<tr><td></td></tr>
<tr><td><q><em>Not used.</em></q></td></tr>

<tr><td rowspan="3">-72003L</td><td><tt>kCFNetServiceErrorInProgress</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>A new search could not be started because a search is already in progress.</q></td></tr>

<tr><td rowspan="3">-72004L</td><td><tt>kCFNetServiceErrorBadArgument</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>A required argument was not provided or was not valid.</q></td></tr>

<tr><td rowspan="3">-72005L</td><td><tt>kCFNetServiceErrorCancel</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>The search or service was cancelled.</q></td></tr>

<tr><td rowspan="3">-72006L</td><td><tt>kCFNetServiceErrorInvalid</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>Invalid data was passed to a <tt>CFNetServices</tt> function.</q></td></tr>

<tr><td rowspan="3">-72007L</td><td><tt>kCFNetServiceErrorTimeout</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>A search failed because it timed out.</q></td></tr>

<tr><td rowspan="3">-73000L</td><td><tt>kCFNetServiceErrorDNSServiceFailure</tt></td></tr>
<tr><td></td></tr>
<tr><td><q>An error from DNS discovery; look at <tt>kCFDNSServiceFailureKey</tt> to get the error number and interpret using <tt>dnssd.h</tt></q><td></td> 
</table>

<hr>

<p>Having scrolled down through that huge table, you might be expecting the usual NSHipster philosophical wrap-up. Not this week. Do you have any idea how long it took to compile that table? It&#39;s all, like, <code>NSRepetitiveStrainInjury</code> up in here.</p>

<p>Such are the error of my ways.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 14 Oct 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:29:"http://nshipster.com/nserror/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:29:"http://nshipster.com/nserror/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:24;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:19:"Key-Value Observing";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:23460:"<p>Ask anyone who&#39;s been around the NSBlock a few times: Key-Value Observing has the <em>worst</em> API in all of Cocoa. It&#39;s awkward, verbose, and confusing. And worst of all, its terrible API belies one of the most compelling features of the framework.</p>

<p>When dealing with complicated, stateful systems, dutiful book-keeping is essential for maintaining sanity. Lest the left hand not know what the right hand doeth, objects need some way to publish and subscribe to state changes over time.</p>

<p>In Objective-C and Cocoa, there are a number of ways that these events are communicated, each with varying degrees of formality and coupling:</p>

<ul>
<li>**<code>NSNotification</code>** &amp; **<code>NSNotificationCenter</code>** provide a centralized hub through which any part of an application may notify and be notified of changes from any other part of the application. The only requirement is to know what to look for, specifically in the name of the notification. For example, <code>UIApplicationDidReceiveMemoryWarningNotification
</code> signals a low memory environment in an application.</li>
<li><strong>Key-Value Observing</strong> allows for ad-hoc, evented introspection between specific object instances by listening for changes on a particular key path. For example, a <code>UIProgressView</code> might observe the <code>numberOfBytesRead</code> of a network request to derive and update its own <code>progress</code> property.</li>
<li><strong>Delegates</strong> are a popular pattern for signaling events over a fixed set of methods to a designated handler. For example, <code>UIScrollView</code> sends <code>scrollViewDidScroll:</code> to its delegate each time its scroll offset changes.</li>
<li><strong>Callbacks</strong> of various sorts, whether block properties like <code>NSOperation -completionBlock</code>, which trigger after <code>isFinished == YES</code>, or C function pointers passed as hooks into functions like <code>SCNetworkReachabilitySetCallback(3)</code>.</li>
</ul>

<p>Of all of these methods, Key-Value Observing is arguably the least well-understood. So this week, NSHipster will endeavor to provide some much-needed clarification and notion of best practices to this situation. To the casual observer, this may seem an exercise in futility, but subscribers to this publication know better.</p>

<hr>

<p><code>&lt;NSKeyValueObserving&gt;</code>, or KVO, is an informal protocol that defines a common mechanism for observing and notifying state changes between objects. As an informal protocol, you won&#39;t see classes bragging about their conformance to it (it&#39;s just implicitly assumed for all subclasses of <code>NSObject</code>).</p>

<p>The main value proposition of KVO is rather compelling: any object can subscribe to be notified about state changes in any other object. Most of this is built-in, automatic, and transparent.</p>

<blockquote>
<p>For context, similar manifestations of this observer pattern are the secret sauce of most modern Javascript frameworks, such as <a href="http://backbonejs.org">Backbone.js</a> and <a href="http://emberjs.com">Ember.js</a>.</p>
</blockquote>

<h2>Subscribing</h2>

<p>Objects can have observers added for a particular key path, which, as described in <a href="http://nshipster.com/kvc-collection-operators/">the KVC operators article</a>, are dot-separated keys that specify a sequence of properties. Most of the time with KVO, these are just the top-level properties on the object.</p>

<p>The method used to add an observer is <code>–addObserver:forKeyPath:options:context:</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addObserver:</span><span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="p">)</span><span class="nv">observer</span>
         <span class="nl">forKeyPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyPath</span>
            <span class="nl">options:</span><span class="p">(</span><span class="n">NSKeyValueObservingOptions</span><span class="p">)</span><span class="nv">options</span>
            <span class="nl">context:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span>
</code></pre></div>
<blockquote>
<ul>
<li><code>observer</code>:  The object to register for KVO notifications. The observer must implement the key-value observing method observeValueForKeyPath:ofObject:change:context:.</li>
<li><code>keyPath</code>: The key path, relative to the receiver, of the property to observe. This value must not be <code>nil</code>.</li>
<li><code>options</code>: A combination of the <code>NSKeyValueObservingOptions</code> values that specifies what is included in observation notifications. For possible values, see &quot;NSKeyValueObservingOptions&quot;.</li>
<li><code>context</code>: Arbitrary data that is passed to <code>observer</code> in <code>observeValueForKeyPath:ofObject:change:context:</code>.</li>
</ul>
</blockquote>

<p>Yuck. What makes this API so unsightly is the fact that those last two parameters are almost always <code>0</code> and <code>NULL</code>, respectively.</p>

<p><code>options</code> refers to a bitmask of <code>NSKeyValueObservingOptions</code>. Pay particular attention to <code>NSKeyValueObservingOptionNew</code> &amp; <code>NSKeyValueObservingOptionOld</code> as those are the options you&#39;ll most likely use, if any. Feel free to skim over <code>NSKeyValueObservingOptionInitial</code> &amp; <code>NSKeyValueObservingOptionPrior</code>:</p>

<h3>NSKeyValueObservingOptions</h3>

<blockquote>
<ul>
<li><code>NSKeyValueObservingOptionNew</code>: Indicates that the change dictionary should provide the new attribute value, if applicable.</li>
<li><code>NSKeyValueObservingOptionOld</code>: Indicates that the change dictionary should contain the old attribute value, if applicable.</li>
<li><code>NSKeyValueObservingOptionInitial</code>: If specified, a notification should be sent to the observer immediately, before the observer registration method even returns.
The change dictionary in the notification will always contain an <code>NSKeyValueChangeNewKey</code> entry if <code>NSKeyValueObservingOptionNew</code> is also specified but will never contain an <code>NSKeyValueChangeOldKey</code> entry. (In an initial notification the current value of the observed property may be old, but it&#39;s new to the observer.) You can use this option instead of explicitly invoking, at the same time, code that is also invoked by the observer&#39;s <code>observeValueForKeyPath:ofObject:change:context:</code> method. When this option is used with <code>addObserver:forKeyPath:options:context:</code> a notification will be sent for each indexed object to which the observer is being added.</li>
<li><code>NSKeyValueObservingOptionPrior</code>: Whether separate notifications should be sent to the observer before and after each change, instead of a single notification after the change.
The change dictionary in a notification sent before a change always contains an <code>NSKeyValueChangeNotificationIsPriorKey</code> entry whose value is <code>@YES</code>, but never contains an <code>NSKeyValueChangeNewKey</code> entry. When this option is specified the change dictionary in a notification sent after a change contains the same entries that it would contain if this option were not specified. You can use this option when the observer&#39;s own key-value observing-compliance requires it to invoke one of the <code>-willChange...</code> methods for one of its own properties, and the value of that property depends on the value of the observed object&#39;s property. (In that situation it&#39;s too late to easily invoke <code>-willChange...</code> properly in response to receiving an <code>observeValueForKeyPath:ofObject:change:context:</code> message after the change.)</li>
</ul>
</blockquote>

<p>These options allow an object to get the values before and after the change. In practice, this is usually not necessary, since the new value is generally available from the current value of the property.</p>

<p>That said, <code>NSKeyValueObservingOptionInitial</code> can be helpful for reducing the code paths when responding to KVO events. For instance, if you have a method that dynamically enables a button based on the <code>text</code> value of a field, passing <code>NSKeyValueObservingOptionInitial</code> will have the event fire with its initial state once the observer is added.</p>

<p>As for <code>context</code>, this parameter is a value that can be used later to differentiate between observations of different objects with the same key path. It&#39;s a bit complicated, and will be discussed later.</p>

<h2>Responding</h2>

<p>Another aspect of KVO that lends to its ugliness is the fact that there is no way to specify custom selectors to handle observations, as one might be used to from the Target-Action pattern used by controls.</p>

<p>Instead, all changes for observers are funneled through a single method—<code>-observeValueForKeyPath:ofObject:change:context:</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">observeValueForKeyPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyPath</span>
                      <span class="nl">ofObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span>
                        <span class="nl">change:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">change</span>
                       <span class="nl">context:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span>
</code></pre></div>
<p>Those parameters are the same as what were specified in <code>–addObserver:forKeyPath:options:context:</code>, with the exception of <code>change</code>, which are populated from whichever <code>NSKeyValueObservingOptions</code> <code>options</code> were used.</p>

<p>A typical implementation of this method looks something like this:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">observeValueForKeyPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyPath</span>
                      <span class="nl">ofObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span>
                        <span class="nl">change:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">change</span>
                       <span class="nl">context:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">([</span><span class="n">keyPath</span> <span class="n">isEqualToString</span><span class="o">:</span><span class="s">@&quot;state&quot;</span><span class="p">])</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Depending on how many kinds of objects are being observed by a single class, this method may also introduce <code>-isKindOfObject:</code> or <code>-respondsToSelector:</code> in order to definitively identify the kind of event being passed. However, the safest method is to do an equality check to <code>context</code>—especially when dealing with subclasses whose parents observe the same keypath.</p>

<h3>Correct Context Declarations</h3>

<p>What makes a good <code>context</code> value? Here&#39;s a suggestion:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">static</span> <span class="kt">void</span> <span class="o">*</span> <span class="n">XXContext</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">XXContext</span><span class="p">;</span>
</code></pre></div>
<p>It&#39;s that simple: a static value that stores its own pointer. It means nothing on its own, which makes it rather perfect for <code>&lt;NSKeyValueObserving&gt;</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">observeValueForKeyPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyPath</span>
                      <span class="nl">ofObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span>
                        <span class="nl">change:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">change</span>
                       <span class="nl">context:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">context</span> <span class="o">==</span> <span class="n">XXContext</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">([</span><span class="n">keyPath</span> <span class="n">isEqualToString</span><span class="o">:</span><span class="n">NSStringFromSelector</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="n">isFinished</span><span class="p">))])</span> <span class="p">{</span>

      <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h3>Better Key Paths</h3>

<p>Passing strings as key paths is strictly worse than using properties directly, as any typo or misspelling won&#39;t be caught by the compiler, and will cause things to not work.</p>

<p>A clever workaround to this is to use <code>NSStringFromSelector</code> and a <code>@selector</code> literal value:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSStringFromSelector</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="n">isFinished</span><span class="p">))</span>
</code></pre></div>
<p>Since <code>@selector</code> looks through all available selectors in the target, this won&#39;t prevent all mistakes, but it will catch most of them—including breaking changes made by Xcode automatic refactoring.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">observeValueForKeyPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyPath</span>
                      <span class="nl">ofObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span>
                        <span class="nl">change:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">change</span>
                       <span class="nl">context:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">object</span> <span class="n">isKindOfClass</span><span class="o">:</span><span class="p">[</span><span class="n">NSOperation</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">([</span><span class="n">keyPath</span> <span class="n">isEqualToString</span><span class="o">:</span><span class="n">NSStringFromSelector</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="n">isFinished</span><span class="p">))])</span> <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(...)</span> <span class="p">{</span>
        <span class="c1">// ...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<h2>Unsubscribing</h2>

<p>When an observer is finished listening for changes on an object, it is expected to call <code>–removeObserver:forKeyPath:context:</code>. This will often either be called in <code>-observeValueForKeyPath:ofObject:change:context:</code>, or <code>-dealloc</code> (or a similar destruction method).</p>

<h3>Safe Unsubscribe with <code>@try</code> / <code>@catch</code></h3>

<p>Perhaps the most pronounced annoyance with KVO is how it gets you at the end. If you make a call to <code>–removeObserver:forKeyPath:context:</code> when the object is <em>not</em> registered as an observer (whether because it was already unregistered or not registered in the first place). The kicker is that <em>there&#39;s no built-in way to even check if an object is registered</em>!</p>

<p>Which causes one to rely on a rather unfortunate cudgel <code>@try</code> with an unhandled <code>@catch</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">observeValueForKeyPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">keyPath</span>
                      <span class="nl">ofObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span>
                        <span class="nl">change:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">change</span>
                       <span class="nl">context:</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="nv">context</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">([</span><span class="n">keyPath</span> <span class="n">isEqualToString</span><span class="o">:</span><span class="n">NSStringFromSelector</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="n">isFinished</span><span class="p">))])</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">([</span><span class="n">object</span> <span class="n">isFinished</span><span class="p">])</span> <span class="p">{</span>
          <span class="k">@try</span> <span class="p">{</span>
              <span class="p">[</span><span class="n">object</span> <span class="n">removeObserver</span><span class="o">:</span><span class="n">self</span> <span class="n">forKeyPath</span><span class="o">:</span><span class="n">NSStringFromSelector</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="n">isFinished</span><span class="p">))];</span>
          <span class="p">}</span>
          <span class="k">@catch</span> <span class="p">(</span><span class="n">NSException</span> <span class="o">*</span> <span class="n">__unused</span> <span class="n">exception</span><span class="p">)</span> <span class="p">{}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>Granted, <em>not</em> handling a caught exception, as in this example, is waving the <code>[UIColor whiteColor]</code> flag of surrender. Therefore, one should only really use this technique when faced with intermittent crashes which cannot be remedied by normal book-keeping (whether due to race conditions or undocumented behavior from a superclass).</p>

<h2>Automatic Property Notifications</h2>

<p>KVO is made useful by its near-universal adoption. Because of this, much of the work necessary to get everything hooked up correctly is automatically taken care of by the compiler and runtime.</p>

<blockquote>
<p>Classes can opt-out of automatic KVO by overriding <code>+automaticallyNotifiesObserversForKey:</code> and returning <code>NO</code>.</p>
</blockquote>

<p>But what about compound or derived values? Let&#39;s say you have an object with a <code>@dynamic</code>, <code>readonly</code> <code>address</code> property, which reads and formats its <code>streetAddress</code>, <code>locality</code>, <code>region</code>, and <code>postalCode</code>?</p>

<p>Well, you can implement the method <code>keyPathsForValuesAffectingAddress</code> (or its less magical catch-all, <code>+keyPathsForValuesAffectingValueForKey:</code>):</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">+</span> <span class="p">(</span><span class="n">NSSet</span> <span class="o">*</span><span class="p">)</span><span class="nf">keyPathsForValuesAffectingAddress</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">NSSet</span> <span class="n">setWithObjects</span><span class="o">:</span><span class="n">NSStringFromSelector</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="n">streetAddress</span><span class="p">)),</span> <span class="n">NSStringFromSelector</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="n">locality</span><span class="p">)),</span> <span class="n">NSStringFromSelector</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="n">region</span><span class="p">)),</span> <span class="n">NSStringFromSelector</span><span class="p">(</span><span class="k">@selector</span><span class="p">(</span><span class="n">postalCode</span><span class="p">)),</span> <span class="nb">nil</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<hr>

<p>So there you have it: some general observations and best practices for KVO. To an enterprising NSHipster, KVO can be a powerful substrate on top of which clever and powerful abstractions can be built. Use it wisely, and understand the rules and conventions to make the most of it in your own application.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 07 Oct 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:41:"http://nshipster.com/key-value-observing/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:41:"http://nshipster.com/key-value-observing/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:25;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:33:"Xcode Key Bindings &amp; Gestures";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:8507:"<p>The extent to which programming-as-craft is compared to manual disciplines like woodworking is tiresome. It&#39;s absolutely the case that one should know and maintain their tools as well as a carpenter or metalsmith, but... I mean, c&#39;mon. One would think that an industry demanding the skills of ninjas and rockstars would mix it up a little: &quot;keep your shurikens polished, sharp, and hidden&quot; or &quot;tune your guitar and condition your hair twice daily&quot;.</p>

<p>Here at NSHipster, the advice is simple and only slightly allegorical: &quot;Xcode is your mustache, so keep it trimmed, waxed to a sharp point, and free of bugs.&quot;</p>

<p>Anyway, a few weeks ago, we looked at how <a href="http://nshipster.com/xcode-snippets/">Xcode Snippets</a> can make you more productive by reducing the amount of boilerplate code you have to type out. This week, we&#39;re going to pick up on that thread and cover the essential key bindings and gestures.</p>

<p>Xcode key bindings and gestures not only shave off seconds of precious work, but make you look more confident, competent, and cromulent in the process. Learn the following tricks of the trade and join the elite set of Xcode power users.</p>

<hr>

<blockquote>
<p>For your reference, here is a legend of the common modifier key symbols (as well as a symbol for click <a href="http://en.wikipedia.org/wiki/Click_consonant">shamelessly borrowed from the International Phonetic Alphabet</a>):</p>
</blockquote>

<table id="xcode-key-bindings-modifiers">
  <thead>
    <tr>
      <th>Command</th>
      <th>Control</th>
      <th>Option</th>
      <th>Shift</th>
      <th>Click</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><tt>⌘</tt></td>
      <td><tt>⌃</tt></td>
      <td><tt>⌥</tt></td>
      <td><tt>⇧</tt></td>
      <td><tt>ʘ</tt></td>
    </tr>
  </tbody>
</table>

<h2>Open Quickly (<code>⇧⌘O</code>)</h2>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-shortcuts-quick-open.png" alt="Open Quickly"></p>

<p>Learn to rely less on the Project Navigator by learning to love Open Quickly. There&#39;s a lot to love, too—with support for partial case- and position-insensitive matches, Xcode does a great job of finding what you want with just a minimal amount of input on your part.</p>

<hr>

<h2>Quick Documentation (<code>⌥ʘ</code> on Symbol / Three-Finger Tap) <br/> Open Documentation (<code>⌥ʘʘ</code> on Symbol)</h2>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-shortcuts-quick-documentation.gif" alt="Quick Documentation"></p>

<p>Quick Documentation is probably the first Xcode shortcut developers should learn. Just alt-click (or three-finger tap) any class, variable, or constant value, and Xcode will give you a quick rundown of what you&#39;re looking at. Alt-double-click to bring up the documentation window, opened to the relevant entry.</p>

<h2>Jump to Definition (<code>⌘ʘ</code> on Symbol)</h2>

<p>Also well-know to an expert Xcoder&#39;s workflow is Jump to Definition, which opens the editor window to the relevant <code>@interface</code> definition or constant declaration in a <code>.h</code> file. This is especially useful for getting a raw look at system frameworks like Foundation, to get an idea of what&#39;s <em>really</em> going on behind-the-scenes.</p>

<h2>Jump to Next Counterpart (<code>^⌘↑</code> / <code>^⌘↓</code> / Three-Finger Vertical Swipe)</h2>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-shortcuts-counterpart.gif" alt="Jump to Next Counterpart"></p>

<p>Last, but certainly not least, there&#39;s Jump to Next Counterpart, which is very likely the shortcut used the most on any given day. Quickly switch between a <code>.h</code> header and it&#39;s corresponding <code>.m</code> implementation with a simple three-finger swipe up or down (or <code>^⌘↑</code> / <code>^⌘↓</code> if you feel so inclined).</p>

<hr>

<h2>Comment Selection / Current Line (<code>⌘/</code>)</h2>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-shortcuts-comment.gif" alt="Comment Selection"></p>

<p>Sure, you <em>could</em> be debugging the &quot;right way&quot; by setting breakpoints and being clever with your code paths, but there&#39;s quite so refreshingly simple and powerful as phasing code in and out of computational existence with a comment. Add or remove <code>//</code> comments to the current line or selection.</p>

<h2>Show Standard Editor (<code>⌘↵</code>) <br/> Show Assistant Editor (<code>⌥⌘↵</code>) <br/> Show Version Editor (<code>⌥⇧⌘↵</code>)</h2>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-shortcuts-editors.gif" alt="Editors"></p>

<p>For how useful the Assistant Editor can be, surprisingly few developers can actually remember the key combo to turn it on and off. But now with <code>⌘↵</code> and <code>⌥⌘↵</code> fresh in your mind, you&#39;ll be helping Xcode help yourself more often.</p>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-shortcuts-assistant-editor-position.png" alt="Assistant Editor Position"></p>

<p>As an aside, if you&#39;re not big on how editors are stacking, a different horizontal or vertical arrangement can be chosen in View &gt; Assistant Editor.</p>

<hr>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-shortcuts-panels.gif" alt="Panels"></p>

<p>Sandwiching the editors on the left and right flanks, the Navigator and Utilities panels encircle your code in their loving embrace. Learning how to get them to show what&#39;s useful and GTFO when needed are critical for inner peace and maximum productivity.</p>

<h2>Show/Hide Navigator Panel (<code>⌘0</code>)</h2>

<h2>Select Navigator (<code>⌘1, ..., ⌘8</code>)</h2>

<ol>
<li>Project Navigator</li>
<li>Symbol Navigator</li>
<li>Find Navigator</li>
<li>Issue Navigator</li>
<li>Test Navigator</li>
<li>Debug Navigator</li>
<li>Breakpoint Navigator</li>
<li>Log Navigator</li>
</ol>

<h2>Show/Hide Utilities Panel (<code>⌥⌘0</code>)</h2>

<h2>Select Utilities Panel (<code>⌥⌘1, ⌥⌘2, ...</code>)</h2>

<h3>Source File</h3>

<ol>
<li>File Inspector</li>
<li>Quick Help</li>
</ol>

<h3>Interface Builder</h3>

<ol>
<li>File Inspector</li>
<li>Quick Help</li>
<li>Identity Inspector</li>
<li>Attributes Inspector</li>
<li>Size Inspector</li>
<li>Connections Inspector</li>
</ol>

<h2>Show / Hide Debug Area (<code>⇧⌘Y</code>) <br/> Activate Console (<code>⇧⌘C</code>)</h2>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-shortcuts-debug-area.gif" alt="Show / Hide Debug Area"></p>

<p>Anyone miss the option in Xcode 3 to have a detached debugger window? Yeah, me too.</p>

<p>Knowing how to toggle the debug area and activate the console in a single keystroke may be a shallow consolation, but it does help take the edge off of the pain or loss.</p>

<hr>

<h2>Find (<code>⌘F</code>) /<br/>Find &amp; Replace (<code>⌥⌘F</code>) /<br/>Find in Project (<code>⇧⌘F</code>) /<br/>Find &amp; Replace in Project (<code>⌥⇧⌘F</code>)</h2>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-shortcuts-find.gif" alt="Find"></p>

<p>For when Xcode&#39;s refactoring capabilities come up short... which is to say: often. On the plus side, Xcode allows reference, definition, and regular expression search in addition to literal text.</p>

<h2>Spelling &amp; Grammar (<code>⌘:</code>)</h2>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-shortcuts-spelling-and-grammar.png" alt="Spelling &amp; Grammar"></p>

<p>All-powerful as Clang is, it still can&#39;t help your nightmarish grammar and punctuation in your comments. Especially for anyone releasing code into the open-source wilds, do yourself a favor and give it a once-over with a built-in OS X spelling and grammar check.</p>

<hr>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-shortcuts-preferences.png" alt="Xcode Shortcut Preferences"></p>

<p>But, of course, the fun doesn&#39;t stop there! Like any respectable editor, Xcode allows you to customize the key bindings for every menu item and action across the app.</p>

<p>Here are a few non-standard key bindings that you might find useful:</p>

<ul>
<li><code>^w</code>: Close Document (replaces Delete to Mark)</li>
<li><code>^⌘/</code>: Show / Hide Toolbar</li>
<li><code>^⌘F</code>: <em>None</em> (removes Full Screen (at least until Mavericks))</li>
</ul>

<p>Got any useful or clever bindings to share? Tweet them to <a href="https://twitter.com/NSHipster">@NSHipster</a>!</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 30 Sep 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:53:"http://nshipster.com/xcode-key-bindings-and-gestures/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:53:"http://nshipster.com/xcode-key-bindings-and-gestures/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:26;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:5:"iOS 7";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:27109:"<p>With the NDA finally lifted, we can finally talk about all of the amazing new APIs in iOS 7. And there are a <em>lot</em> of them. &quot;1500 new APIs&quot;, by Apple&#39;s count during the WWDC Keynote. (Granted, a good portion of that could just be all of the changes from <code>id</code> to <code>instancetype</code>, but that&#39;s a huge number, regardless).</p>

<p>We&#39;ll be going over many of the new features iOS 7 in depth over the coming weeks, but with all of the excitement around this major release, this week&#39;s issue will hit on some of the gems hiding in plain sight: <code>NSData</code> Base64 encoding, <code>NSURLComponents</code>, <code>NSProgress</code>, <code>NSProcessInfo</code> activities, <code>CIDetectorSmile</code>, <code>CIDetectorEyeBlink</code>, <code>SSReadingList</code>, <code>AVCaptureMetaDataOutput</code>, <code>AVSpeechSynthesizer</code>, and <code>MKDistanceFormatter</code>.</p>

<hr>

<h2>NSData (NSDataBase64Encoding)</h2>

<p><a href="http://en.wikipedia.org/wiki/Base64">Base64</a> is a general term for encoding binary data as ASCII text. This is used all over the place on the web, since many core technologies are designed to support text, but not raw binary. For instance, CSS can embed images with <a href="http://en.wikipedia.org/wiki/Data_URI_scheme">inline <code>data://</code> URIs</a>, which are often Base64-encoded. Another example is <a href="http://en.wikipedia.org/wiki/Basic_access_authentication">Basic <code>Authentication</code> headers</a>, which Base64-encodes its username/password pair, which is marginally better than having them completely in the clear.</p>

<p>For the longest time, this boringly essential function was completely MIA, leaving thousands of developers to copy-paste random code snippets from forum threads. It was an omission as conspicuous and annoying as JSON pre-iOS 5.</p>

<p>But no longer! iOS 7 finally bakes-in Base64:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="s">@&quot;Lorem ipsum dolor sit amet.&quot;</span><span class="p">;</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">base64EncodedString</span> <span class="o">=</span> <span class="p">[[</span><span class="n">string</span> <span class="n">dataUsingEncoding</span><span class="o">:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]</span> <span class="n">base64EncodedStringWithOptions</span><span class="o">:</span><span class="mi">0</span><span class="p">];</span>

<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">base64EncodedString</span><span class="p">);</span> <span class="c1">// @&quot;TG9yZW0gaXBzdW0gZG9sYXIgc2l0IGFtZXQu&quot;</span>
</code></pre></div>
<h2>NSURLComponents &amp; NSCharacterSet (NSURLUtilities)</h2>

<p>Foundation is blessed with a wealth of functionality for working with URIs. Unfortunately, many of the APIs for manipulating URLs are strewn across <code>NSString</code>, since <code>NSURL</code> is immutable.</p>

<p><code>NSURLComponents</code> dramatically improves this situation. Think of it as <code>NSMutableURL</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSURLComponents</span> <span class="o">*</span><span class="n">components</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURLComponents</span> <span class="n">componentsWithString</span><span class="o">:</span><span class="s">@&quot;http://nshipster.com&quot;</span><span class="p">];</span>
<span class="n">components</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="s">@&quot;/iOS7&quot;</span><span class="p">;</span>
<span class="n">components</span><span class="p">.</span><span class="n">query</span> <span class="o">=</span> <span class="s">@&quot;foo=bar&quot;</span><span class="p">;</span>

<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">components</span><span class="p">.</span><span class="n">scheme</span><span class="p">);</span> <span class="c1">// @&quot;http&quot;</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">components</span> <span class="n">URL</span><span class="p">]);</span> <span class="c1">// @&quot;http://nshipster.com/iOS7?foo=bar&quot;</span>
</code></pre></div>
<p>Each property for URL components also has a <code>percentEncoded*</code> variation (e.g. <code>user</code> &amp; <code>percentEncodedUser</code>), which forgoes any additional URI percent encoding of special characters.</p>

<p>Which characters are special, you ask? Well, it depends on what part of the URL you&#39;re talking about. Good thing that <code>NSCharacterSet</code> adds a new category for allowed URL characters in iOS 7:</p>

<ul>
<li><code>+ (id)URLUserAllowedCharacterSet</code></li>
<li><code>+ (id)URLPasswordAllowedCharacterSet</code></li>
<li><code>+ (id)URLHostAllowedCharacterSet</code></li>
<li><code>+ (id)URLPathAllowedCharacterSet</code></li>
<li><code>+ (id)URLQueryAllowedCharacterSet</code></li>
<li><code>+ (id)URLFragmentAllowedCharacterSet</code></li>
</ul>

<h2>NSProgress</h2>

<p><code>NSProgress</code> is a tough class to describe. It acts as both an observer and a delegate / coordinator, acting as a handle for reporting and monitoring progress. It integrates with system-level processes on OS X, but can also be plugged into user-facing UI. It can specify handlers for pausing and canceling, which then forward onto the operation actually doing the work.</p>

<p>Anything with a notion of completed and total units is a candidate for <code>NSProgress</code>, whether it&#39;s the bytes written to a file, the number of frames in a large render job, or the files downloaded from a server.</p>

<p><code>NSProgress</code> can be used to simply report overall progress in a localized way:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSProgress</span> <span class="o">*</span><span class="n">progress</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSProgress</span> <span class="n">progressWithTotalUnitCount</span><span class="o">:</span><span class="mi">100</span><span class="p">];</span>
<span class="n">progress</span><span class="p">.</span><span class="n">completedUnitCount</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>

<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">progress</span> <span class="n">localizedDescription</span><span class="p">]);</span> <span class="c1">// 42% completed</span>
</code></pre></div>
<p>...or it can be given a handler for stopping work entirely:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSTimer</span> <span class="o">*</span><span class="n">timer</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSTimer</span> <span class="n">timerWithTimeInterval</span><span class="o">:</span><span class="mf">1.0</span> 
                                         <span class="n">target</span><span class="o">:</span><span class="n">self</span> 
                                       <span class="n">selector</span><span class="o">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">incrementCompletedUnitCount</span><span class="o">:</span><span class="p">)</span> <span class="n">userInfo</span><span class="o">:</span><span class="nb">nil</span> 
                                        <span class="n">repeats</span><span class="o">:</span><span class="nb">YES</span><span class="p">];</span>

<span class="n">progress</span><span class="p">.</span><span class="n">cancellationHandler</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
    <span class="p">[</span><span class="n">timer</span> <span class="n">invalidate</span><span class="p">];</span>
<span class="p">};</span>

<span class="p">[</span><span class="n">progress</span> <span class="n">cancel</span><span class="p">];</span>
</code></pre></div>
<p><code>NSProgress</code> makes a lot more sense in the context of Mac OS X 10.9 Mavericks, but for now, it remains a useful class for encapsulating the shared patterns of work units.</p>

<h2>NSArray -firstObject</h2>

<p>Rejoice! The <code>NSRangeException</code>-dodging convenience of <code>-lastObject</code> has finally been extended to the first member of an <code>NSArray</code>. (Well, it <em>has</em> been there as a private API since ~iOS 4, but that&#39;s water under the bridge now).</p>

<p>Behold!</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSArray</span> <span class="o">*</span><span class="n">array</span> <span class="o">=</span> <span class="p">@[</span><span class="mi">@1</span><span class="p">,</span> <span class="mi">@2</span><span class="p">,</span> <span class="mi">@3</span><span class="p">];</span>

<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;First Object: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">array</span> <span class="n">firstObject</span><span class="p">]);</span> <span class="c1">// 1</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Last Object: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">array</span> <span class="n">lastObject</span><span class="p">]);</span> <span class="c1">// 3</span>
</code></pre></div>
<p>Refreshing!</p>

<h2>CIDetectorSmile &amp; CIDetectorEyeBlink</h2>

<blockquote>
<p>As a random aside, shouldn&#39;t it be a cause for concern that the device most capable of taking embarrassing photos of ourselves is also the device most capable of distributing it to millions or people? Just a thought.</p>
</blockquote>

<p>Since iOS 5, the Core Image framework has provided facial detection and recognition functionality through the <code>CIDetector</code> class. If it wasn&#39;t insaneballs enough that we could detect faces in photos, in iOS 7 we can even tell if that face is smiling or has its eyes closed. *shudder*</p>

<p>In yet another free app idea, here&#39;s a snippet that might be used by a camera that only saves pictures of smiling faces:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">@</span><span class="n">import</span> <span class="n">CoreImage</span><span class="p">;</span>
</code></pre></div><div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">CIDetector</span> <span class="o">*</span><span class="n">smileDetector</span> <span class="o">=</span> <span class="p">[</span><span class="n">CIDetector</span> <span class="n">detectorOfType</span><span class="o">:</span><span class="n">CIDetectorTypeFace</span>
                                <span class="nl">context:</span><span class="n">context</span> 
                                <span class="n">options</span><span class="o">:</span><span class="p">@{</span><span class="n">CIDetectorTracking</span><span class="o">:</span> <span class="p">@</span><span class="nb">YES</span><span class="p">,</span> 
                                          <span class="n">CIDetectorAccuracy</span><span class="o">:</span> <span class="n">CIDetectorAccuracyLow</span><span class="p">}];</span>
<span class="n">NSArray</span> <span class="o">*</span><span class="n">features</span> <span class="o">=</span> <span class="p">[</span><span class="n">smileDetector</span> <span class="n">featuresInImage</span><span class="o">:</span><span class="n">image</span> <span class="n">options</span><span class="o">:</span><span class="p">@{</span><span class="n">CIDetectorSmile</span><span class="o">:</span><span class="p">@</span><span class="nb">YES</span><span class="p">}];</span>
<span class="k">if</span> <span class="p">(([</span><span class="n">features</span> <span class="n">count</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(((</span><span class="n">CIFaceFeature</span> <span class="o">*</span><span class="p">)</span><span class="n">features</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="n">hasSmile</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">UIImageWriteToSavedPhotosAlbum</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">self</span><span class="p">,</span> <span class="k">@selector</span><span class="p">(</span><span class="n">didFinishWritingImage</span><span class="p">),</span> <span class="n">features</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">self</span><span class="p">.</span><span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;Say Cheese!&quot;</span>
<span class="p">}</span>
</code></pre></div>
<h2>AVCaptureMetaDataOutput</h2>

<p>Scan UPCs, QR codes, and barcodes of all varieties with <code>AVCaptureMetaDataOutput</code>, new to iOS 7. All you need to do is set it up as the output of an <code>AVCaptureSession</code>, and implement the <code>captureOutput:didOutputMetadataObjects:fromConnection:</code> method accordingly:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">@</span><span class="n">import</span> <span class="n">AVFoundation</span><span class="p">;</span>
</code></pre></div><div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">AVCaptureSession</span> <span class="o">*</span><span class="n">session</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AVCaptureSession</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="n">AVCaptureDevice</span> <span class="o">*</span><span class="n">device</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVCaptureDevice</span> <span class="n">defaultDeviceWithMediaType</span><span class="o">:</span><span class="n">AVMediaTypeVideo</span><span class="p">];</span>
<span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>

<span class="n">AVCaptureDeviceInput</span> <span class="o">*</span><span class="n">input</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVCaptureDeviceInput</span> <span class="n">deviceInputWithDevice</span><span class="o">:</span><span class="n">device</span>
                                                                    <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
<span class="k">if</span> <span class="p">(</span><span class="n">input</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">session</span> <span class="n">addInput</span><span class="o">:</span><span class="n">input</span><span class="p">];</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Error: %@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">AVCaptureMetadataOutput</span> <span class="o">*</span><span class="n">output</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AVCaptureMetadataOutput</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="p">[</span><span class="n">output</span> <span class="n">setMetadataObjectsDelegate</span><span class="o">:</span><span class="n">self</span> <span class="n">queue</span><span class="o">:</span><span class="n">dispatch_get_main_queue</span><span class="p">()];</span>
<span class="p">[</span><span class="n">session</span> <span class="n">addOutput</span><span class="o">:</span><span class="n">output</span><span class="p">];</span>
<span class="p">[</span><span class="n">output</span> <span class="n">setMetadataObjectTypes</span><span class="o">:</span><span class="p">@[</span><span class="n">AVMetadataObjectTypeQRCode</span><span class="p">]];</span>

<span class="p">[</span><span class="n">session</span> <span class="n">startRunning</span><span class="p">];</span>
</code></pre></div><div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#pragma mark - AVCaptureMetadataOutputObjectsDelegate</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">captureOutput:</span><span class="p">(</span><span class="n">AVCaptureOutput</span> <span class="o">*</span><span class="p">)</span><span class="nv">captureOutput</span>
<span class="nl">didOutputMetadataObjects:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">metadataObjects</span>
       <span class="nl">fromConnection:</span><span class="p">(</span><span class="n">AVCaptureConnection</span> <span class="o">*</span><span class="p">)</span><span class="nv">connection</span>
<span class="p">{</span>
    <span class="n">NSString</span> <span class="o">*</span><span class="n">QRCode</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">AVMetadataObject</span> <span class="o">*</span><span class="n">metadata</span> <span class="k">in</span> <span class="n">metadataObjects</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">([</span><span class="n">metadata</span><span class="p">.</span><span class="n">type</span> <span class="n">isEqualToString</span><span class="o">:</span><span class="n">AVMetadataObjectTypeQRCode</span><span class="p">])</span> <span class="p">{</span>
            <span class="c1">// This will never happen; nobody has ever scanned a QR code... ever</span>
            <span class="n">QRCode</span> <span class="o">=</span> <span class="p">[(</span><span class="n">AVMetadataMachineReadableCodeObject</span> <span class="o">*</span><span class="p">)</span><span class="n">metadata</span> <span class="n">stringValue</span><span class="p">];</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;QR Code: %@&quot;</span><span class="p">,</span> <span class="n">QRCode</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p><code>AVFoundation</code> supports every code you&#39;ve heard of (and probably a few that you haven&#39;t):</p>

<ul>
<li><code>AVMetadataObjectTypeUPCECode</code></li>
<li><code>AVMetadataObjectTypeCode39Code</code></li>
<li><code>AVMetadataObjectTypeCode39Mod43Code</code></li>
<li><code>AVMetadataObjectTypeEAN13Code</code></li>
<li><code>AVMetadataObjectTypeEAN8Code</code></li>
<li><code>AVMetadataObjectTypeCode93Code</code></li>
<li><code>AVMetadataObjectTypeCode128Code</code></li>
<li><code>AVMetadataObjectTypePDF417Code</code></li>
<li><code>AVMetadataObjectTypeQRCode</code></li>
<li><code>AVMetadataObjectTypeAztecCode</code></li>
</ul>

<p>If nothing else, <code>AVCaptureMetaDataOutput</code> makes it possible to easily create a Passbook pass reader for the iPhone and iPad. There&#39;s still a lot of unrealized potential in Passbook, so here&#39;s to hoping that this API will be a factor in more widespread adoption.</p>

<h2>SSReadingList</h2>

<p>Even though the number of people who have actually read something saved for later is only marginally greater than <a href="http://picturesofpeoplescanningqrcodes.tumblr.com">the number of people who have ever used a QR code</a>, it&#39;s nice that iOS 7 adds a way to add items to the Safari reading list with the new Safari Services framework.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">@</span><span class="n">import</span> <span class="n">SafariServices</span><span class="p">;</span>
</code></pre></div><div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSURL</span> <span class="o">*</span><span class="n">URL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="n">URLWithString</span><span class="o">:</span><span class="s">@&quot;http://nshipster.com/ios7&quot;</span><span class="p">];</span>
<span class="p">[[</span><span class="n">SSReadingList</span> <span class="n">defaultReadingList</span><span class="p">]</span> <span class="n">addReadingListItemWithURL</span><span class="o">:</span><span class="n">URL</span>
                                                        <span class="nl">title:</span><span class="s">@&quot;NSHipster&quot;</span>
                                                  <span class="nl">previewText:</span><span class="s">@&quot;...&quot;</span> 
                                                        <span class="n">error</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span>
</code></pre></div>
<h2>AVSpeechSynthesizer</h2>

<p>Text-to-Speech has been the killer feature of computers for <a href="http://nshipster.com/uiaccessibility/">accessibility</a> and <a href="http://nshipster.com/icloud/">pranking</a> enthusiasts since its inception in the late 1960s.</p>

<p>iOS 7 brings the power of Siri with the convenience of a <a href="http://en.wikipedia.org/wiki/Speak_%26_Spell_%28toy%29">Speak &amp; Spell</a> in a new class <code>AVSpeechSynthesizer</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">AVSpeechSynthesizer</span> <span class="o">*</span><span class="n">synthesizer</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AVSpeechSynthesizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="n">AVSpeechUtterance</span> <span class="o">*</span><span class="n">utterance</span> <span class="o">=</span> <span class="p">[</span><span class="n">AVSpeechUtterance</span> <span class="n">speechUtteranceWithString</span><span class="o">:</span><span class="s">@&quot;Just what do you think you&#39;re doing, Dave?&quot;</span><span class="p">];</span>
<span class="n">utterance</span><span class="p">.</span><span class="n">rate</span> <span class="o">=</span> <span class="n">AVSpeechUtteranceMinimumSpeechRate</span><span class="p">;</span> <span class="c1">// Tell it to me slowly</span>
<span class="p">[</span><span class="n">synthesizer</span> <span class="n">speakUtterance</span><span class="o">:</span><span class="n">utterance</span><span class="p">];</span>
</code></pre></div>
<h2>MKDistanceFormatter</h2>

<p>Finally, we end our showcase of iOS 7&#39;s new and noteworthy APIs with another class that has NSHipsters crying out &quot;finally!&quot;: <code>MKDistanceFormatter</code>.</p>

<p>As advertised, <code>MKDistanceFormatter</code> provides a way to convert distances into localized strings using either imperial or metric units:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">@</span><span class="n">import</span> <span class="n">CoreLocation</span><span class="p">;</span>
<span class="p">@</span><span class="n">import</span> <span class="n">MapKit</span><span class="p">;</span>
</code></pre></div><div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">CLLocation</span> <span class="o">*</span><span class="n">sanFrancisco</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLLocation</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithLatitude</span><span class="o">:</span><span class="mf">37.775</span> <span class="n">longitude</span><span class="o">:-</span><span class="mf">122.4183333</span><span class="p">];</span>
<span class="n">CLLocation</span> <span class="o">*</span><span class="n">portland</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLLocation</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithLatitude</span><span class="o">:</span><span class="mf">45.5236111</span> <span class="n">longitude</span><span class="o">:-</span><span class="mf">122.675</span><span class="p">];</span>
<span class="n">CLLocationDistance</span> <span class="n">distance</span> <span class="o">=</span> <span class="p">[</span><span class="n">portland</span> <span class="n">distanceFromLocation</span><span class="o">:</span><span class="n">sanFrancisco</span><span class="p">];</span>

<span class="n">MKDistanceFormatter</span> <span class="o">*</span><span class="n">formatter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKDistanceFormatter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="n">formatter</span><span class="p">.</span><span class="n">units</span> <span class="o">=</span> <span class="n">MKDistanceFormatterUnitsImperial</span><span class="p">;</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">formatter</span> <span class="n">stringFromDistance</span><span class="o">:</span><span class="n">distance</span><span class="p">]);</span> <span class="c1">// 535 miles</span>
</code></pre></div>
<hr>

<p>So there you have it! This was just a small sample of the great new features of iOS 7. Still craving more? Check out Apple&#39;s <a href="https://developer.apple.com/library/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html">&quot;What&#39;s New in iOS 7&quot;</a> guide on the Developer Center.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 23 Sep 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:26:"http://nshipster.com/ios7/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:26:"http://nshipster.com/ios7/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:27;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:16:"AFNetworking 2.0";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:20186:"<p><a href="http://afnetworking.com">AFNetworking</a> is one of the most widely used open source projects for iOS and Mac OS X development. It powers thousands of popular and critically acclaimed apps, and serves as the foundation for dozens of other great open source libraries and frameworks. With over 8,700 stars, 2,200 forks, and 130 contributors, the project is also among the most active and influential in the community.</p>

<p>By all accounts, AFNetworking is about as mainstream as it gets.</p>

<p><em>But have you heard about the sequel?</em>
<a href="https://github.com/AFNetworking/AFNetworking/">AFNetworking 2.0</a>.</p>

<p>This week on NSHipster: an exclusive look at the future of AFNetworking.</p>

<blockquote>
<p>Full Disclosure: NSHipster is written by the <a href="https://twitter.com/mattt">author of AFNetworking</a>, so this is anything but an objective account of AFNetworking or its merits. What you&#39;re getting is the personal, honest take of AFNetworking in its current and forthcoming releases.</p>
</blockquote>

<h2>AFNetworking&#39;s Big Ideas</h2>

<p>Started in May 2011 as a humble extension of an <a href="https://developer.apple.com/library/ios/samplecode/mvcnetworking/Introduction/Intro.html">Apple code sample</a> from a <a href="http://en.wikipedia.org/wiki/Gowalla">doomed location-based social network</a>, AFNetworking&#39;s success was a product of timing more than anything. At a time when <a href="https://github.com/pokeb/asi-http-request">ASIHTTPRequest</a> was the de facto networking solution, AFNetworking&#39;s core ideas caught on among developers looking for a more modern solution.</p>

<h3>NSURLConnection + NSOperation</h3>

<p><code>NSURLConnection</code> is the backbone of the Foundation URL Loading system. An <code>NSURLConnection</code> loads an <code>NSURLRequest</code> object asynchronously, calling methods on its delegates as the <code>NSURLResponse</code> / <code>NSHTTPURLResponse</code> and its associated <code>NSData</code> is sent to and loaded from the server; the delegate may also implement behavior for handling an <code>NSURLAuthenticationChallenge</code>, a redirect responses, or determine how the associated <code>NSCachedURLResponse</code> is stored to the shared <code>NSURLCache</code>.</p>

<p><a href="http://nshipster.com/nsoperation"><code>NSOperation</code></a> is an abstract class that models a single unit of computation, with useful constructs like state, priority, dependencies, and cancellation.</p>

<p>The first major breakthrough of AFNetworking was combining the two. <code>AFURLConnectionOperation</code>, an <code>NSOperation</code> subclass conforms to <code>NSURLConnectionDelegate</code> methods, and tracks the state of the request from start to finish, while storing intermediary state, such as request, response, and response data.</p>

<h3>Blocks</h3>

<p>iOS 4 radically improved the process of developing apps with its introduction of blocks and Grand Central Dispatch. Instead of scattering implementation logic across your application with delegates, developers could localize related functionality in block properties. Rather than struggle with a miasma of threads, invocations, and operation queues, GCD could dispatch work back and forth with ease.</p>

<p>What&#39;s more, <code>NSURLConnectionDelegate</code> methods could be customized for each request operation by setting a corresponding block property (e.g. <code>setWillSendRequestForAuthenticationChallengeBlock:</code> to override the default implementation of <code>connection:willSendRequestForAuthenticationChallenge:</code>)</p>

<p>Now, an <code>AFURLConnectionOperation</code> could be created and scheduled on an <code>NSOperationQueue</code>, with behavior specified on what to do with the response and response data (or any error encountered during the request lifecyle) when finished by setting the new <code>completionBlock</code> property on <code>NSOperation</code>.</p>

<h3>Serialization &amp; Validation</h3>

<p>Going even further, request operations could have their responsibilities extended to validate HTTP status codes and content type to validate the server response, and, for instance, serialize <code>NSData</code> into JSON objects for responses with an <code>application/json</code> MIME type.</p>

<p>Loading JSON, XML, property lists, or images from the server was abstracted to more closely resemble a latent file loading operation, such that a developer could think in terms of promises rather than asynchronous networking.</p>

<h2>Introducing AFNetworking 2.0</h2>

<p>In many ways, AFNetworking succeeded in striking a balance between ease-of-use and extensibility. That&#39;s not to say that there wasn&#39;t room for improvement.</p>

<p>With its second major release, AFNetworking aims to reconcile many of the quirks of the original design, while adding powerful new constructs to power the next generation of iOS and Mac OS X apps.</p>

<h3>Motivations</h3>

<ul>
<li><strong>NSURLSession Compatibility</strong> - <code>NSURLSession</code> is a replacement for <code>NSURLConnection</code> introduced in iOS 7. <code>NSURLConnection</code> isn&#39;t deprecated, and likely won&#39;t be for some time, but <code>NSURLSession</code> is the future of networking in Foundation, and it&#39;s a bright future at that, addressing many of the shortcomings of its predecessor. (See WWDC 2013 Session 705 &quot;What’s New in Foundation Networking&quot; for a good overview). Some had initially speculated that <code>NSURLSession</code> would obviate the need for AFNetworking; although there is overlap, there is still much that a higher-level abstraction can provide. <strong>AFNetworking 2.0 does just this, embracing and extending <code>NSURLSession</code> to pave over some of the rough spots, and maximize its usefulness.</strong></li>
<li><strong>Modularity</strong> - One of the major criticisms of AFNetworking is how bulky it is. Although its architecture lent itself well to modularity on a class level, its packaging didn&#39;t allow for individual features to be selected à la carte. Over time, <code>AFHTTPClient</code> in particular became overburdened in its responsibilities (creating requests, serializing query string parameters, determining response parsing behavior, creating and managing operations, monitoring network reachability). <strong>In AFNetworking 2.0, you can pick and choose only the components you need using <a href="https://github.com/CocoaPods/CocoaPods/wiki/The-podspec-format#subspecs">CocoaPods subspecs</a>.</strong></li>
<li><strong>Real-time</strong> - With this new release, AFNetworking seeks to set an agenda for real-time functionality. In the next 18 months, real-time is going to go from being a niche feature of the top 1% to how users expect things to work by default. <strong>AFNetworking 2.0 follows the <a href="http://rocket.github.io">Rocket</a> technique, which leverages web standards like <a href="http://dev.w3.org/html5/eventsource/">Server-Sent Events</a> and <a href="http://tools.ietf.org/html/rfc6902">JSON Patch</a> to build semantic real-time on top of existing REST web services.</strong></li>
</ul>

<h3>Meet the Cast</h3>

<h4><code>NSURLConnection</code> Components <em>(iOS 6 &amp; 7)</em></h4>

<ul>
<li><code>AFURLConnectionOperation</code> - A subclass of <code>NSOperation</code> that manages an <code>NSURLConnection</code> and implements its delegate methods.</li>
<li><code>AFHTTPRequestOperation</code> - A subclass of <code>AFURLConnectionOperation</code> specifically for making HTTP requests, which creates a distinction between acceptable and unacceptable status codes and content types. The main difference in 2.0 is that <em>you&#39;ll actually use this class directly, rather than subclass it</em>, for reasons explained in the &quot;Serialization&quot; section.</li>
<li><code>AFHTTPRequestOperationManager</code> - A class that encapsulates the common patterns of communicating with a web service over HTTP, backed by <code>NSURLConnection</code> by way of <code>AFHTTPRequestOperation</code>.</li>
</ul>

<h4><code>NSURLSession</code> Components <em>(iOS 7)</em></h4>

<ul>
<li><code>AFURLSessionManager</code> - A class that creates and manages an <code>NSURLSession</code> object based on a specified <code>NSURLSessionConfiguration</code> object, as well as data, download, and upload tasks for that session, implementing the delegate methods for both the session and its associated tasks. Because of the odd gaps in <code>NSURLSession</code>&#39;s API design, <strong>any code working with <code>NSURLSession</code> would be improved by <code>AFURLSessionManager</code></strong>.</li>
<li><code>AFHTTPSessionManager</code> - A subclass of <code>AFURLSessionManager</code> that encapsulates the common patterns of communicating with an web service over HTTP, backed by <code>NSURLSession</code> by way of <code>AFURLSessionManager</code>.</li>
</ul>

<hr>

<blockquote>
<p><strong>So to recap</strong>: in order to support the new <code>NSURLSession</code> APIs as well as the old-but-not-deprecated-and-still-useful <code>NSURLConnection</code>, the core components of AFNetworking 2.0 are split between request operation and session tasks. <code>AFHTTPRequestOperationManager</code> and <code>AFHTTPSessionManager</code> provide similar functionality, with nearly interchangeable interfaces that can be swapped out rather easily, should the need arise (such as porting between iOS 6 and 7).</p>

<p>All of the other functionality previous tied up in <code>AFHTTPClient</code>, such as serialization, security, and reachability, has been split out across several modules that are shared between <code>NSURLSession</code> and <code>NSURLConnection</code>-backed APIs.</p>
</blockquote>

<hr>

<h4>Serialization</h4>

<p>One of the breakthroughs of AFNetworking 2.0&#39;s new architecture is use of serializers for creating requests and parsing responses. The flexible design of serializers allows for more business logic to be transferred over to the networking layer, and for previously built-in default behavior to be easily customized.</p>

<ul>
<li><code>&lt;AFURLRequestSerializer&gt;</code> - Objects conforming to this protocol are used to decorate requests by translating parameters into either a query string or entity body representation, as well as setting any necessary headers. Anyone who had beef about the way <code>AFHTTPClient</code> encoded query string parameters should find this new approach to be more to your liking.</li>
<li><code>&lt;AFURLResponseSerializer&gt;</code> - Objects conforming to this protocol are responsible for validating and serializing a response and its associated data into useful representations, such as JSON objects, images, or even <a href="https://github.com/blog/1299-mantle-a-model-framework-for-objective-c">Mantle</a>-backed model objects. Rather than endlessly subclassing <code>AFHTTPClient</code>, <code>AFHTTPRequestOperation</code> now has a single <code>responseSerializer</code> property, which is set to the appropriate handler. Likewise, the <a href="http://cocoadocs.org/docsets/AFNetworking/1.3.1/Classes/AFHTTPClient.html#//api/name/registerHTTPOperationClass:"><code>NSURLProtocol</code>-inspired request operation class registration nonsense</a> is no more—replaced by that single delightful <code>responseSerializer</code> property. Thank goodness.</li>
</ul>

<h4>Security</h4>

<p>Thanks to the contributions of <a href="https://github.com/dstnbrkr">Dustin Barker</a>, <a href="https://github.com/OliverLetterer">Oliver Letterer</a>, and <a href="https://github.com/kcharwood">Kevin Harwood</a> and others, AFNetworking comes with built-in support for <a href="http://blog.lumberlabs.com/2012/04/why-app-developers-should-care-about.html">SSL pinning</a>, which is critical for apps that deal with sensitive information.</p>

<ul>
<li><code>AFSecurityPolicy</code> - A class that evaluates the server trust of secure connections against its specified pinned certificates or public keys. tl;dr Add your server certificate to your app bundle to help prevent against <a href="http://en.wikipedia.org/wiki/Man-in-the-middle_attack">man-in-the-middle attacks</a>.</li>
</ul>

<h4>Reachability</h4>

<p>Another piece of functionality now decoupled from <code>AFHTTPClient</code> is network reachability. Now you can use it on its own, or as a property on <code>AFHTTPRequestOperationManager</code> / <code>AFHTTPSessionManager</code>.</p>

<ul>
<li><code>AFNetworkReachabilityManager</code> - This class monitors current network reachability, providing callback blocks and notifications for when reachability changes.</li>
</ul>

<h4>Real-time</h4>

<ul>
<li><code>AFEventSource</code> - An Objective-C implementation of the <a href="http://en.wikipedia.org/wiki/Server-sent_events"><code>EventSource</code> DOM API</a>. A persistent HTTP connection is opened to a host, which streams events to the event source, to be dispatched to listeners. Messages streamed to the event source formatted as <a href="http://tools.ietf.org/html/rfc6902">JSON Patch</a> documents are translated into arrays of <code>AFJSONPatchOperation</code> objects. These patch operations can be applied to the persistent data set fetched from the server.</li>
</ul>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSURL</span> <span class="o">*</span><span class="n">URL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="n">URLWithString</span><span class="o">:</span><span class="s">@&quot;http://example.com&quot;</span><span class="p">];</span>
<span class="n">AFHTTPSessionManager</span> <span class="o">*</span><span class="n">manager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">AFHTTPSessionManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithBaseURL</span><span class="o">:</span><span class="n">URL</span><span class="p">];</span>
<span class="p">[</span><span class="n">manager</span> <span class="n">GET</span><span class="o">:</span><span class="s">@&quot;/resources&quot;</span> <span class="n">parameters</span><span class="o">:</span><span class="nb">nil</span> <span class="n">success</span><span class="o">:^</span><span class="p">(</span><span class="n">NSURLSessionDataTask</span> <span class="o">*</span><span class="n">task</span><span class="p">,</span> <span class="kt">id</span> <span class="n">responseObject</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">resources</span> <span class="n">addObjectsFromArray</span><span class="o">:</span><span class="n">responseObject</span><span class="p">[</span><span class="s">@&quot;resources&quot;</span><span class="p">]];</span>

    <span class="p">[</span><span class="n">manager</span> <span class="n">SUBSCRIBE</span><span class="o">:</span><span class="s">@&quot;/resources&quot;</span> <span class="n">usingBlock</span><span class="o">:^</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="n">operations</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">AFJSONPatchOperation</span> <span class="o">*</span><span class="n">operation</span> <span class="k">in</span> <span class="n">operations</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">switch</span> <span class="p">(</span><span class="n">operation</span><span class="p">.</span><span class="n">type</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">case</span> <span class="n">AFJSONAddOperationType</span>:
                    <span class="p">[</span><span class="n">resources</span> <span class="n">addObject</span><span class="o">:</span><span class="n">operation</span><span class="p">.</span><span class="n">value</span><span class="p">];</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="nl">default:</span>
                    <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="n">error</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span>
<span class="p">}</span> <span class="n">failure</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span>
</code></pre></div>
<h4>UIKit Extensions</h4>

<p>All of the UIKit categories in AFNetworking 2.0 have been extracted and expanded, with several new additions to the list.</p>

<ul>
<li><code>AFNetworkActivityIndicatorManager</code>: Automatically start and stop the network activity indicator in the status bar as request operations and tasks begin and finish loading.</li>
<li><code>UIImageView+AFNetworking</code>: Adds <code>imageResponseSerializer</code> property, which makes it easy to automatically resize or apply a filter to images loaded remotely to an image view. For example, <a href="https://github.com/AFNetworking/AFCoreImageSerializer"><code>AFCoreImageSerializer</code></a> could be used to apply Core Image filters to the response image before being displayed.</li>
<li><code>UIButton+AFNetworking</code> <em>(New)</em>: Similar to <code>UIImageView+AFNetworking</code>, loads <code>image</code> and <code>backgroundImage</code> from remote source.</li>
<li><code>UIActivityIndicatorView+AFNetworking</code> <em>(New)</em>: Automatically start and stop a <code>UIActivityIndicatorView</code> according to the state of a specified request operation or session task.</li>
<li><code>UIProgressView+AFNetworking</code> <em>(New)</em>: Automatically track the upload or download progress of a specified request operation or session task.</li>
<li><code>UIWebView+AFNetworking</code> <em>(New)</em>: Provides a more sophisticated API for loading URL requests, with support for progress callbacks and content transformation.</li>
</ul>

<hr>

<p>Thus concludes our whirlwind tour of AFNetworking 2.0. New features for the next generation of apps, combined with a fresh new architecture for all of the existing functionality. There&#39;s a lot to be excited about.</p>

<h3>Hit the Ground Running</h3>

<p>You can start playing around with AFNetworking 2.0 by putting the following in your <a href="http://cocoapods.org"><code>Podfile</code></a>:</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="n">platform</span> <span class="ss">:ios</span><span class="p">,</span> <span class="s1">&#39;7.0&#39;</span>
<span class="n">pod</span> <span class="s2">&quot;AFNetworking&quot;</span><span class="p">,</span> <span class="s2">&quot;2.0.0&quot;</span>
</code></pre></div>
<p>For anyone coming over to AFNetworking from the current 1.x release, you may find <a href="https://github.com/AFNetworking/AFNetworking/wiki/AFNetworking-2.0-Migration-Guide">the AFNetworking 2.0 Migration Guide</a> especially useful.</p>

<p>If you run into any bugs or general weirdness, please help by <a href="https://github.com/afnetworking/afnetworking/issues?state=open">opening an issue on GitHub</a>. Your help will be greatly appreciated.</p>

<p>For general usage questions, feel free tweet at <a href="https://twitter.com/AFNetworking">@AFNetworking</a>, or email <a href="mailto:m@mattt.me">m@mattt.me</a>.</p>

<p>Oh yeah, one more thing...</p>

<hr>

<h2>AFNetworking: the Definitive Guide</h2>

<p>I&#39;m thrilled to announce that AFNetworking is getting an official book!</p>

<p><strong>&quot;AFNetworking: the Definitive Guide&quot;</strong> will be published by <a href="http://oreilly.com">O&#39;Reilly</a>, hopefully within the next couple of months. You can <a href="http://eepurl.com/Flnvn">sign up here to be notified by email when its available</a>, or <a href="https://twitter.com/AFNetworking">follow @AFNetworking</a>.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 16 Sep 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:36:"http://nshipster.com/afnetworking-2/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"http://nshipster.com/afnetworking-2/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:28;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:24:"Network Link Conditioner";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:5115:"<p>Product design is about empathy. Knowing what a user wants, what they like, what they dislike, what causes them frustration, and learning to understand and embody those motivations in design decisions—this is what it takes to make something insanely great.</p>

<p>And so we invest in reaching beyond our own operational model of the world. We tailor our experience for <a href="http://nshipster.com/nslocalizedstring/">different locales</a>. We consider the usability implications of <a href="http://nshipster.com/uiaccessibility/">screen readers or other assistive technologiess</a>. We <a href="http://nshipster.com/unit-testing/">continuously evaluate</a> our implementation against these expectations.</p>

<p>There is, though, one critical factor that app developers often miss the first time around, and that is <strong>network condition</strong>, or more specifically the latency and bandwidth of an Internet connection. For something so essential to a user&#39;s experience with a product, it&#39;s unfortunate that most developers take an ad-hoc approach to field testing different kinds of environments, if at all.</p>

<p>This week on NSHipster, we&#39;ll be talking about the <a href="https://developer.apple.com/downloads/index.action?q=Network%20Link%20Conditioner">Network Link Conditioner</a>, a utility that allows Mac and iOS devices to accurately and consistently simulate adverse networking environments.</p>

<h2>Installation</h2>

<p>Network Link Conditioner can be found in the &quot;Hardware IO Tools for Xcode&quot; package. This can be downloaded from the <a href="https://developer.apple.com/downloads/index.action?q=Network%20Link%20Conditioner">Apple Developer Downloads</a> page.</p>

<p><img src="http://nshipster.s3.amazonaws.com/network-link-conditioner-download.png" alt="Download"></p>

<p>Search for &quot;Network Link Conditioner&quot;, and select the appropriate release of the &quot;Hardware IO Tools for Xcode&quot; package.</p>

<p><img src="http://nshipster.s3.amazonaws.com/network-link-conditioner-dmg.png" alt="Package"></p>

<p>Once the download has finished, open the DMG and double-click &quot;Network Link Condition.prefPane&quot; to install.</p>

<p><img src="http://nshipster.s3.amazonaws.com/network-link-conditioner-install.png" alt="System Preferences"></p>

<p>From now on, you can enable the Network Link Conditioner from its preference pane at the bottom of System Preferences.</p>

<p><img src="http://nshipster.s3.amazonaws.com/network-link-conditioner-system-preference.png" alt="Network Link Conditioner"></p>

<p>When enabled, the Network Link Conditioner can change the network environment of the iPhone Simulator according to one of the built-in presets:</p>

<ul>
<li>EDGE</li>
<li>3G</li>
<li>DSL</li>
<li>WiFi</li>
<li>High Latency DNS</li>
<li>Very Bad Network</li>
<li>100% Loss</li>
</ul>

<p>Each preset can set a limit for uplink or downlink <a href="http://en.wikipedia.org/wiki/Bandwidth_%28computing%29">bandwidth</a>, <a href="http://en.wikipedia.org/wiki/Latency_%28engineering%29%23Communication_latency">latency</a>, and rate of <a href="http://en.wikipedia.org/wiki/Packet_loss">packet loss</a> (when any value is set to 0, that value is unchanged from your computer&#39;s network environment).</p>

<p><img src="http://nshipster.s3.amazonaws.com/network-link-conditioner-preset.png" alt="Preset"></p>

<p>You can also create your own preset, if you wish to simulate a particular combination of factors simultaneously.</p>

<p>Try running your app in the simulator with the Network Link Conditioner enabled under various presets and see what happens. How does network latency affect your app startup? What effect does bandwidth have on table view scroll performance? Does your app work at all with 100% packet loss?</p>

<blockquote>
<p>If your app uses <a href="https://developer.apple.com/library/ios/samplecode/Reachability/Introduction/Intro.html">Reachability</a> to detect network availability, you may experience some unexpected results while using the Network Link Conditioner. As such, any reachability behavior under Airplane mode or WWan / WiFi distinctions is something that should be tested separately from network conditioning.</p>
</blockquote>

<h2>Enabling Network Link Conditioner on iOS Devices</h2>

<p>While the preference pane works well for developing on the simulator, it&#39;s also important to test on actual devices. Fortunately, as of iOS 6, the Network Link Conditioner is available on the devices themselves.</p>

<p>To enable it, you need to set up your device for development:</p>

<ol>
<li>Connect your iPhone or iPad to your Mac</li>
<li>In Xcode, go to Window &gt; Organizer (⇧⌘2)</li>
<li>Select your device in the sidebar</li>
<li>Click &quot;Use for Development&quot;</li>
</ol>

<p><img src="http://nshipster.s3.amazonaws.com/network-link-conditioner-ios.png" alt="iOS Devices"></p>

<p>Now you&#39;ll have access to the Developer section of the Settings app, where you&#39;ll find the Network Link Conditioner (just don&#39;t forget to turn it off after you&#39;re done testing!).</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 09 Sep 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:46:"http://nshipster.com/network-link-conditioner/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:46:"http://nshipster.com/network-link-conditioner/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:29;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:14:"Xcode Snippets";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:7601:"<p>iOS development all but requires the use of Xcode. To its credit, Xcode has improved pretty consistently over the last couple of years. Sure, <a href="http://www.textfromxcode.com">it still has its... quirks</a>, but hey—things could be <a href="http://www.eclipse.org">much, much worse</a>.</p>

<p>Working in an IDE may not be as cool as working in your favorite <a href="http://en.wikipedia.org/wiki/Vim_(text_editor">decades-old editor</a>) (or <a href="http://en.wikipedia.org/wiki/Emacs">that other one</a>), but you know what is cool? <a href="http://www.textfromxcode.com/post/24542673087">Autocompletion</a>. Not to mention <a href="http://clang-analyzer.llvm.org/xcode.html">Build &amp; Analyze</a>, <a href="https://developer.apple.com/library/ios/recipes/xcode_help-source_editor/Creating,Disabling,andDeletingBreakpoints/Creating,Disabling,andDeletingBreakpoints.html">Breakpoints</a>, and <a href="https://developer.apple.com/library/ios/DOCUMENTATION/DeveloperTools/Conceptual/InstrumentsUserGuide/InstrumentsQuickStart/InstrumentsQuickStart.html">Instruments</a>.</p>

<p>This is all to say: if we&#39;re resigned to use an IDE in our development workflow, we might as well make the most of it, right? So this week on NSHipster, we&#39;re going to talk about one of the more powerful yet underused features of Xcode: <strong>Code Snippets</strong>.</p>

<hr>

<p>From <code>@interface</code> declarations to <code>if (!self) return nil;</code> incantations, there is a lot of avoidable typing in Objective-C. Xcode snippets allow these common patterns and boilerplate code to be extracted for quick reuse.</p>

<h2>Using Xcode Snippets</h2>

<p>To see the available code snippets, show the Utilities panel, to the right of your editor. On the bottom half the Utilities panel, there will be a horizontal divider with 4 icons. </p>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-snippet-utilities-divider.png" alt="Utilities Divider"></p>

<p>Click the <code>{ }</code> icon to show the Code Snippets Library.</p>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-snippet-utilties-panel.png" alt="Utilities Panel"></p>

<p>There are two ways to insert a snippet into your code:</p>

<p>You can drag and drop from the code snippets library into your editor:</p>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-snippet-drag-and-drop.gif" alt="Drag-and-Drop"></p>

<p>...or for snippets that include a text completion shortcut, you can start typing that:</p>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-snippet-text-completion-shortcut.gif" alt="Text Completion Shortcut"></p>

<p>To get a sense of what you can do with snippets, here&#39;s an overview of the ones built-in to Xcode:</p>

<ul>
<li>C <code>typedef</code> declarations for <code>enum</code>, <code>struct</code> <code>union</code>, and blocks</li>
<li>C control flow statements like <code>if</code>, <code>if</code>...<code>else</code>, and <code>switch</code></li>
<li>C loops, such as <code>for</code>, <code>while</code>, and <code>do</code>...<code>while</code></li>
<li>C inline block variable declaration</li>
<li>Objective-C declarations for <code>@interface</code> (including for class extensions and categories), <code>@implementation</code>, <code>@protocol</code></li>
<li>Objective-C boilerplate for KVO, including the relatively obscure <code>keyPathsForValuesAffecting&lt;Key&gt;</code>, used for <a href="https://developer.apple.com/library/ios/DOCUMENTATION/Cocoa/Conceptual/KeyValueObserving/Articles/KVODependentKeys.html">registering dependent keys</a></li>
<li>Objective-C boilerplate for Core Data fetches, property accessors, and property validation</li>
<li>Objective-C idioms for enumerating <a href="http://nshipster.com/nsindexset/"><code>NSIndexSet</code></a></li>
<li>Objective-C incantation for <code>init</code>, <code>initWithCoder:</code> and <code>initWithFrame:</code> method implementations</li>
<li>Objective-C <code>@try</code> / <code>@catch</code> / <code>@finally</code> and <code>@autorelease</code> blocks</li>
<li>GCD idioms for <code>dispatch_once</code> and <code>dispatch_after</code></li>
</ul>

<h2>Creating Xcode Snippets</h2>

<p>Of course, what really makes snippets such a powerful feature is the ability to create your own.</p>

<p>The process of creating a snippet is actually pretty unintuitive and difficult to explain. It uses an obscure OS X system feature that allows users to create a &quot;Text Clipping&quot; by dragging and dropping selected text. Much easier to just show it in action:</p>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-snippet-create.gif" alt="Text Completion Shortcut"></p>

<p>After being added to the code snippet library, a user-defined snippet can be edited by double-clicking its listing:</p>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-snippet-editor.png" alt="Text Completion Shortcut"></p>

<p>Each snippet has the following fields:</p>

<ul>
<li><strong>Title</strong> - The name of the snippet (appears in text completion and in snippet library listing)</li>
<li><strong>Summary</strong> - A brief description of what it does (appears only in snippet library listing)</li>
<li><strong>Platform</strong> - Limits the snippet visibility for text completion to the specified platform. OS X, iOS, or both (&quot;All&quot;)</li>
<li><strong>Language</strong> - Limits the snippet visibility for text completion to the specified language. Most commonly C, Objective-C, C++, or Objective-C++.</li>
<li><strong>Completion Shortcut</strong> - The text completion shortcut. For commonly-used snippets, this should be relatively short. Xcode does not warn about conflicting / overlapping shortcuts, so make sure yours doesn&#39;t overlap with an existing one.</li>
<li><strong>Completion Scopes</strong> - Limits the snippet visibility for text completion to the specified scopes. For example, an <code>if</code> / <code>else</code> statement should only be auto-completed from within a method or function implementation. Any combination of the following: 

<ul>
<li>All</li>
<li>Class Implementation</li>
<li>Class Interface Methods</li>
<li>Class Interface Variables</li>
<li>Code Expression</li>
<li>Function or Method</li>
<li>Preprocessor Directive</li>
<li>String or Comment</li>
<li>Top Level</li>
</ul></li>
</ul>

<blockquote>
<p>Each Xcode snippet has a file representation in <code>~/Library/Developer/Xcode/UserData/CodeSnippets/</code></p>
</blockquote>

<h3>Placeholder Tokens</h3>

<p>Something you may have noticed in using other Xcode snippets are placeholder tokens:</p>

<p><img src="http://nshipster.s3.amazonaws.com/xcode-snippet-token.png" alt="Placeholder Token"></p>

<p>In Xcode, placeholder tokens are delimited by <code>&lt;#</code> and <code>#&gt;</code>, with the placeholder text in the middle. Go ahead—try typing that into Xcode, and watch as the text between the octothorp tags magically transforms right in front of your eyes.</p>

<p>Include placeholder tags to add a dash of dynamism in your own snippets!</p>

<h3>Third-Party Xcode Snippets</h3>

<p>A list of generally useful code snippets can be found <a href="https://github.com/mattt/Xcode-Snippets">in this GitHub project</a> (pull requests welcome!). If nothing else, this also serves as an example of what&#39;s possible.</p>

<hr>

<p>Programming isn&#39;t about being an expert typist, so don&#39;t make it any more difficult for yourself than it needs to be. If you find yourself groaning while typing some inane, rote-memorized code idiom, take a minute to create a snippet for it instead!</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 02 Sep 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:36:"http://nshipster.com/xcode-snippets/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"http://nshipster.com/xcode-snippets/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:30;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:8:"Equality";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:24107:"<p>The concept of equality is a central point of debate and inquiry in philosophy and mathematics, with far-reaching implications for matters of ethics, justice, and public policy.</p>

<p>From an empiricist perspective of the universe, two objects are equal if they are indistinguishable from one another in measurable observations. On a human scale, egalitarians hold that individuals should be considered equal members of the societal, economic, political, and judicial systems they inhabit.</p>

<p>It is the task of programmers to reconcile our logical and physical understanding of equality with the semantic domains we model. There is a subtlety to the question of equality, too often overlooked. Jumping into implementation without sufficient understanding of semantics can lead to unnecessary work that produces incorrect results. Though an understanding of the mathematical and logical system underpinning is equally essential to making things work as modeled.</p>

<p>While the temptation for all technical blog posts is to skim for headings and code samples, please take a few minutes to read and understand all of this. <strong>Copying relevant-looking code verbatim without knowing why its there may lead to incorrect behavior</strong>. With all seriousness, equality is one of those topics—in Objective-C in particular—where there is still <a href="http://stackoverflow.com/questions/254281/best-practices-for-overriding-isequal-and-hash">a great deal of confusion</a>.</p>

<h2>Equality &amp; Identity</h2>

<p>First and foremost, it is important to make a distinction between <em>equality</em> and <em>identity</em>.</p>

<p>Two objects may be <em>equal</em> or <em>equivalent</em> to one another, if they share a common set of observable properties. Yet, those two objects may still be thought to be <em>distinct</em>, each with their own <em>identity</em>. In programming, an object&#39;s identity is tied to its memory address.</p>

<p><code>NSObject</code> tests equality with another object with the method <code>isEqual:</code>. In its base implementation, an equality check is essentially a test for identity. Two <code>NSObject</code>s are considered equal if they point to the same memory address.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@implementation</span> <span class="nc">NSObject</span> <span class="nl">(Approximate)</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isEqual:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">self</span> <span class="o">==</span> <span class="n">object</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">@end</span>
</code></pre></div>
<p>For container classes like <code>NSArray</code>, <code>NSDictionary</code>, and <code>NSString</code>, the expected and indeed more useful behavior would be to do a deep equality comparison, to test that each member in the collection is equal.</p>

<p>Subclasses of <code>NSObject</code> implementing their own <code>isEqual:</code> method are expected to do the following:</p>

<ul>
<li>Implement a new <code>isEqualTo__ClassName__:</code> method, which performs the meaningful value comparison.</li>
<li>Override <code>isEqual:</code> to make class and object identity checks, falling back on the aforementioned value comparison method.</li>
<li>Override <code>hash</code>, which will be described in the next section.</li>
</ul>

<p>Here&#39;s an idea of how <code>NSArray</code> might do this (ignoring, for this example, that as a <a href="https://developer.apple.com/library/ios/documentation/general/conceptual/CocoaEncyclopedia/ClassClusters/ClassClusters.html">class cluster</a>, the actual implementation would be significantly more complicated):</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@implementation</span> <span class="nc">NSArray</span> <span class="nl">(Approximate)</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isEqualToArray:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">array</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">array</span> <span class="o">||</span> <span class="p">[</span><span class="n">self</span> <span class="n">count</span><span class="p">]</span> <span class="o">!=</span> <span class="p">[</span><span class="n">array</span> <span class="n">count</span><span class="p">])</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">for</span> <span class="p">(</span><span class="n">NSUInteger</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="p">[</span><span class="n">array</span> <span class="n">count</span><span class="p">];</span> <span class="n">idx</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">self</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="n">isEqual</span><span class="o">:</span><span class="n">array</span><span class="p">[</span><span class="n">idx</span><span class="p">]])</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
      <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isEqual:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">==</span> <span class="n">object</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">object</span> <span class="n">isKindOfClass</span><span class="o">:</span><span class="p">[</span><span class="n">NSArray</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="n">isEqualToArray</span><span class="o">:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="n">object</span><span class="p">];</span>
<span class="p">}</span>
<span class="k">@end</span>
</code></pre></div>
<p>The following <code>NSObject</code> subclasses in Foundation have custom equality implementations, with the corresponding method:</p>

<ul>
<li><code>NSAttributedString -isEqualToAttributedString:</code></li>
<li><code>NSData -isEqualToData:</code></li>
<li><code>NSDate -isEqualToDate:</code></li>
<li><code>NSDictionary -isEqualToDictionary:</code></li>
<li><code>NSHashTable -isEqualToHashTable:</code></li>
<li><code>NSIndexSet -isEqualToIndexSet:</code></li>
<li><code>NSNumber -isEqualToNumber:</code></li>
<li><code>NSOrderedSet -isEqualToOrderedSet:</code></li>
<li><code>NSSet -isEqualToSet:</code></li>
<li><code>NSString -isEqualToString:</code></li>
<li><code>NSTimeZone -isEqualToTimeZone:</code></li>
<li><code>NSValue -isEqualToValue:</code></li>
</ul>

<p>When comparing two instances of any of these classes, one is encouraged to use these high-level methods rather than <code>isEqual:</code>.</p>

<p>However, our theoretical implementation is yet incomplete. Let&#39;s turn our attention now to <code>hash</code> (after a quick detour to clear something up about <code>NSString</code>:</p>

<h3>The Curious Case of <code>NSString</code> Equality</h3>

<p>As an interesting aside, consider the following:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="s">@&quot;Hello&quot;</span><span class="p">;</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">b</span> <span class="o">=</span> <span class="s">@&quot;Hello&quot;</span><span class="p">;</span>
<span class="kt">BOOL</span> <span class="n">wtf</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="p">);</span> <span class="c1">// YES</span>
</code></pre></div>
<p>Let it be perfectly clear that the correct way to compare <code>NSString</code> objects is to use <code>-isEqualToString:</code>. <strong>Under no circumstances should you compare <code>NSString</code> with the <code>==</code> operator.</strong></p>

<p>So what&#39;s going on here? Why does this work, when the same code for <code>NSArray</code> or <code>NSDictionary</code> literals wouldn&#39;t work?</p>

<p>It all has to do with an optimization technique known as <a href="http://en.wikipedia.org/wiki/String_interning">string interning</a>, whereby one copy of immutable string value is copied for each distinct value. <code>NSString *a</code> and <code>*b</code> point to the same copy of the interned string value <code>@&quot;Hello&quot;</code>. <em>Note that this only works for statically defined immutable strings.</em></p>

<p>Interestingly enough, Objective-C selector names are also stored as interned strings in a shared string pool. </p>

<p><code>themoreyouknow.gif</code>. </p>

<h2>Hashing</h2>

<p>The primary use case of object equality tests for everyday object-oriented programming is to determine collection membership. To keep this fast, subclasses with custom equality implementations are expected to implement <code>hash</code> as well:</p>

<ul>
<li>Object equality is <em>commutative</em> (<code>[a isEqual:b]</code> ⇒ <code>[b isEqual:a]</code>)</li>
<li>If objects are equal, then their <code>hash</code> values must also be equal (<code>[a isEqual:b]</code> ⇒ <code>[a hash] == [b hash]</code>)</li>
<li>However, the converse does not hold: two objects need not be equal in order for their hash values to be equal (<code>[a hash] == [b hash]</code> ¬⇒ <code>[a isEqual:b]</code>)</li>
</ul>

<p>Now for a quick flashback to Computer Science 101:</p>

<hr>

<p>A <a href="http://en.wikipedia.org/wiki/Hash_table">hash table</a> is a fundamental data structure in programming, and it&#39;s what enables <code>NSSet</code> &amp; <code>NSDictionary</code> to have fast (<code>O(1)</code>) lookup of elements.</p>

<p>We can best understand hash tables by contrasting them to arrays: </p>

<p><strong>Arrays</strong> store elements in sequential indexes, such that an Array of size <code>n</code> will have slots at positions <code>0</code>, <code>1</code>, up to <code>n - 1</code>. To determine where an element is stored in the array (if at all), each position would have to be checked one-by-one (unless the array happens to be sorted, but that&#39;s another story).</p>

<p><strong>Hash Tables</strong> take a slightly different approach. Rather than storing elements sequentially (<code>0</code>, <code>1</code>, <code>...</code>, <code>n-1</code>), a hash table allocates <code>n</code> positions in memory, and uses a function to calculate a position within that range. A hash function is <a href="http://en.wikipedia.org/wiki/Deterministic_algorithm">deterministic</a>, and a <em>good</em> hash function generates values in a relatively <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28discrete%29">uniform distribution</a> without being too computationally expensive. A <em>hash collision</em> occurs when two different objects calculate the same hash value. When this happens, the hash table will seek from the point of collision and place the new object in the first available place. As a hash table becomes more congested, the likelihood of collision increases, which leads to more time spent looking for a free space (hence why a hash function with a uniform distribution is so desireable).</p>

<hr>

<p>One of the most common misconceptions about implementing a custom <code>hash</code> function comes from <a href="http://en.wikipedia.org/wiki/Affirming_the_consequent">affirming the consequent</a>, thinking that <code>hash</code> values <em>must</em> be distinct. This often leads to <a href="http://stackoverflow.com/a/254380/157142">needlessly complicated implementations involving the magical incantation of prime numbers copied from Java textbooks</a>. In reality, a simple <a href="http://en.wikipedia.org/wiki/Exclusive_or"><code>XOR</code></a> over the hash values of critical properties is sufficient 99% of the time. </p>

<p>The trick is in thinking about what the critical value of an object is.</p>

<p>For an <code>NSDate</code>, the time interval since a reference date would be sufficient:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@implementation</span> <span class="nc">NSDate</span> <span class="nl">(Approximate)</span>
<span class="k">-</span> <span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nf">hash</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="n">abs</span><span class="p">([</span><span class="n">self</span> <span class="n">timeIntervalSinceReferenceDate</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div>
<p>For a <code>UIColor</code>, a bit-shifted sum of RGB components is a convenient calculation:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@implementation</span> <span class="nc">UIColor</span> <span class="nl">(Approximate)</span>
<span class="k">-</span> <span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nf">hash</span> <span class="p">{</span>
  <span class="n">CGFloat</span> <span class="n">red</span><span class="p">,</span> <span class="n">green</span><span class="p">,</span> <span class="n">blue</span><span class="p">;</span>
  <span class="p">[</span><span class="n">self</span> <span class="n">getRed</span><span class="o">:&amp;</span><span class="n">red</span> <span class="n">green</span><span class="o">:&amp;</span><span class="n">green</span> <span class="n">blue</span><span class="o">:&amp;</span><span class="n">blue</span> <span class="n">alpha</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span>
  <span class="k">return</span> <span class="p">((</span><span class="n">NSUInteger</span><span class="p">)(</span><span class="n">red</span> <span class="o">*</span> <span class="mi">255</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">NSUInteger</span><span class="p">)(</span><span class="n">green</span> <span class="o">*</span> <span class="mi">255</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">NSUInteger</span><span class="p">)(</span><span class="n">blue</span> <span class="o">*</span> <span class="mi">255</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">@end</span>
</code></pre></div>
<h2>Implementing <code>-isEqual:</code> and <code>hash</code> in a Subclass</h2>

<p>Bringing it all together, here&#39;s how one might override the default equality implementation in a subclass:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">Person</span>
<span class="k">@property</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
<span class="k">@property</span> <span class="n">NSDate</span> <span class="o">*</span><span class="n">birthday</span><span class="p">;</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isEqualToPerson:</span><span class="p">(</span><span class="n">Person</span> <span class="o">*</span><span class="p">)</span><span class="nv">person</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div><div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@implementation</span> <span class="nc">Person</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isEqualToPerson:</span><span class="p">(</span><span class="n">Person</span> <span class="o">*</span><span class="p">)</span><span class="nv">person</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">person</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kt">BOOL</span> <span class="n">haveEqualNames</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">person</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="o">||</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="n">isEqualToString</span><span class="o">:</span><span class="n">person</span><span class="p">.</span><span class="n">name</span><span class="p">];</span>
  <span class="kt">BOOL</span> <span class="n">haveEqualBirthdays</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">self</span><span class="p">.</span><span class="n">birthday</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">person</span><span class="p">.</span><span class="n">birthday</span><span class="p">)</span> <span class="o">||</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">birthday</span> <span class="n">isEqualToDate</span><span class="o">:</span><span class="n">person</span><span class="p">.</span><span class="n">birthday</span><span class="p">];</span>

  <span class="k">return</span> <span class="n">haveEqualNames</span> <span class="o">&amp;&amp;</span> <span class="n">haveEqualBirthdays</span><span class="p">;</span>
<span class="p">}</span>

<span class="cp">#pragma mark - NSObject</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isEqual:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">==</span> <span class="n">object</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">object</span> <span class="n">isKindOfClass</span><span class="o">:</span><span class="p">[</span><span class="n">Person</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="n">isEqualToPerson</span><span class="o">:</span><span class="p">(</span><span class="n">Person</span> <span class="o">*</span><span class="p">)</span><span class="n">object</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nf">hash</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="n">hash</span><span class="p">]</span> <span class="o">^</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">birthday</span> <span class="n">hash</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<blockquote>
<p>For the curious and pedantic, see <a href="http://www.mikeash.com/pyblog/friday-qa-2010-06-18-implementing-equality-and-hashing.html">this post from Mike Ash</a> for an explanation of how <code>hash</code> implementations might be improved by bit-shifting or rotating composite values that may overlap.</p>
</blockquote>

<h2>Don&#39;t Overthink It</h2>

<p>While all of this has been an interesting exercise in epistemology and computer science, there is a lingering pragmatic detail:</p>

<p><strong>You don&#39;t usually need to implement this.</strong></p>

<p>There are many situations where the default identity check (two variables point to the same address in memory) is desirable behavior. This comes as a consequence of the limitations of data modeling.</p>

<p>Take, for instance, the previous example of the <code>Person</code> class. It&#39;s not inconceivable that two individuals would share a common name <em>and</em> birthday. In reality, this crisis of identity would be resolved by additional information, whether it&#39;s a system-dependent identifier like a Social Security Number, their parents&#39; identities, or any other physical attributes.</p>

<blockquote>
<p>Yet even that additional information is not entirely foolproof. After all, that person could be cloned, teleported, or whisked away into a parallel universe. Unlikely? Sure. But much of the challenge in modeling systems is dealing with imperfect assumptions. Just saying.</p>
</blockquote>

<p>Ultimately, it&#39;s up to the abstraction to isolate the significant, identifying features that the system cares about, and disregard the rest. The developer can then decide whether objects will be used in such a way that set membership calculations should care about. In a program that only records <code>name</code> and <code>birthday</code>, it may perfectly correct to treat congruent instances as distinct entities.</p>

<hr>

<p>Hopefully, after all of this explanation, we all stand with equal footing on this slippery subject.</p>

<p>As humans, we strive to understand and implement equality in our society and economy; in the laws and leaders that govern us; in the understanding that we extend to one another as we journey through existence. May we continue towards that ideal, where individuals are judged by the contents of their character, just as we judge a variable by the contents of its memory address.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 26 Aug 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:30:"http://nshipster.com/equality/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:30:"http://nshipster.com/equality/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:31;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:38:"NSHashTable &amp;&lt;br/&gt;NSMapTable";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:11936:"<p><code>NSSet</code> and <code>NSDictionary</code>, along with <code>NSArray</code> are the workhorse collection classes of Foundation. Unlike <a href="http://en.wikipedia.org/wiki/Java_collections_framework"> other standard libraries</a>, implementation details are <a href="http://ridiculousfish.com/blog/posts/array.html">hidden</a> from developers, allowing them to write simple code and trust that it will be (reasonably) performant.</p>

<p>However, even the best abstractions break down; their underlying assumptions overturned. In these cases, developers either venture further down the abstraction, or, if available use a more general-purpose solution.</p>

<p>For <code>NSSet</code> and <code>NSDictionary</code>, the breaking assumption was in the memory behavior when storing objects in the collection. For <code>NSSet</code>, objects are a strongly referenced, as are <code>NSDictionary</code> values. Keys, on the other hand, are copied by <code>NSDictionary</code>. If a developer wanted to store a weak value, or use a non-<code>&lt;NSCopying&gt;</code>-conforming object as a key, they could be clever and use <a href="http://nshipster.com/nsvalue/"><code>NSValue +valueWithNonretainedObject</code></a>. Or, as of iOS 6 (and as far back as Mac OS X 10.5), they could use <code>NSHashTable</code> or <code>NSMapTable</code>, the more general-case counterparts to <code>NSSet</code> or <code>NSDictionary</code>, respectively.</p>

<p>So without further ado, here&#39;s everything you need to know about two of the more obscure members of Foundation&#39;s collection classes:</p>

<h2><code>NSHashTable</code></h2>

<p><code>NSHashTable</code> is a general-purpose analogue of <code>NSSet</code>. Contrasted with the behavior of <code>NSSet</code> / <code>NSMutableSet</code>, <code>NSHashTable</code> has the following characteristics:</p>

<ul>
<li><code>NSSet</code> / <code>NSMutableSet</code> holds <code>strong</code> references to members, which are tested for hashing and equality using the methods <code>hash</code> and <code>isEqual:</code>.</li>
<li><code>NSHashTable</code> is mutable, without an immutable counterpart.</li>
<li><code>NSHashTable</code> can hold <code>weak</code> references to its members.</li>
<li><code>NSHashTable</code> can <code>copy</code> members on input.</li>
<li><code>NSHashTable</code> can contain arbitrary pointers, and use pointer identity for equality and hashing checks.</li>
</ul>

<h3>Usage</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSHashTable</span> <span class="o">*</span><span class="n">hashTable</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSHashTable</span> <span class="n">hashTableWithOptions</span><span class="o">:</span><span class="n">NSPointerFunctionsCopyIn</span><span class="p">];</span>
<span class="p">[</span><span class="n">hashTable</span> <span class="n">addObject</span><span class="o">:</span><span class="s">@&quot;foo&quot;</span><span class="p">];</span>
<span class="p">[</span><span class="n">hashTable</span> <span class="n">addObject</span><span class="o">:</span><span class="s">@&quot;bar&quot;</span><span class="p">];</span>
<span class="p">[</span><span class="n">hashTable</span> <span class="n">addObject</span><span class="o">:</span><span class="mi">@42</span><span class="p">];</span>
<span class="p">[</span><span class="n">hashTable</span> <span class="n">removeObject</span><span class="o">:</span><span class="s">@&quot;bar&quot;</span><span class="p">];</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Members: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">hashTable</span> <span class="n">allObjects</span><span class="p">]);</span>
</code></pre></div>
<p><code>NSHashTable</code> objects are initialized with an option for any of the following behaviors. Deprecated enum values are due to <code>NSHashTable</code> being ported from Garbage-Collected Mac OS X to ARC-ified iOS. Other values are aliased to options defined by <a href="http://developer.apple.com/library/ios/DOCUMENTATION/Cocoa/Reference/Foundation/Classes/NSPointerFunctions_Class/Introduction/Introduction.html">NSPointerFunctions</a>, which will be covered next week on NSHipster.</p>

<blockquote>
<ul>
<li><code>NSHashTableStrongMemory</code>: Equal to <code>NSPointerFunctionsStrongMemory</code>. This is the default behavior, equivalent to <code>NSSet</code> member storage.</li>
<li><code>NSHashTableWeakMemory</code>: Equal to <code>NSPointerFunctionsWeakMemory</code>. Uses weak read and write barriers. Using <code>NSPointerFunctionsWeakMemory</code>, object references will turn to <code>NULL</code> on last release.</li>
<li><code>NSHashTableZeroingWeakMemory</code>: This option has been deprecated. Instead use the <code>NSHashTableWeakMemory</code> option.</li>
<li><code>NSHashTableCopyIn</code>: Use the memory acquire function to allocate and copy items on input (see <a href="http://developer.apple.com/library/ios/DOCUMENTATION/Cocoa/Reference/Foundation/Classes/NSPointerFunctions_Class/Introduction/Introduction.html#//apple_ref/occ/instp/NSPointerFunctions/acquireFunction"><code>NSPointerFunction -acquireFunction</code></a>). Equal to <code>NSPointerFunctionsCopyIn</code>.</li>
<li><code>NSHashTableObjectPointerPersonality</code>: Use shifted pointer for the hash value and direct comparison to determine equality; use the description method for a description. Equal to <code>NSPointerFunctionsObjectPointerPersonality</code>.</li>
</ul>
</blockquote>

<h2><code>NSMapTable</code></h2>

<p><code>NSMapTable</code> is a general-purpose analogue of <code>NSDictionary</code>. Contrasted with the behavior of <code>NSDictionary</code> / <code>NSMutableDictionary</code>, <code>NSMapTable</code> has the following characteristics:</p>

<ul>
<li><code>NSDictionary</code> / <code>NSMutableDictionary</code> copies keys, and holds strong references to values.</li>
<li><code>NSMapTable</code> is mutable, without an immutable counterpart.</li>
<li><code>NSMapTable</code> can hold keys and values with <code>weak</code> references, in such a way that entries are removed when either the key or value is deallocated.</li>
<li><code>NSMapTable</code> can <code>copy</code> its values on input.</li>
<li><code>NSMapTable</code> can contain arbitrary pointers, and use pointer identity for equality and hashing checks.</li>
</ul>

<h3>Usage</h3>

<p>Instances where one might use <code>NSMapTable</code> include non-copyable keys and storing weak references to keyed delegates or another kind of weak object.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="kt">id</span> <span class="n">delegate</span> <span class="o">=</span> <span class="p">...;</span>
<span class="n">NSMapTable</span> <span class="o">*</span><span class="n">mapTable</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMapTable</span> <span class="n">mapTableWithKeyOptions</span><span class="o">:</span><span class="n">NSMapTableStrongMemory</span>
                                             <span class="nl">valueOptions:</span><span class="n">NSMapTableWeakMemory</span><span class="p">];</span>
<span class="p">[</span><span class="n">mapTable</span> <span class="n">setObject</span><span class="o">:</span><span class="n">delegate</span> <span class="n">forKey</span><span class="o">:</span><span class="s">@&quot;foo&quot;</span><span class="p">];</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Keys: %@&quot;</span><span class="p">,</span> <span class="p">[[</span><span class="n">mapTable</span> <span class="n">keyEnumerator</span><span class="p">]</span> <span class="n">allObjects</span><span class="p">]);</span>
</code></pre></div>
<p><code>NSMapTable</code> objects are initialized with options specifying behavior for both keys and values, using the following enum values:</p>

<blockquote>
<ul>
<li><code>NSMapTableStrongMemory</code>: Specifies a strong reference from the map table to its contents.</li>
<li><code>NSMapTableWeakMemory</code>: Uses weak read and write barriers appropriate for ARC or GC. Using <code>NSPointerFunctionsWeakMemory</code>, object references will turn to <code>NULL</code> on last release. Equal to <code>NSMapTableZeroingWeakMemory</code>.</li>
<li><code>NSHashTableZeroingWeakMemory</code>: This option has been superseded by the <code>NSMapTableWeakMemory</code> option.</li>
<li><code>NSMapTableCopyIn</code>: Use the memory acquire function to allocate and copy items on input (see acquireFunction (see <a href="http://developer.apple.com/library/ios/DOCUMENTATION/Cocoa/Reference/Foundation/Classes/NSPointerFunctions_Class/Introduction/Introduction.html#//apple_ref/occ/instp/NSPointerFunctions/acquireFunction"><code>NSPointerFunction -acquireFunction</code></a>). Equal to NSPointerFunctionsCopyIn.</li>
<li><code>NSMapTableObjectPointerPersonality</code>: Use shifted pointer hash and direct equality, object description.
Equal to <code>NSPointerFunctionsObjectPointerPersonality</code>.</li>
</ul>
</blockquote>

<h3>Subscripting</h3>

<p>After looking at a few code examples, a clever NSHipster may have thought &quot;why aren&#39;t we using <a href="http://nshipster.com/object-subscripting/">object subscripting</a>?&quot;. A particularly enterprising NSHipster may even have gotten a few lines of code into implementing a subscripting category for <code>NSMapTable</code>!</p>

<p>So why doesn&#39;t <code>NSMapTable</code> implement subscripting? Take a look at these method signatures:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">objectForKeyedSubscript:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">NSCopying</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">key</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj</span> <span class="nf">forKeyedSubscript:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">NSCopying</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">key</span><span class="p">;</span>
</code></pre></div>
<p>Notice that the <code>key</code> argument is of type <code>&lt;NSCopying&gt;</code>. This is great for <code>NSDictionary</code> <code>NSMutableDictionary</code>, but we can&#39;t make that assumption for <code>NSMapTable</code>. And so we arrive at an impasse: with an <code>id &lt;NSCopying&gt;</code> type, we can&#39;t implement for <code>NSMapTable</code>, however if object subscripting methods were to drop the <code>&lt;NSCopying&gt;</code> constraint, then we would miss out on the compiler check in <code>NSMutableDictionary</code> <code>-setObject:forKeyedSubscript:</code>.</p>

<p>So it goes. Honestly, in a situation where <code>NSMapTable</code> is merited, syntactic sugar is probably the least of one&#39;s concerns.</p>

<hr>

<p>As always, it&#39;s important to remember that programming is not about being clever: always approach a problem from the highest viable level of abstraction. <code>NSSet</code> and <code>NSDictionary</code> are <em>great</em> classes. For 99% of problems, they are undoubtedly the correct tool for the job. If, however, your problem has any of the particular memory management constraints described above, then <code>NSHashTable</code> &amp; <code>NSMapTable</code> may be worth a look.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 19 Aug 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:48:"http://nshipster.com/nshashtable-and-nsmaptable/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:48:"http://nshipster.com/nshashtable-and-nsmaptable/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:32;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:44:"rand(3) / random(3) / arc4random(3) / et al.";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:10790:"<p>What passes for randomness is merely a hidden chain of causality.</p>

<p>In a mechanical universe of material interactions expressed through mathematical equations, it is unclear whether nature encodes an element of chance, or if it&#39;s a uniquely human way to reconcile uncertainty.</p>

<p>We can be sure of one thing, however: in the closed, digital universe of CPU cycles, processes, and threads, there is no true randomness, only <em>pseudorandomness</em>.</p>

<p>Pseudorandomness, is often implemented in a way very similar to a <a href="http://en.wikipedia.org/wiki/Cryptographic_hash_function">cryptographic hash</a>, as a deterministic function that returns a value based on the current time (salted, of course, by some initial seed value). Also like hash functions, there are a number of <acronym>PRNG</acronym>, or pseudorandom number generators, each of which are optimized for particular performance characteristics: uniformity, periodicity, and computational complexity.</p>

<p>Of course, for app developers, all of this is an academic exercise. And rather than bore you with any more high-minded, long-winded treatises on the philosophical nature of randomness, we&#39;re going to tackle this one FAQ-style.</p>

<p>Our goal this week: to clear up all of the lingering questions and misunderstandings about doing random things in Objective-C. Let&#39;s dive in!</p>

<hr>

<h2>How Do I Generate a Random Number in Objective-C?</h2>

<p><em>tl;dr</em>: <strong>Use <code>arc4random()</code> and its related functions.</strong></p>

<p>Specifically, to generate a random number between <code>0</code> and <code>N - 1</code>, use <code>arc4random_uniform()</code>, which avoids <a href="http://eternallyconfuzzled.com/arts/jsw_art_rand.aspx">modulo bias</a>.</p>

<h3>Random <code>int</code> between <code>0</code> and <code>N - 1</code></h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSUInteger</span> <span class="n">r</span> <span class="o">=</span> <span class="n">arc4random_uniform</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
</code></pre></div>
<h3>Random <code>int</code> between <code>1</code> and <code>N</code></h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSUInteger</span> <span class="n">r</span> <span class="o">=</span> <span class="n">arc4random_uniform</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div>
<h3>Random <code>double</code> between <code>0</code> and <code>1</code></h3>

<p>If you are generating a random <code>double</code> or <code>float</code>, another good option are the more obscure <code>rand48</code> family of functions, including <code>drand48(3)</code>.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">srand48</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
<span class="kt">double</span> <span class="n">r</span> <span class="o">=</span> <span class="n">drand48</span><span class="p">();</span>
</code></pre></div>
<blockquote>
<p><code>rand48</code> functions, unlike <code>arc4random</code> functions, require an initial value to be seeded before generating random numbers. This seed function, <code>srand48(3)</code>, should only be run once.</p>
</blockquote>

<h2>How Do I Pick a Random Element from an <code>NSArray</code></h2>

<p>Use <code>arc4random_uniform(3)</code> to generate a random number in the range of a non-empty array.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">if</span> <span class="p">([</span><span class="n">array</span> <span class="n">count</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">arc4random_uniform</span><span class="p">([</span><span class="n">array</span> <span class="n">count</span><span class="p">])];</span>
<span class="p">}</span>
</code></pre></div>
<h2>How Do I Randomly Order an <code>NSArray</code></h2>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">mutableArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">arrayWithArray</span><span class="o">:</span><span class="n">array</span><span class="p">];</span>
<span class="n">NSUInteger</span> <span class="n">count</span> <span class="o">=</span> <span class="p">[</span><span class="n">mutableArray</span> <span class="n">count</span><span class="p">];</span>
<span class="c1">// See http://en.wikipedia.org/wiki/Fisher–Yates_shuffle</span>
<span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="n">NSUInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
      <span class="p">[</span><span class="n">mutableArray</span> <span class="n">exchangeObjectAtIndex</span><span class="o">:</span><span class="n">i</span> <span class="n">withObjectAtIndex</span><span class="o">:</span><span class="n">arc4random_uniform</span><span class="p">((</span><span class="kt">int32_t</span><span class="p">)(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))];</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="n">NSArray</span> <span class="o">*</span><span class="n">randomArray</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="n">arrayWithArray</span><span class="o">:</span><span class="n">mutableArray</span><span class="p">];</span>
</code></pre></div>
<blockquote>
<p>This code is borrowed from <a href="https://github.com/mattt/TTTRandomizedEnumerator">TTTRandomizedEnumerator</a>, which also provides randomized enumerators for <code>NSSet</code>, <code>NSOrderedSet</code>, and <code>NSDictionary</code>.</p>
</blockquote>

<h2>How Do I Generate a Random String?</h2>

<p>If you&#39;re looking to generate &quot;<a href="http://en.wikipedia.org/wiki/Lorem_ipsum">lorem ipsum</a>&quot;-style sentences, try constructing a <a href="http://en.wikipedia.org/wiki/Markov_chain">Markov Chain</a> from a <a href="http://en.wikipedia.org/wiki/Text_corpus">corpus</a>.</p>

<p>Otherwise, if you&#39;re looking to just get random letters, try one of the following methods:</p>

<h3>Generate a Random Lowercase <code>NSString</code></h3>

<p>If you are operating on a known, contiguous range of Unicode characters, such as the lowercase letters (<code>U+0061</code> — <code>U+007A</code>), you can do a simple conversion from a <code>char</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">letter</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="n">stringWithFormat</span><span class="o">:</span><span class="s">@&quot;%c&quot;</span><span class="p">,</span> <span class="n">arc4random_uniform</span><span class="p">(</span><span class="mi">26</span><span class="p">)</span> <span class="o">+</span> <span class="sc">&#39;a&#39;</span><span class="p">];</span>
</code></pre></div>
<h3>Pick a Random Character From an <code>NSString</code></h3>

<p>Otherwise, a simple way to pick random letters from a set of your choosing is to simply create a string containing all of the possible letters:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">vowels</span> <span class="o">=</span> <span class="s">@&quot;aeiouy&quot;</span><span class="p">;</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">letter</span> <span class="o">=</span> <span class="p">[</span><span class="n">vowels</span> <span class="n">substringWithRange</span><span class="o">:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="n">arc4random_uniform</span><span class="p">([</span><span class="n">vowels</span> <span class="n">length</span><span class="p">]),</span> <span class="mi">1</span><span class="p">)];</span>
</code></pre></div>
<h2>Why Should I Use <code>arc4random(3)</code> instead of <code>rand(3)</code> or <code>random(3)</code>?</h2>

<blockquote>
<p>C functions are typically denoted with a number <code>3</code> inside of parentheses, following the organizational convention of <a href="http://en.wikipedia.org/wiki/Man_page#Manual_sections"><code>man</code> pages</a>.</p>
</blockquote>

<ul>
<li><code>arc4random</code> does not require an initial seed (with <code>srand</code> or <code>srandom</code>), making it that much easier to use.</li>
<li><code>arc4random</code> has a range up to <code>0x100000000 (4294967296)</code>, whereas <code>rand</code> and <code>random</code> top out at <code>RAND_MAX = 0x7fffffff (2147483647)</code>.</li>
<li><code>rand</code> has often been implementated in such a way that regularly cycles low bits, making it more predictable.</li>
</ul>

<h2>What are <code>rand(3)</code>, <code>random(3)</code>, and <code>arc4random(3)</code>, and Where Do They Come From?</h2>

<ul>
<li><code>rand</code> is a standard C function.</li>
<li><code>random</code> is <a href="http://pubs.opengroup.org/onlinepubs/009695399/functions/initstate.html">defined as part of the POSIX standard</a>.</li>
<li><code>arc4random</code> is provided in BSD and derived platforms.</li>
</ul>

<hr>

<p>If you have any additional questions about randomness on Objective-C, feel free to tweet <a href="https://twitter.com/NSHipster">@NSHipster</a>. As always, corrections are welcome in the form of a <a href="https://github.com/NSHipster/articles/pulls">pull request</a>.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 12 Aug 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:28:"http://nshipster.com/random/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://nshipster.com/random/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:33;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:13:"Documentation";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:5946:"<p>There&#39;s an adage among Cocoa developers that Objective-C&#39;s verbosity lends its code to being effectively self-documenting. Between <code>longMethodNamesWithNamedParameters:</code> and the explicit typing of those parameters, Objective-C methods don&#39;t leave much to the imagination.</p>

<p>But even self-documenting code can be improved with documentation, and just a small amount of effort can yield significant benefit to others.</p>

<p><strong>Listen</strong>—I know programmers don&#39;t like to be told what to do, and prescriptive arguments of &quot;thou shalt&quot; and &quot;thou shalt not&quot; have the <a href="http://www.youtube.com/watch?v=ss2hULhXf04">rhetorical impact of a trombone</a>, so I&#39;ll cut to the chase:</p>

<p>Do you like Apple&#39;s documentation? Don&#39;t you want that <a href="http://cocoadocs.org/docsets/AFNetworking/1.3.1/Classes/AFHTTPClient.html">for your own libraries?</a> Follow just a few simple conventions, and your code can get the documentation it deserves.</p>

<hr>

<p>Every modern programming language has comments: non-executable natural language annotations denoted by a special character sequence, such as <code>//</code>, <code>/* */</code>, <code>#</code>, and <code>--</code>. Documentation provides auxiliary explanation and context to code using specially-formatted comments, which can be extracted and parsed by a build tool.</p>

<p>In Objective-C, the documentation tool of choice is <a href="https://github.com/tomaz/appledoc"><code>appledoc</code></a>. Using a <a href="http://en.wikipedia.org/wiki/Javadoc">Javadoc</a>-like syntax, <code>appledoc</code> is able to generate HTML and Xcode-compatible <code>.docset</code> docs from <code>.h</code> files that <a href="http://cocoadocs.org/docsets/AFNetworking/1.3.1/Classes/AFHTTPClient.html">look nearly identical</a> to <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/NSArray.html">Apple&#39;s official documentation</a>.</p>

<blockquote>
<p><a href="http://www.stack.nl/%7Edimitri/doxygen/">Doxygen</a>, used primarily for C++, is another viable option for Objective-C, but is generally dispreffered by the iOS / Mac OS X developer community.</p>
</blockquote>

<p>Here are some examples from well-documented Objective-C projects:</p>

<ul>
<li><a href="https://github.com/AFNetworking/AFNetworking/blob/master/AFNetworking/AFHTTPSessionManager.h"><code>AFHTTPSessionManager.h</code></a></li>
<li><a href="https://github.com/marcransome/MRBrew/blob/master/MRBrew/MRBrew.h"><code>MRBrew.h</code></a></li>
<li><a href="https://github.com/groue/GRMustache/blob/master/src/classes/GRMustache.h"><code>GRMustache.h</code></a></li>
<li><a href="https://github.com/mattt/FormatterKit/blob/master/FormatterKit/TTTAddressFormatter.h"><code>TTTAddressFormatter.h</code></a></li>
</ul>

<h2>Guidelines for Writing Objective-C Documentation</h2>

<p>Objective-C documentation is designated by a <code>/** */</code> comment block (note the extra initial star), which precedes any <code>@interface</code> or <code>@protocol</code>, as well as any method or <code>@property</code> declarations.</p>

<p>For classes, categories, and protocols, documentation should describe the purpose of that particular component, offering suggestions and guidelines for how it should be used. Structure it like a news article: start with a top-level &quot;tweet-sized&quot; overview, and then explore further topics in more detail as necessary. Concerns like how a class should (or should not) be subclassed, or any caveats in behavior for standard protocols (like <code>NSCopying</code>) should always be documented.</p>

<p>Each method should similarly begin with a concise description of its functionality, followed by any caveats or additional details. Method documentation also contains Javadoc-style <code>@</code> labels for common fields like parameters and return value:</p>

<ul>
<li><code>@param [param] [Description]</code>: Describes what value should be passed for this parameter</li>
<li><code>@return [Description]</code>: Describes the return value of the method</li>
<li><code>@see [selector]</code>: Provide &quot;see also&quot; reference to related method</li>
<li><code>@warning [description]</code>: Call out exceptional or potentially dangerous behavior</li>
</ul>

<p>Properties are often described in a single sentence, and should include what its default value is.</p>

<p>Related properties and methods should be grouped by an <code>@name</code> declaration, which functions similarly to a <a href="http://nshipster.com/pragma/"><code>#pragma mark</code></a>, and can be used with the triple-slash (<code>///</code>) comment variant.</p>

<p>Try reading other documentation before writing some yourself, in order to get a sense of the correct tone and style. When in doubt about terminology or verbiage, follow the lead of the closest thing you can find from Apple&#39;s official docs.</p>

<blockquote>
<p>To help speed up the process of documenting your project, you may want to check out the <a href="https://github.com/onevcat/VVDocumenter-Xcode">VVDocumenter-Xcode</a> project, which <a href="https://raw.github.com/onevcat/VVDocumenter-Xcode/master/ScreenShot.gif">automatically adds <code>@param</code> and <code>@return</code> labels</a> for methods according to their signature.</p>
</blockquote>

<hr>

<p>Just by following these simple guidelines, you can add great-looking, informative documentation to your own project. Once you get the hang of it, you&#39;ll find yourself cranking docs out in no time.</p>

<blockquote>
<p>Thanks to <a href="https://github.com/orta">@orta</a> for suggesting this week&#39;s topic, and for his ongoing work on <a href="http://cocoadocs.org">CocoaDocs</a> which provides automatically-generated documentation for projects published on <a href="http://cocoapods.org">CocoaPods</a>.</p>
</blockquote>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 05 Aug 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:35:"http://nshipster.com/documentation/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:35:"http://nshipster.com/documentation/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:34;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:17:"NSHipster Quiz #3";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:10045:"<p>NSHipster Pub Quiz came to New York City on July 30th. Like our <a href="http://nshipster.com/nshipster-quiz-1/">first</a> and <a href="http://nshipster.com/nshipster-quiz-2/">second</a> quizzes, questions ranged from random Apple trivia to obscure framework questions—this time, with a particular focus on hardware rumors and questions about iOS [REDACTED].</p>

<p>The event was hosted by <a href="http://meetup.com">Meetup</a>, and sponsored by <a href="https://heroku.com">Heroku</a>. Dozens of the best and brightest minds in Objective-C attended the event, with the team &quot;The Forstall Five&quot; (<a href="https://twitter.com/mb">@mb</a>, <a href="https://twitter.com/bcapps">@bcapps</a>, <a href="https://twitter.com/ethicalpaul">@ethicalpaul</a>, <a href="https://twitter.com/grantjbutler">@grantjbutler</a>, and <a href="https://twitter.com/conbrolution">@conbrolution</a>) taking first place.</p>

<p>If you&#39;d like to play along at home, or test your team&#39;s mettle at work, here are some guidelines:</p>

<ul>
<li>There are 4 Rounds, with 10 questions each</li>
<li>Record answers on a separate sheet of paper</li>
<li>Each correct answer to a question gets you 1 point (unless otherwise specified)</li>
<li>Play with up to 5 friends for maximum enjoyment</li>
<li>Don&#39;t be lame and look things up on the Internet or in Xcode</li>
</ul>

<hr>

<h2>Round 1: General Knowledge</h2>

<p>In honor of hosting this pub quiz in New York City, a couple questions about city planning are thrown in towards the end for good measure.</p>

<ol>
<li>iOS 7 Beta 4 hints at a new hardware feature in the next iPhone related to the acquisition of mobile security firm AuthenTec. What is that feature?</li>
<li>iOS 7 Beta 4 also added <code>UIApplicationDidTakeScreenshotNotification</code> ...which is good news for which popular social networking app?</li>
<li>According to a leaked photo from Chinese site WeiPhone, what is the name of the rumored low-cost, plastic iPhone?</li>
<li>JOBS, starring Ashton Kutcher hits theaters August 16... but which acclaimed screenwriter is behind the other Steve Jobs biopic, currently in production?</li>
<li>Which country has planned 11 &quot;Steve Jobs schools&quot;, featuring an iPad-based curriculum, to open in August?</li>
<li>Which computing pioneer, famous for his 1968 &quot;Mother of All Demos&quot;, passed away on July 2, 2013?</li>
<li>Which New York-based directions and mapping startup was purchased by Apple in July 2013?</li>
<li>Of the world&#39;s major subway systems, London&#39;s is the oldest, while Moscow has the greatest ridership. By what measure is the New York subway system #1?</li>
<li>Who is the author of &quot;The Death and Life of Great American Cities&quot;, which famously argues against the urban renewal plans for Greenwich Village in the 1950&#39;s &amp; 60&#39;s?</li>
<li>What 5 channels were Apple TV with the version 5.3 update (1 point each)</li>
</ol>

<h2>Round 2: Public, Private, or Fake?</h2>

<p>There are 152 frameworks in iOS. You may know of perhaps a few dozen public ones, but there are many more private frameworks hidden in the OS. For each of the following, tell me if the framework (as of iOS 6.1) is public, private, or something we just made up.</p>

<ol>
<li>ActorKit</li>
<li>Celestial</li>
<li>MediaToolbox</li>
<li>URLify</li>
<li>SocialDarwin</li>
<li>Marco</li>
<li>LinguisticsKit</li>
<li>QuickLook</li>
<li>AdSupport</li>
<li>NSAKit</li>
</ol>

<h2>Round 3: Picture Round - Name that App!</h2>

<p>With over 1 Million iOS &amp; Mac Apps on the App Store, it&#39;s clear that the true secret to success boils down to one thing: having a pretty icon. For each icon, tell me the name of the app.</p>

<ul>
<li>1. What is the name of this iOS game?</li>
</ul>

<p><img src="http://nshipster-quiz-3.s3.amazonaws.com/question-1.png" alt="Question 1"></p>

<ul>
<li>2. What is the name of this iOS game?</li>
</ul>

<p><img src="http://nshipster-quiz-3.s3.amazonaws.com/question-2.png" alt="Question 2"></p>

<ul>
<li>3. What is the name of this iOS app?</li>
</ul>

<p><img src="http://nshipster-quiz-3.s3.amazonaws.com/question-3.png" alt="Question 3"></p>

<ul>
<li>4. What is the name of this popular iOS app?</li>
</ul>

<p><img src="http://nshipster-quiz-3.s3.amazonaws.com/question-4.png" alt="Question 4"></p>

<ul>
<li>5. While not on the App Store, jailbreakers will know this icon well. What&#39;s its name?</li>
</ul>

<p><img src="http://nshipster-quiz-3.s3.amazonaws.com/question-5.png" alt="Question 5"></p>

<ul>
<li>6. Which classic Mac app sports this delightful moving truck?</li>
</ul>

<p><img src="http://nshipster-quiz-3.s3.amazonaws.com/question-6.png" alt="Question 6"></p>

<ul>
<li>7. Which indispensible development tool has this incongruous icon?</li>
</ul>

<p><img src="http://nshipster-quiz-3.s3.amazonaws.com/question-7.png" alt="Question 7"></p>

<ul>
<li>8. Which app sports this sleek icon?</li>
</ul>

<p><img src="http://nshipster-quiz-3.s3.amazonaws.com/question-8.png" alt="Question 8"></p>

<ul>
<li>9. Which app is represented by this delightful mail bag?</li>
</ul>

<p><img src="http://nshipster-quiz-3.s3.amazonaws.com/question-9.png" alt="Question 9"></p>

<ul>
<li>10. Which (unfortunately stalled) app has this beautiful icon?</li>
</ul>

<p><img src="http://nshipster-quiz-3.s3.amazonaws.com/question-10.png" alt="Question 10"></p>

<h2>Round 4: [REDACTED]</h2>

<p>For each question, a class or protocol from iOS [REDACTED] is described. For 1 point each, fill in the blank.</p>

<ol>
<li>&quot;An [REDACTED] object captures map-based imagery asynchronously.&quot;</li>
<li>&quot;A [REDACTED] object represents a connected physical game controller.&quot;</li>
<li>&quot;An [REDACTED] object represents a scene of content in Sprite Kit.&quot;</li>
<li>&quot;An [REDACTED] object specifies a gravity vector that applies to all of its dynamic items.&quot;</li>
<li>&quot;[REDACTED] objects provide a mechanism to describe a font with a dictionary of attributes.&quot;</li>
<li>&quot;[REDACTED] is a new class for managing the acquisition of network-based resources in the background&quot;</li>
<li>&quot;An [REDACTED] object provides you with route-based directions data from Apple servers.&quot;</li>
<li>&quot;An [REDACTED] object facilitates communication among all peers in a Multipeer Connectivity session.&quot;</li>
<li>&quot;The [REDACTED] class defines a region in which text is laid out.&quot;</li>
<li>&quot;You can use a [REDACTED] to do either or both of the following:

<ul>
<li>Run a custom animation—including an interactive animation—inside the animation block of an in-progress view controller transition</li>
<li>Register a completion handler that is called after a view controller transition completes, such as to return state to what it was prior to the transition&quot;</li>
</ul></li>
</ol>

<hr>

<h1>Answers</h1>

<h2>Round 1: General Knowledge</h2>

<ol>
<li><a href="http://appleinsider.com/articles/13/07/29/iphone-home-button-fingerprint-scanner-described-in-latest-ios-7-beta">Biometric Authentication</a></li>
<li><a href="http://www.snapchat.com">SnapChat</a></li>
<li><a href="http://www.latimes.com/business/technology/la-fi-tn-the-iphone-5c-apple-color-plasticspotify-20130730,0,1720605.story">iPhone 5C</a></li>
<li><a href="http://tech.fortune.cnn.com/2012/11/16/apple-sorkin-jobs-movie/">Aaron Sorkin</a></li>
<li><a href="http://appleinsider.com/articles/13/07/02/dutch-steve-jobs-schools-to-use-apples-ipad-for-entire-education-experience">The Netherlands</a></li>
<li><a href="http://en.wikipedia.org/wiki/Douglas_Engelbart">Douglas Engelbart</a></li>
<li><a href="http://www.macworld.com/article/2044904/apple-finds-its-way-to-hopstop-acquisition.html">HopStop.com</a></li>
<li><a href="http://en.wikipedia.org/wiki/New_York_City_Subway">Number of Stations (468)</a></li>
<li><a href="http://en.wikipedia.org/wiki/The_Death_and_Life_of_Great_American_Cities">Jane Jacobs</a></li>
<li><a href="http://www.apple.com/pr/library/2013/06/19HBO-GO-WatchESPN-Come-to-Apple-TV.html">HBO Go, WatchESPN, Sky News, Qello, &amp; CrunchyRoll</a></li>
</ol>

<h2>Round 2: Public, Private, or Fake?</h2>

<p>Source: https://github.com/nst/iOS-Runtime-Headers</p>

<ol>
<li>Private (iOS 3.0–)</li>
<li>Private (iOS 2.1–)</li>
<li>Public (iOS 6.0–), formerly Private (iOS 2.1—5.1)</li>
<li>Private (iOS 2.1)</li>
<li>Fake</li>
<li>Private (iOS 4.0—4.3)</li>
<li>Fake</li>
<li>Public (iOS 4.0—)</li>
<li>Public (iOS 6.0—)</li>
<li>Fake</li>
</ol>

<h2>Round 3: Picture Round - Name that App!</h2>

<ol>
<li><a href="https://itunes.apple.com/us/app/toca-hair-salon/id426382105?mt=8">Toca Boca Hair Salon</a></li>
<li><a href="https://itunes.apple.com/us/app/tall-chess/id635361464?mt=8">Tall Chess</a> (Icon has since changed to something less Giraffe-ish)</li>
<li><a href="https://itunes.apple.com/us/app/days-your-visual-photo-gif/id630768365?ls=1&amp;mt=8">Days</a></li>
<li><a href="https://itunes.apple.com/us/app/paper-by-fiftythree/id506003812?mt=8">Paper</a></li>
<li><a href="http://cydia.saurik.com">Cydia</a></li>
<li><a href="http://panic.com/transmit/">Transmit</a></li>
<li><a href="http://www.charlesproxy.com">Charles</a></li>
<li><a href="http://takefiveapp.com">Take Five</a></li>
<li><a href="http://www.realmacsoftware.com/courier">Courier</a></li>
<li><a href="http://inductionapp.com">Induction</a></li>
</ol>

<h2>Round 4: [REDACTED]</h2>

<ol>
<li><code>MKMapSnapshot</code></li>
<li><code>GCController</code></li>
<li><code>SKScene</code></li>
<li><code>UIGravityBehavior</code></li>
<li><code>UIFontDescriptor</code></li>
<li><code>NSURLSession</code></li>
<li><code>MKDirections</code></li>
<li><code>MCSession</code></li>
<li><code>NSTextContainer</code></li>
<li><code>UIViewControllerTransitionCoordinator</code> (protocol for object returned by <code>UIViewController -transitionCoordinator</code>)</li>
</ol>

<hr>

<p>So how did you fare? Tweet out your score to see how you stack up to your peers!</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Wed, 31 Jul 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/nshipster-quiz-3/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/nshipster-quiz-3/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:35;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:16:"UIMenuController";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:12961:"<p>Mobile usability today is truly quite remarkable—especially considering how far it&#39;s come in just the last decade. What was once a clumsy technology relegated to the tech elite has now become the primary mode of computation for a significant portion of the general population.</p>

<p>Yet despite its advances, one can&#39;t help but feel occasionally... trapped.</p>

<p>All too often, there will be information on the screen that you <em>just can&#39;t access</em>. Whether its flight information stuck in a table view cell or an unlinked URL, users are forced to solve problems creatively for lack of a provided solution.</p>

<p>In the past, we&#39;ve mentioned <a href="http://nshipster.com/nslocalizedstring">localization</a> and <a href="http://nshipster.com/uiaccessibility">accessibility</a> as two factors that distinguish great apps from the rest of the pack. This week, we&#39;ll add another item to that list: <strong>Edit Actions</strong>.</p>

<h3>Copy, Cut, Paste, Delete, Select</h3>

<p>iOS 3&#39;s killer feature was undoubtedly push notifications, but the ability to copy-paste is probably a close second. For how much we use it everyday, it&#39;s difficult to imagine how we got along without it. And yet, it remains a relatively obscure feature for 3rd-party apps.</p>

<p>This may be due to how cumbersome it is to implement. Let&#39;s look at a simple implementation, and then dive into some specifics about the APIs:</p>

<h3><code>HipsterLabel.{h,m}</code></h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">HipsterLabel</span> : <span class="nc">UILabel</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">HipsterLabel</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">canBecomeFirstResponder</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">canPerformAction:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">action</span>
              <span class="nl">withSender:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">action</span> <span class="o">==</span> <span class="k">@selector</span><span class="p">(</span><span class="n">copy</span><span class="o">:</span><span class="p">));</span>
<span class="p">}</span>

<span class="cp">#pragma mark - UIResponderStandardEditActions</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">copy:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
    <span class="p">[[</span><span class="n">UIPasteboard</span> <span class="n">generalPasteboard</span><span class="p">]</span> <span class="n">setString</span><span class="o">:</span><span class="n">self</span><span class="p">.</span><span class="n">text</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">@end</span>
</code></pre></div>
<h3><code>ViewController.m</code></h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
    <span class="n">HipsterLabel</span> <span class="o">*</span><span class="n">label</span> <span class="o">=</span> <span class="p">...;</span>
    <span class="n">label</span><span class="p">.</span><span class="n">userInteractionEnabled</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="n">addSubview</span><span class="o">:</span><span class="n">label</span><span class="p">];</span>

    <span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="n">gestureRecognizer</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UILongPressGestureRecognizer</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithTarget</span><span class="o">:</span><span class="n">self</span> <span class="n">action</span><span class="o">:</span><span class="k">@selector</span><span class="p">(</span><span class="n">handleLongPressGesture</span><span class="o">:</span><span class="p">)];</span>
    <span class="p">[</span><span class="n">label</span> <span class="n">addGestureRecognizer</span><span class="o">:</span><span class="n">gestureRecognizer</span><span class="p">];</span>
<span class="p">}</span>

<span class="cp">#pragma mark - UIGestureRecognizer</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">handleLongPressGesture:</span><span class="p">(</span><span class="n">UIGestureRecognizer</span> <span class="o">*</span><span class="p">)</span><span class="nv">recognizer</span>  <span class="p">{</span>
    <span class="n">UIMenuController</span> <span class="o">*</span><span class="n">menuController</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIMenuController</span> <span class="n">sharedMenuController</span><span class="p">];</span>
    <span class="p">[</span><span class="n">menuController</span> <span class="n">setTargetRect</span><span class="o">:</span><span class="n">recognizer</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="n">inView</span><span class="o">:</span><span class="n">recognizer</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">superview</span><span class="p">];</span>
    <span class="p">[</span><span class="n">menuController</span> <span class="n">setMenuVisible</span><span class="o">:</span><span class="nb">YES</span> <span class="n">animated</span><span class="o">:</span><span class="nb">YES</span><span class="p">];</span>

    <span class="p">[</span><span class="n">recognizer</span><span class="p">.</span><span class="n">view</span> <span class="n">becomeFirstResponder</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>So, to recap, in order to allow a label&#39;s text to be copied, the following must happen:</p>

<ul>
<li><code>UILabel</code> must be subclassed to implement <code>canBecomeFirstResponder</code> &amp; <code>canPerformAction:withSender:</code></li>
<li>Each performable action must implement a corresponding method that interacts with <code>UIPasteboard</code></li>
<li>When instantiated by a controller, the label must have <code>userInteractionEnabled</code> set to <code>YES</code> (it is not recommended that this be hard-coded into the subclass implementation)</li>
<li>A <code>UIGestureRecognizer</code> must be added to the label (else, <code>UIResponder</code> methods like <code>touchesBegan:withEvent:</code> are implemented manually in the subclass)</li>
<li>In the method implementation corresponding to the gesture recognizer action, <code>UIMenuController</code> must be positioned and made visible</li>
<li>Finally, the label must become first responder</li>
</ul>

<p>If you&#39;re wondering why, <em>oh why</em>, this isn&#39;t just built into <code>UILabel</code>, well... join the club.</p>

<h2><code>UIMenuController</code></h2>

<p><code>UIMenuController</code> is responsible for presenting edit action menu items. Each app has its own singleton instance, <code>sharedMenuController</code>. By default, a menu controller will show commands for any methods in the <code>UIResponderStandardEditActions</code> informal protocol that the responder returns <code>YES</code> for in <code>canPerformAction:withSender:</code>.</p>

<h3><code>&lt;UIResponderStandardEditActions&gt;</code></h3>

<h4>Handling Copy, Cut, Delete, and Paste Commands</h4>

<blockquote>
<p>Each command travels from the first responder up the responder chain until it is handled; it is ignored if no responder handles it. If a responder doesn&#39;t handle the command in the current context, it should pass it to the next responder.</p>

<p><code>copy:</code> This method is invoked when the user taps the Copy command of the editing menu. A subclass of UIResponder typically implements this method. Using the methods of the UIPasteboard class, it should convert the selection into an appropriate object (if necessary) and write that object to a pasteboard.</p>

<p><code>cut:</code> This method is invoked when the user taps the Cut command of the editing menu. A subclass of UIResponder typically implements this method. Using the methods of the UIPasteboard class, it should convert the selection into an appropriate object (if necessary) and write that object to a pasteboard. It should also remove the selected object from the user interface and, if applicable, from the application&#39;s data model.</p>

<p><code>delete:</code> This method is invoked when the user taps the Delete command of the editing menu. A subclass of UIResponder typically implements this method by removing the selected object from the user interface and, if applicable, from the application&#39;s data model. It should not write any data to the pasteboard.</p>

<p><code>paste:</code> This method is invoked when the user taps the Paste command of the editing menu. A subclass of UIResponder typically implements this method. Using the methods of the UIPasteboard class, it should read the data in the pasteboard, convert the data into an appropriate internal representation (if necessary), and display it in the user interface.</p>
</blockquote>

<h4>Handling Selection Commands</h4>

<blockquote>
<p><code>select:</code> This method is invoked when the user taps the Select command of the editing menu. This command is used for targeted selection of items in the receiving view that can be broken up into chunks. This could be, for example, words in a text view. Another example might be a view that puts lists of visible objects in multiple groups; the select: command could be implemented to select all the items in the same group as the currently selected item.</p>

<p><code>selectAll:</code> This method is invoked when the user taps the Select All command of the editing menu.</p>
</blockquote>

<p>In addition to these basic editing commands, there are commands that deal with rich text editing (<code>toggleBoldface:</code>, <code>toggleItalics:</code>, and <code>toggleUnderline:</code>) and writing direction changes (<code>makeTextWritingDirectionLeftToLeft:</code> &amp; <code>makeTextWritingDirectionLeftToRight:</code>). As these are not generally applicable outside of writing an editor, we&#39;ll just mention them in passing.</p>

<h2><code>UIMenuItem</code></h2>

<p>With iOS 3.2, developers could now add their own commands to the menu controller. As yet unmentioned, but familiar commands like &quot;Define&quot; or spell check suggestions take advantage of this.</p>

<p><code>UIMenuController</code> has a <code>menuItems</code> property, which is an <code>NSArray</code> of <code>UIMenuItem</code> objects. Each <code>UIMenuItem</code> object has a <code>title</code> and <code>action</code>. In order to have a menu item command display in a menu controller, the responder must implement the corresponding selector.</p>

<hr>

<p>Just as a skilled coder designs software to be flexible and adaptable to unforeseen use cases, any app developer worth their salt understands the need to accommodate users with different needs from themselves.</p>

<p>As you develop your app, take to heart the following guidelines:</p>

<ul>
<li>For every control, think about what you would expect a right-click (control-click) to do if used from the desktop.</li>
<li>Any time information is shown to the user, consider whether it should be copyable.</li>
<li>With formatted or multi-faceted information, consider whether multiple kinds of copy commands are appropriate.</li>
<li>When implementing <code>copy:</code> make sure to copy only valuable information to the pasteboard.</li>
<li>For editable controls, ensure that your implementation <code>paste:</code> can handle a wide range of valid and invalid input.</li>
</ul>

<p>If mobile is to become most things to most people, the least we can do is make our best effort to allow users to be more productive. Your thoughtful use of <code>UIMenuController</code> will not go unnoticed.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 22 Jul 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/uimenucontroller/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/uimenucontroller/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:36;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:11:"NSPredicate";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:25926:"<p><code>NSPredicate</code> is a Foundation class that specifies how data should be fetched or filtered. Its query language, which is like a cross between a SQL <code>WHERE</code> clause and a regular expression, provides an expressive, natural language interface to define logical conditions on which a collection is searched.</p>

<p>It&#39;s easier to show <code>NSPredicate</code> in use, rather than talk about it in the abstract, so we&#39;re going to revisit the example data set used in the <a href="http://nshipster.com/nssortdescriptor/"><code>NSSortDescriptor</code> article</a>:</p>

<table>
  <thead>
    <tr>
      <th><tt>index</tt></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><tt>firstName</tt></td>
      <td>Alice</td>
      <td>Bob</td>
      <td>Charlie</td>
      <td>Quentin</td>
    </tr>
    <tr>
      <td><tt>lastName</tt></td>
      <td>Smith</td>
      <td>Jones</td>
      <td>Smith</td>
      <td>Alberts</td>
    </tr>
    <tr>
      <td><tt>age</tt></td>
      <td>24</td>
      <td>27</td>
      <td>33</td>
      <td>31</td>
    </tr>
  </tbody>
</table>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">Person</span> : <span class="nc">NSObject</span>
<span class="k">@property</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">firstName</span><span class="p">;</span>
<span class="k">@property</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">lastName</span><span class="p">;</span>
<span class="k">@property</span> <span class="n">NSNumber</span> <span class="o">*</span><span class="n">age</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">Person</span>

<span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">description</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">NSString</span> <span class="n">stringWithFormat</span><span class="o">:</span><span class="s">@&quot;%@ %@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">firstName</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">lastName</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">@end</span>

<span class="cp">#pragma mark -</span>

<span class="n">NSArray</span> <span class="o">*</span><span class="n">firstNames</span> <span class="o">=</span> <span class="p">@[</span> <span class="s">@&quot;Alice&quot;</span><span class="p">,</span> <span class="s">@&quot;Bob&quot;</span><span class="p">,</span> <span class="s">@&quot;Charlie&quot;</span><span class="p">,</span> <span class="s">@&quot;Quentin&quot;</span> <span class="p">];</span>
<span class="n">NSArray</span> <span class="o">*</span><span class="n">lastNames</span> <span class="o">=</span> <span class="p">@[</span> <span class="s">@&quot;Smith&quot;</span><span class="p">,</span> <span class="s">@&quot;Jones&quot;</span><span class="p">,</span> <span class="s">@&quot;Smith&quot;</span><span class="p">,</span> <span class="s">@&quot;Alberts&quot;</span> <span class="p">];</span>
<span class="n">NSArray</span> <span class="o">*</span><span class="n">ages</span> <span class="o">=</span> <span class="p">@[</span> <span class="mi">@24</span><span class="p">,</span> <span class="mi">@27</span><span class="p">,</span> <span class="mi">@33</span><span class="p">,</span> <span class="mi">@31</span> <span class="p">];</span>

<span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">people</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
<span class="p">[</span><span class="n">firstNames</span> <span class="n">enumerateObjectsUsingBlock</span><span class="o">:^</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Person</span> <span class="o">*</span><span class="n">person</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
    <span class="n">person</span><span class="p">.</span><span class="n">firstName</span> <span class="o">=</span> <span class="n">firstNames</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
    <span class="n">person</span><span class="p">.</span><span class="n">lastName</span> <span class="o">=</span> <span class="n">lastNames</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
    <span class="n">person</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">ages</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
    <span class="p">[</span><span class="n">people</span> <span class="n">addObject</span><span class="o">:</span><span class="n">person</span><span class="p">];</span>
<span class="p">}];</span>

<span class="n">NSPredicate</span> <span class="o">*</span><span class="n">bobPredicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="n">predicateWithFormat</span><span class="o">:</span><span class="s">@&quot;firstName = &#39;Bob&#39;&quot;</span><span class="p">];</span>
<span class="n">NSPredicate</span> <span class="o">*</span><span class="n">smithPredicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="n">predicateWithFormat</span><span class="o">:</span><span class="s">@&quot;lastName = %@&quot;</span><span class="p">,</span> <span class="s">@&quot;Smith&quot;</span><span class="p">];</span>
<span class="n">NSPredicate</span> <span class="o">*</span><span class="n">thirtiesPredicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="n">predicateWithFormat</span><span class="o">:</span><span class="s">@&quot;age &gt;= 30&quot;</span><span class="p">];</span>

<span class="c1">// [&quot;Bob Jones&quot;]</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Bobs: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">people</span> <span class="n">filteredArrayUsingPredicate</span><span class="o">:</span><span class="n">bobPredicate</span><span class="p">]);</span>

<span class="c1">// [&quot;Alice Smith&quot;, &quot;Charlie Smith&quot;]</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Smiths: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">people</span> <span class="n">filteredArrayUsingPredicate</span><span class="o">:</span><span class="n">smithPredicate</span><span class="p">]);</span>

<span class="c1">// [&quot;Charlie Smith&quot;, &quot;Quentin Alberts&quot;]</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;30&#39;s: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">people</span> <span class="n">filteredArrayUsingPredicate</span><span class="o">:</span><span class="n">thirtiesPredicate</span><span class="p">]);</span>
</code></pre></div>
<h2>Using <code>NSPredicate</code> with Collections</h2>

<p>Foundation provides methods to filter <code>NSArray</code> / <code>NSMutableArray</code> &amp; <code>NSSet</code> / <code>NSMutableSet</code> with predicates.</p>

<p>Immutable collections, <code>NSArray</code> &amp; <code>NSSet</code>, have the methods <code>filteredArrayUsingPredicate:</code> and <code>filteredSetUsingPredicate:</code> which return an immutable collection by evaluating a predicate on the receiver.</p>

<p>Mutable collections, <code>NSMutableArray</code> &amp; <code>NSMutableSet</code> have the method <code>filterUsingPredicate:</code>, which removes any objects that evaluate to <code>FALSE</code> when running the predicate on the receiver.</p>

<p><code>NSDictionary</code> can use predicates by filtering its keys or values (both <code>NSArray</code> objects). <code>NSOrderedSet</code> can either create new ordered sets from a filtered <code>NSArray</code> or <code>NSSet</code>, or alternatively, <code>NSMutableSet</code> can simply <code>removeObjectsInArray:</code>, passing objects filtered with the <em>negated</em> predicate.</p>

<h2>Using <code>NSPredicate</code> with Core Data</h2>

<p><code>NSFetchRequest</code> has a <code>predicate</code> property, which specifies the logical conditions under which managed objects should be retrieved. The same rules apply, except that predicates are evaluated by the persistent store coordinator within a managed object context, rather than collections being filtered in-memory.</p>

<h2>Predicate Syntax</h2>

<h3>Substitutions</h3>

<blockquote>
<ul>
<li><code>%@</code> is a var arg substitution for an object value—often a string, number, or date.</li>
<li><code>%K</code> is a var arg substitution for a key path.</li>
</ul>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSPredicate</span> <span class="o">*</span><span class="n">ageIs33Predicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="n">predicateWithFormat</span><span class="o">:</span><span class="s">@&quot;%K = %@&quot;</span><span class="p">,</span> <span class="s">@&quot;age&quot;</span><span class="p">,</span> <span class="mi">@33</span><span class="p">];</span>

<span class="c1">// [&quot;Charlie Smith&quot;]</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Age 33: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">people</span> <span class="n">filteredArrayUsingPredicate</span><span class="o">:</span><span class="n">ageIs33Predicate</span><span class="p">]);</span>
</code></pre></div>
<blockquote>
<ul>
<li><code>$VARIABLE_NAME</code> is a value that can be substituted with <code>NSPredicate -predicateWithSubstitutionVariables:</code>.</li>
</ul>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSPredicate</span> <span class="o">*</span><span class="n">namesBeginningWithLetterPredicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="n">predicateWithFormat</span><span class="o">:</span><span class="s">@&quot;(firstName BEGINSWITH[cd] $letter) OR (lastName BEGINSWITH[cd] $letter)&quot;</span><span class="p">];</span>

<span class="c1">// [&quot;Alice Smith&quot;, &quot;Quentin Alberts&quot;]</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;&#39;A&#39; Names: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">people</span> <span class="n">filteredArrayUsingPredicate</span><span class="o">:</span><span class="p">[</span><span class="n">namesBeginningWithLetterPredicate</span> <span class="n">predicateWithSubstitutionVariables</span><span class="o">:</span><span class="p">@{</span><span class="s">@&quot;letter&quot;</span><span class="o">:</span> <span class="s">@&quot;A&quot;</span><span class="p">}]]);</span>
</code></pre></div>
<h3>Basic Comparisons</h3>

<blockquote>
<ul>
<li><code>=</code>, <code>==</code>: The left-hand expression is equal to the right-hand expression.</li>
<li><code>&gt;=</code>, <code>=&gt;</code>: The left-hand expression is greater than or equal to the right-hand expression.</li>
<li><code>&lt;=</code>, <code>=&lt;</code>: The left-hand expression is less than or equal to the right-hand expression.</li>
<li><code>&gt;</code>: The left-hand expression is greater than the right-hand expression.</li>
<li><code>&lt;</code>: The left-hand expression is less than the right-hand expression.</li>
<li><code>!=</code>, <code>&lt;&gt;</code>: The left-hand expression is not equal to the right-hand expression.</li>
<li><code>BETWEEN</code>: The left-hand expression is between, or equal to either of, the values specified in the right-hand side. The right-hand side is a two value array (an array is required to specify order) giving upper and lower bounds. For example, <code>1 BETWEEN { 0 , 33 }</code>, or <code>$INPUT BETWEEN { $LOWER, $UPPER }</code>.</li>
</ul>
</blockquote>

<h3>Basic Compound Predicates</h3>

<blockquote>
<ul>
<li><code>AND</code>, <code>&amp;&amp;</code>: Logical <code>AND</code>.</li>
<li><code>OR</code>, <code>||</code>: Logical <code>OR</code>.</li>
<li><code>NOT</code>, <code>!</code>: Logical <code>NOT</code>.</li>
</ul>
</blockquote>

<h3>String Comparisons</h3>

<blockquote>
<p>String comparisons are by default case and diacritic sensitive. You can modify an operator using the key characters c and d within square braces to specify case and diacritic insensitivity respectively, for example firstName BEGINSWITH[cd] $FIRST_NAME.</p>

<ul>
<li><code>BEGINSWITH</code>: The left-hand expression begins with the right-hand expression.</li>
<li><code>CONTAINS</code>: The left-hand expression contains the right-hand expression.</li>
<li><code>ENDSWITH</code>: The left-hand expression ends with the right-hand expression.</li>
<li><code>LIKE</code>: The left hand expression equals the right-hand expression: <code>?</code> and <code>*</code> are allowed as wildcard characters, where <code>?</code> matches 1 character and <code>*</code> matches 0 or more characters.</li>
<li><code>MATCHES</code>:  The left hand expression equals the right hand expression using a regex-style comparison according to ICU v3 (for more details see the <a href="http://userguide.icu-project.org/strings/regexp">ICU User Guide for Regular Expressions</a>).</li>
</ul>
</blockquote>

<h3>Aggregate Operations</h3>

<h4>Relational Operations</h4>

<blockquote>
<ul>
<li><code>ANY</code>, <code>SOME</code>: Specifies any of the elements in the following expression. For example, <code>ANY children.age &lt; 18</code>.</li>
<li><code>ALL</code>: Specifies all of the elements in the following expression. For example, <code>ALL children.age &lt; 18</code>.</li>
<li><code>NONE</code>: Specifies none of the elements in the following expression. For example, <code>NONE children.age &lt; 18</code>. This is logically equivalent to <code>NOT (ANY ...)</code>.</li>
<li><code>IN</code>: Equivalent to an SQL <code>IN</code> operation, the left-hand side must appear in the collection specified by the right-hand side. For example, <code>name IN { &#39;Ben&#39;, &#39;Melissa&#39;, &#39;Nick&#39; }</code>.</li>
</ul>
</blockquote>

<h4>Array Operations</h4>

<blockquote>
<ul>
<li><code>array[index]</code>: Specifies the element at the specified index in <code>array</code>.</li>
<li><code>array[FIRST]</code>: Specifies the first element in <code>array</code>.</li>
<li><code>array[LAST]</code>: Specifies the last element in <code>array</code>.</li>
<li><code>array[SIZE]</code>: Specifies the size of <code>array</code>.</li>
</ul>
</blockquote>

<h3>Boolean Value Predicates</h3>

<blockquote>
<ul>
<li><code>TRUEPREDICATE</code>: A predicate that always evaluates to <code>TRUE</code>.</li>
<li><code>FALSEPREDICATE</code>: A predicate that always evaluates to <code>FALSE</code>.</li>
</ul>
</blockquote>

<h2><code>NSCompoundPredicate</code></h2>

<p>We saw that <code>AND</code> &amp; <code>OR</code> can be used in predicate format strings to create compound predicates. However, the same can be accomplished using an <code>NSCompoundPredicate</code>.</p>

<p>For example, the following predicates are equivalent:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[</span><span class="n">NSCompoundPredicate</span> <span class="n">andPredicateWithSubpredicates</span><span class="o">:</span><span class="p">@[[</span><span class="n">NSPredicate</span> <span class="n">predicateWithFormat</span><span class="o">:</span><span class="s">@&quot;age &gt; 25&quot;</span><span class="p">],</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="n">predicateWithFormat</span><span class="o">:</span><span class="s">@&quot;firstName = %@&quot;</span><span class="p">,</span> <span class="s">@&quot;Quentin&quot;</span><span class="p">]]];</span>

<span class="p">[</span><span class="n">NSPredicate</span> <span class="n">predicateWithFormat</span><span class="o">:</span><span class="s">@&quot;(age &gt; 25) AND (firstName = %@)&quot;</span><span class="p">,</span> <span class="s">@&quot;Quentin&quot;</span><span class="p">];</span>
</code></pre></div>
<p>While the syntax string literal is certainly easier to type, there are occasions where you may need to combine existing predicates. In these cases, <code>NSCompoundPredicate -andPredicateWithSubpredicates:</code> &amp; <code>-orPredicateWithSubpredicates:</code> is the way to go.</p>

<h2><code>NSComparisonPredicate</code></h2>

<p>Similarly, if after reading <a href="http://nshipster.com/nsexpression/">last week&#39;s article</a> you now find yourself with more <code>NSExpression</code> objects than you know what to do with, <code>NSComparisonPredicate</code> can help you out.</p>

<p>Like <code>NSCompoundPredicate</code>, <code>NSComparisonPredicate</code> constructs an <code>NSPredicate</code> from subcomponents—in this case, <code>NSExpression</code>s on the left and right hand sides.
Analyzing its class constructor provides a glimpse into the way <code>NSPredicate</code> format strings are parsed:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">+</span> <span class="p">(</span><span class="n">NSPredicate</span> <span class="o">*</span><span class="p">)</span><span class="nf">predicateWithLeftExpression:</span><span class="p">(</span><span class="n">NSExpression</span> <span class="o">*</span><span class="p">)</span><span class="nv">lhs</span>
                             <span class="nl">rightExpression:</span><span class="p">(</span><span class="n">NSExpression</span> <span class="o">*</span><span class="p">)</span><span class="nv">rhs</span>
                                    <span class="nl">modifier:</span><span class="p">(</span><span class="n">NSComparisonPredicateModifier</span><span class="p">)</span><span class="nv">modifier</span>
                                        <span class="nl">type:</span><span class="p">(</span><span class="n">NSPredicateOperatorType</span><span class="p">)</span><span class="nv">type</span>
                                     <span class="nl">options:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">options</span>
</code></pre></div>
<h4>Parameters</h4>

<blockquote>
<ul>
<li><code>lhs</code>: The left hand expression.</li>
<li><code>rhs</code>: The right hand expression.</li>
<li><code>modifier</code>: The modifier to apply. (<code>ANY</code> or <code>ALL</code>)</li>
<li><code>type</code>: The predicate operator type.</li>
<li><code>options</code>: The options to apply. For no options, pass <code>0</code>.</li>
</ul>
</blockquote>

<h3><code>NSComparisonPredicate</code> Types</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">enum</span> <span class="p">{</span>
   <span class="n">NSLessThanPredicateOperatorType</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
   <span class="n">NSLessThanOrEqualToPredicateOperatorType</span><span class="p">,</span>
   <span class="n">NSGreaterThanPredicateOperatorType</span><span class="p">,</span>
   <span class="n">NSGreaterThanOrEqualToPredicateOperatorType</span><span class="p">,</span>
   <span class="n">NSEqualToPredicateOperatorType</span><span class="p">,</span>
   <span class="n">NSNotEqualToPredicateOperatorType</span><span class="p">,</span>
   <span class="n">NSMatchesPredicateOperatorType</span><span class="p">,</span>
   <span class="n">NSLikePredicateOperatorType</span><span class="p">,</span>
   <span class="n">NSBeginsWithPredicateOperatorType</span><span class="p">,</span>
   <span class="n">NSEndsWithPredicateOperatorType</span><span class="p">,</span>
   <span class="n">NSInPredicateOperatorType</span><span class="p">,</span>
   <span class="n">NSCustomSelectorPredicateOperatorType</span><span class="p">,</span>
   <span class="n">NSContainsPredicateOperatorType</span><span class="p">,</span>
   <span class="n">NSBetweenPredicateOperatorType</span>
<span class="p">};</span>
<span class="k">typedef</span> <span class="n">NSUInteger</span> <span class="n">NSPredicateOperatorType</span><span class="p">;</span>
</code></pre></div>
<h3><code>NSComparisonPredicate</code> Options</h3>

<blockquote>
<ul>
<li><code>NSCaseInsensitivePredicateOption</code>: A case-insensitive predicate. You represent this option in a predicate format string using a [c] following a string operation (for example, &quot;NeXT&quot; like[c] &quot;next&quot;).</li>
<li><code>NSDiacriticInsensitivePredicateOption</code>: A diacritic-insensitive predicate. You represent this option in a predicate format string using a [d] following a string operation (for example, &quot;naïve&quot; like[d] &quot;naive&quot;).</li>
<li><code>NSNormalizedPredicateOption</code>: Indicates that the strings to be compared have been preprocessed. This option supersedes NSCaseInsensitivePredicateOption and NSDiacriticInsensitivePredicateOption, and is intended as a performance optimization option. You represent this option in a predicate format string using a [n] following a string operation (for example, &quot;WXYZlan&quot; matches[n] &quot;.lan&quot;).</li>
<li><code>NSLocaleSensitivePredicateOption</code>: Indicates that strings to be compared using <code>&lt;</code>, <code>&lt;=</code>, <code>=</code>, <code>=&gt;</code>, <code>&gt;</code> should be handled in a locale-aware fashion. You represent this option in a predicate format string using a <code>[l]</code> following one of the <code>&lt;</code>, <code>&lt;=</code>, <code>=</code>, <code>=&gt;</code>, <code>&gt;</code> operators (for example, &quot;straße&quot; &gt;[l] &quot;strasse&quot;).</li>
</ul>
</blockquote>

<h2>Block Predicates</h2>

<p>Finally, if you just can&#39;t be bothered to learn the <code>NSPredicate</code> format syntax, you can go through the motions with <code>NSPredicate +predicateWithBlock:</code>.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSPredicate</span> <span class="o">*</span><span class="n">shortNamePredicate</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSPredicate</span> <span class="n">predicateWithBlock</span><span class="o">:^</span><span class="kt">BOOL</span><span class="p">(</span><span class="kt">id</span> <span class="n">evaluatedObject</span><span class="p">,</span> <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">bindings</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">[[</span><span class="n">evaluatedObject</span> <span class="n">firstName</span><span class="p">]</span> <span class="n">length</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">;</span>
        <span class="p">}];</span>

<span class="c1">// [&quot;Alice Smith&quot;, &quot;Bob Jones&quot;]</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Short Names: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">people</span> <span class="n">filteredArrayUsingPredicate</span><span class="o">:</span><span class="n">shortNamePredicate</span><span class="p">]);</span>
</code></pre></div>
<p>...Alright, that whole dig on <code>predicateWithBlock:</code> as being the lazy way out wasn&#39;t <em>entirely</em> charitable.</p>

<p>Actually, since blocks can encapsulate any kind of calculation, there is a whole class of queries that can&#39;t be expressed with the <code>NSPredicate</code> format string (such as evaluating against values dynamically calculated at run-time). And while its possible to accomplish the same using an <code>NSExpression</code> with a custom selector, blocks provide a convenient interface to get the job done.</p>

<p>One important note: <strong><code>NSPredicate</code>s created with <code>predicateWithBlock:</code> cannot be used for Core Data fetch requests backed by a <code>SQLite</code> store.</strong></p>

<hr>

<p><code>NSPredicate</code> is, and I know this is said a lot, truly one of the jewels of Cocoa. Other languages would be lucky to have something with half of its capabilities in a third-party library—let alone the standard library. Having it as a standard-issue component affords us as application and framework developers an incredible amount of leverage in working with data.</p>

<p>Together with <code>NSExpression</code>, <code>NSPredicate</code> reminds us what a treat Foundation is: a framework that is not only incredibly useful, but meticulously architected and engineered, to be taken as inspiration for how we should write our own code.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 15 Jul 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:33:"http://nshipster.com/nspredicate/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:33:"http://nshipster.com/nspredicate/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:37;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:12:"NSExpression";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:11477:"<p>Cocoa is the envy of other standard libraries when it comes to querying and arranging information. With <code>NSPredicate</code>, <a href="http://nshipster.com/nssortdescriptor/"><code>NSSortDescriptor</code></a>, and an occasional <code>NSFetchRequest</code>, even the most complex data tasks can be reduced into just a few, <em>extremely-understandable</em> lines of code.</p>

<p>Now, NSHipsters are no doubt already familiar with <code>NSPredicate</code> (and if you aren&#39;t, be sure to tune in next week!), but if we take a closer look at <code>NSPredicate</code>, we see that <code>NSPredicate</code> is actually made up of smaller, atomic parts: two <code>NSExpression</code>s (a left-hand value &amp; a right-hand value), compared with an operator (e.g. <code>&lt;</code>, <code>IN</code>, <code>LIKE</code>, etc.).</p>

<p>Because most developers only use <code>NSPredicate</code> by means of <code>+predicateWithFormat:</code>, <code>NSExpression</code> is a relatively obscure class. Which is a shame, because <code>NSExpression</code> is quite an incredible piece of functionality in its own right.</p>

<p>So allow me, dear readers, to express my respect and fascination with <code>NSExpression</code>:</p>

<h2>Evaluating Math</h2>

<p>The first thing you should know about <code>NSExpression</code> is that it lives to reduce terms. If you think about the process of evaluating an <code>NSPredicate</code>, there are two terms and a comparator, so those two terms need to simplify into something that the operator can handle—very much like the process of compiling a line of code.</p>

<p>Which leads us to <code>NSExpression</code>&#39;s first trick: <strong>doing math</strong>.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSExpression</span> <span class="o">*</span><span class="n">expression</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSExpression</span> <span class="n">expressionWithFormat</span><span class="o">:</span><span class="s">@&quot;4 + 5 - 2**3&quot;</span><span class="p">];</span>
<span class="kt">id</span> <span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">expression</span> <span class="n">expressionValueWithObject</span><span class="o">:</span><span class="nb">nil</span> <span class="n">context</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span> <span class="c1">// =&gt; 1</span>
</code></pre></div>
<p>It&#39;s no <a href="http://www.wolframalpha.com/input/?i=finn+the+human+like+curve">Wolfram Alpha</a>, but if your app does anything where evaluating mathematical expressions would be useful, well... there you go.</p>

<h2>Functions</h2>

<p>But we&#39;ve only just scratched the surface with <code>NSExpression</code>. Not impressed by a computer doing primary-school maths? How about high school statistics, then?</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSArray</span> <span class="o">*</span><span class="n">numbers</span> <span class="o">=</span> <span class="p">@[</span><span class="mi">@1</span><span class="p">,</span> <span class="mi">@2</span><span class="p">,</span> <span class="mi">@3</span><span class="p">,</span> <span class="mi">@4</span><span class="p">,</span> <span class="mi">@4</span><span class="p">,</span> <span class="mi">@5</span><span class="p">,</span> <span class="mi">@9</span><span class="p">,</span> <span class="mi">@11</span><span class="p">];</span>
<span class="n">NSExpression</span> <span class="o">*</span><span class="n">expression</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSExpression</span> <span class="n">expressionForFunction</span><span class="o">:</span><span class="s">@&quot;stddev:&quot;</span> <span class="n">arguments</span><span class="o">:</span><span class="p">@[[</span><span class="n">NSExpression</span> <span class="n">expressionForConstantValue</span><span class="o">:</span><span class="n">numbers</span><span class="p">]]];</span>
<span class="kt">id</span> <span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">expression</span> <span class="n">expressionValueWithObject</span><span class="o">:</span><span class="nb">nil</span> <span class="n">context</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span> <span class="c1">// =&gt; 3.21859...</span>
</code></pre></div>
<blockquote>
<p><code>NSExpression</code> functions take a given number of sub-expression arguments. For instance, in the above example, to get the standard deviation of the collection, the array of numbers had to be wrapped with <code>+expressionForConstantValue:</code>. A minor inconvenience (which ultimately allows <code>NSExpression</code> to be incredibly flexible), but enough to trip up anyone trying things out for the first time.</p>
</blockquote>

<p>If you found the <a href="http://nshipster.com/kvc-collection-operators/">Key-Value Coding Simple Collection Operators</a> (<code>@avg</code>, <code>@sum</code>, et al.) lacking, perhaps <code>NSExpression</code>&#39;s built-in statistical, arithmetic, and bitwise functions will pique your interest.</p>

<blockquote>
<p><strong>A word of caution</strong>: <a href="http://developer.apple.com/library/ios/#documentation/cocoa/reference/foundation/Classes/NSExpression_Class/Reference/NSExpression.html">according to this table in Apple&#39;s documentation for <code>NSExpression</code></a>, there is apparently no overlap between the availability of functions between Mac OS X &amp; iOS. It would appear that recent versions of iOS do, indeed, support functions like <code>stddev:</code>, but this is not reflected in headers or documentation. Any details <a href="https://github.com/NSHipster/articles/pulls">in the form of a pull request</a> would be greatly appreciated.</p>
</blockquote>

<h3>Statistics</h3>

<ul>
<li><code>average:</code></li>
<li><code>sum:</code></li>
<li><code>count:</code></li>
<li><code>min:</code></li>
<li><code>max:</code></li>
<li><code>median:</code></li>
<li><code>mode:</code></li>
<li><code>stddev:</code></li>
</ul>

<h3>Basic Arithmetic</h3>

<p>These functions take two <code>NSExpression</code> objects representing numbers.</p>

<ul>
<li><code>add:to:</code></li>
<li><code>from:subtract:</code></li>
<li><code>multiply:by:</code></li>
<li><code>divide:by:</code></li>
<li><code>modulus:by:</code></li>
<li><code>abs:</code></li>
</ul>

<h3>Advanced Arithmetic</h3>

<ul>
<li><code>sqrt:</code></li>
<li><code>log:</code></li>
<li><code>ln:</code></li>
<li><code>raise:toPower:</code></li>
<li><code>exp:</code></li>
</ul>

<h3>Bounding Functions</h3>

<ul>
<li><code>ceiling:</code> - <em>(the smallest integral value not less than the value in the array)</em></li>
<li><code>trunc:</code> - <em>(the integral value nearest to but no greater than the value in the array)</em></li>
</ul>

<h3>Functions Shadowing <code>math.h</code> Functions</h3>

<p>So mentioned, because <code>ceiling</code> is easily confused with <code>ceil(3)</code>. Whereas <code>ceiling</code> acts on an array of numbers, while <code>ceil(3)</code> takes a <code>double</code> (and doesn&#39;t have a corresponding built-in <code>NSExpression</code> function). <code>floor:</code> here acts the same as <code>floor(3)</code>.</p>

<ul>
<li><code>floor:</code></li>
</ul>

<h3>Random Functions</h3>

<p>Two variations—one with and one without an argument. Taking no argument, <code>random</code> returns an equivalent of <code>rand(3)</code>, while <code>random:</code> takes a random element from the <code>NSExpression</code> of an array of numbers.</p>

<ul>
<li><code>random</code></li>
<li><code>random:</code></li>
</ul>

<h3>Binary Arithmetic</h3>

<ul>
<li><code>bitwiseAnd:with:</code></li>
<li><code>bitwiseOr:with:</code></li>
<li><code>bitwiseXor:with:</code></li>
<li><code>leftshift:by:</code></li>
<li><code>rightshift:by:</code></li>
<li><code>onesComplement:</code></li>
</ul>

<h3>Date Functions</h3>

<ul>
<li><code>now</code></li>
</ul>

<h3>String Functions</h3>

<ul>
<li><code>lowercase:</code></li>
<li><code>uppercase:</code></li>
</ul>

<h3>No-op</h3>

<ul>
<li><code>noindex:</code></li>
</ul>

<h2>Custom Functions</h2>

<p>In addition to these built-in functions, it&#39;s possible to invoke custom functions in an <code>NSExpression</code>. <a href="http://funwithobjc.tumblr.com/post/2922267976/using-custom-functions-with-nsexpression">This article by Dave DeLong</a> describes the process.</p>

<p>First, define the corresponding method in a category:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">NSNumber</span> <span class="nl">(Factorial)</span>
<span class="k">-</span> <span class="p">(</span><span class="n">NSNumber</span> <span class="o">*</span><span class="p">)</span><span class="nf">factorial</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">NSNumber</span> <span class="nl">(Factorial)</span>
<span class="k">-</span> <span class="p">(</span><span class="n">NSNumber</span> <span class="o">*</span><span class="p">)</span><span class="nf">factorial</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">@(</span><span class="n">tgamma</span><span class="p">([</span><span class="n">self</span> <span class="n">doubleValue</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
<span class="p">}</span>
<span class="k">@end</span>
</code></pre></div>
<p>Then, use the function thusly (the <code>FUNCTION()</code> macro in <code>+expressionWithFormat:</code> is shorthand for the process of building out with <code>-expressionForFunction:</code>, et al.):</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSExpression</span> <span class="o">*</span><span class="n">expression</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSExpression</span> <span class="n">expressionWithFormat</span><span class="o">:</span><span class="s">@&quot;FUNCTION(4.2, &#39;factorial&#39;)&quot;</span><span class="p">];</span>
<span class="kt">id</span> <span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">expression</span> <span class="n">expressionValueWithObject</span><span class="o">:</span><span class="nb">nil</span> <span class="n">context</span><span class="o">:</span><span class="nb">nil</span><span class="p">];</span> <span class="c1">// 32.578...</span>
</code></pre></div>
<p>The advantage here, over calling <code>-factorial</code> directly is the ability to invoke the function in an <code>NSPredicate</code> query. For example, a <code>location:withinRadius:</code> method might be defined to easily query managed objects nearby a user&#39;s current location.</p>

<p>As Dave mentions in his article, the use cases are rather marginal, but it&#39;s certainly an interesting trick to have in your repertoire.</p>

<hr>

<p>Next week, we&#39;ll build on what we just learned about <code>NSExpression</code> to further explore <code>NSPredicate</code>, and everything it has hidden up its sleeves. Stay tuned!</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 08 Jul 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:34:"http://nshipster.com/nsexpression/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:34:"http://nshipster.com/nsexpression/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:38;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:83:"NSFastEnumeration /&lt;br/&gt;NSEnumerator /&lt;br/&gt;-enumerateObjectsUsingBlock:";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:16319:"<p>Enumeration is where computation gets interesting. It&#39;s one thing to encode logic that&#39;s executed once, but applying it across a collection—that&#39;s what makes programming so powerful.</p>

<p>Each programming paradigm has its own way to iterate over a collection:</p>

<ul>
<li><strong>Procedural</strong> increments a pointer within a loop</li>
<li><strong>Object Oriented</strong> applies a function or block to each object in a collection</li>
<li><strong>Functional</strong> works through a data structure recursively</li>
</ul>

<p>Objective-C, to echo one of the central themes of this blog, plays a fascinating role as a bridge between the Procedural traditions of C and the Object Oriented model pioneered in Smalltalk. In many ways, enumeration is where the proverbial rubber hits the road.</p>

<p>This article will cover all of the different ways collections are enumerated in Objective-C &amp; Cocoa. How do I love thee? Let me count the ways.</p>

<hr>

<h2>C Loops (<code>for/while</code>)</h2>

<p><code>for</code> and <code>while</code> loops are the &quot;classic&quot; method of iterating over a collection. Anyone who&#39;s taken Computer Science 101 has written code like this before:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">for</span> <span class="p">(</span><span class="n">NSUInteger</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">[</span><span class="n">array</span> <span class="n">count</span><span class="p">];</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">id</span> <span class="n">object</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">object</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>
<p>But as anyone who has used C-style loops knows, this method is prone to <a href="http://en.wikipedia.org/wiki/Off-by-one_error">off-by-one errors</a>—particularly when used in a non-standard way.</p>

<p>Fortunately, Smalltalk significantly improved this state of affairs with an idea called <a href="http://en.wikipedia.org/wiki/List_comprehension">list comprehensions</a>, which are commonly known today as <code>for/in</code> loops.</p>

<h2>List Comprehension (<code>for/in</code>)</h2>

<p>By using a higher level of abstraction, declaring the intention of iterating through all elements of a collection, not only are we less prone to error, but there&#39;s a lot less to type:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">for</span> <span class="p">(</span><span class="kt">id</span> <span class="n">object</span> <span class="k">in</span> <span class="n">array</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">object</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>In Cocoa, comprehensions are available to any class that implements the <code>NSFastEnumeration</code> protocol, including <code>NSArray</code>, <code>NSSet</code>, and <code>NSDictionary</code>.</p>

<h3><code>&lt;NSFastEnumeration&gt;</code></h3>

<p><code>NSFastEnumeration</code> contains a single method:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nf">countByEnumeratingWithState:</span><span class="p">(</span><span class="n">NSFastEnumerationState</span> <span class="o">*</span><span class="p">)</span><span class="nv">state</span>
                                  <span class="nl">objects:</span><span class="p">(</span><span class="kt">id</span> <span class="o">*</span><span class="p">)</span><span class="nv">stackbuf</span>
                                    <span class="nl">count:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">len</span>
</code></pre></div>
<blockquote>
<ul>
<li><code>state</code>: Context information that is used in the enumeration to, in addition to other possibilities, ensure that the collection has not been mutated.</li>
<li><code>stackbuf</code>: A C array of objects over which the sender is to iterate.</li>
<li><code>len</code>: The maximum number of objects to return in stackbuf.</li>
</ul>
</blockquote>

<p>One single, <em>deceptively complicated</em> method. There&#39;s that <code>stackbuf</code> out pointer parameter, and a <code>state</code> parameter of type <code>NSFastEnumerationState *</code>. Let&#39;s take a closer look at that...</p>

<h3><code>NSFastEnumerationState</code></h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
      <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">state</span><span class="p">;</span>
      <span class="kt">id</span> <span class="o">*</span><span class="n">itemsPtr</span><span class="p">;</span>
      <span class="kt">unsigned</span> <span class="kt">long</span> <span class="o">*</span><span class="n">mutationsPtr</span><span class="p">;</span>
      <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">extra</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
<span class="p">}</span> <span class="n">NSFastEnumerationState</span><span class="p">;</span>
</code></pre></div>
<blockquote>
<ul>
<li><code>state</code>: Arbitrary state information used by the iterator. Typically this is set to 0 at the beginning of the iteration.</li>
<li><code>itemsPtr</code>: A C array of objects.</li>
<li><code>mutationsPtr</code>: Arbitrary state information used to detect whether the collection has been mutated.</li>
<li><code>extra</code>: A C array that you can use to hold returned values.</li>
</ul>
</blockquote>

<p>Under every elegant abstraction is an underlying implementation deserving to be hidden from the eyes of God. <code>itemsPtr</code>? <code>mutationsPtr</code>? <code>extra</code>‽ Seriously, what gives?</p>

<blockquote>
<p>For the curious, <a href="http://www.mikeash.com/pyblog/friday-qa-2010-04-16-implementing-fast-enumeration.html">Mike Ash has a fantastic blog post</a> where he dives into the internals, providing several reference implementations of <code>NSFastEnumeration</code>.</p>
</blockquote>

<p>What you should know about <code>NSFastEnumeration</code> is that it is <em>fast</em>. At least as fast if not significantly faster than rolling your own <code>for</code> loop, in fact. The secret behind its speed is how <code>-countByEnumeratingWithState:objects:count:</code> buffers collection members, loading them in as necessary. Unlike a single-threaded <code>for</code> loop implementation, objects can be loaded concurrently, making better use of available system resources.</p>

<p>Apple recommends that you use <code>NSFastEnumeration</code> <code>for/in</code>-style enumeration for your collections wherever possible and appropriate. And to be honest, for how easy it is to use and how well it performs, that&#39;s a pretty easy sell. Seriously, use it.</p>

<h2><code>NSEnumerator</code></h2>

<p>But of course, before <code>NSFastEnumeration</code> (circa OS X 10.5 / iOS 2.0), there was the venerable <code>NSEnumerator</code>.</p>

<p>For the uninitiated, <code>NSEnumerator</code> is an abstract class that implements two methods:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">nextObject</span>
<span class="k">-</span> <span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">allObjects</span>
</code></pre></div>
<p><code>nextObject</code> returns the next object in the collection, or <code>nil</code> if unavailable. <code>allObjects</code> returns all of the remaining objects, if any. <code>NSEnumerator</code>s can only go forward, and only in single increments.</p>

<p>To enumerate through all elements in a collection, one would use <code>NSEnumerator</code> thusly:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="kt">id</span> <span class="n">object</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
<span class="n">NSEnumerator</span> <span class="o">*</span><span class="n">enumerator</span> <span class="o">=</span> <span class="p">...;</span>
<span class="k">while</span> <span class="p">((</span><span class="n">object</span> <span class="o">=</span> <span class="p">[</span><span class="n">enumerator</span> <span class="n">nextObject</span><span class="p">]))</span> <span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">object</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>...or because <code>NSEnumerator</code> itself conforms to <code>&lt;NSFastEnumeration&gt;</code> in an attempt to stay hip to the way kids do things these days:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">for</span> <span class="p">(</span><span class="kt">id</span> <span class="n">object</span> <span class="k">in</span> <span class="n">enumerator</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">object</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>If you&#39;re looking for a convenient way to add fast enumeration to your own non-collection-class-backed objects, <code>NSEnumerator</code> is likely a much more palatable option than getting your hands messy with <code>NSFastEnumeration</code>&#39;s implementation details.</p>

<p>Some quick points of interest about <code>NSEnumeration</code>:</p>

<ul>
<li>Reverse an array in one line of code with (and excuse the excessive dot syntax) <code>array.reverseObjectEnumerator.allObjects</code>.</li>
<li>Add LINQ-style operations with <a href="https://github.com/k06a/NSEnumeratorLinq"><code>NSEnumeratorLinq</code></a>, a third-party library using chained <code>NSEnumerator</code> subclasses.</li>
<li>Shake things up with your collection classes in style with <a href="https://github.com/mattt/TTTRandomizedEnumerator"><code>TTTRandomizedEnumerator</code></a>, another third-party library, which iterates through elements in a random order.</li>
</ul>

<h2>Enumerate With Blocks</h2>

<p>Finally, with the introduction of blocks in OS X 10.6 / iOS 4, came a new block-based way to enumerate collections:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[</span><span class="n">array</span> <span class="n">enumerateObjectsUsingBlock</span><span class="o">:^</span><span class="p">(</span><span class="kt">id</span> <span class="n">object</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">object</span><span class="p">);</span>
<span class="p">}];</span>
</code></pre></div>
<p>Collection classes like <code>NSArray</code>, <code>NSSet</code>, <code>NSDictionary</code>, and <code>NSIndexSet</code> include a similar set of block enumeration methods.</p>

<p>One of the advantages of this approach is that the current object index (<code>idx</code>) is passed along with the object itself. The <code>BOOL</code> pointer allows for early returns, equivalent to a <code>break</code> statement in a regular C loop.</p>

<p>Unless you actually need the numerical index while iterating, it&#39;s almost always faster to use a <code>for/in</code> <code>NSFastEnumeration</code> loop instead.</p>

<p>One last thing to be aware of are the expanded method variants with an <code>options</code> parameter:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">enumerateObjectsWithOptions:</span><span class="p">(</span><span class="n">NSEnumerationOptions</span><span class="p">)</span><span class="nv">opts</span>
                         <span class="nl">usingBlock:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">))</span><span class="nv">block</span>
</code></pre></div>
<h3><code>NSEnumerationOptions</code></h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">enum</span> <span class="p">{</span>
   <span class="n">NSEnumerationConcurrent</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="mi">0</span><span class="p">),</span>
   <span class="n">NSEnumerationReverse</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1UL</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">),</span>
<span class="p">};</span>
<span class="k">typedef</span> <span class="n">NSUInteger</span> <span class="n">NSEnumerationOptions</span><span class="p">;</span>
</code></pre></div>
<blockquote>
<ul>
<li><code>NSEnumerationConcurrent</code>: Specifies that the Block enumeration should be concurrent. The order of invocation is nondeterministic and undefined; this flag is a hint and may be ignored by the implementation under some circumstances; the code of the Block must be safe against concurrent invocation.</li>
<li><code>NSEnumerationReverse</code>: Specifies that the enumeration should be performed in reverse. This option is available for <code>NSArray</code> and <code>NSIndexSet</code> classes; its behavior is undefined for <code>NSDictionary</code> and <code>NSSet</code> classes, or when combined with the <code>NSEnumerationConcurrent</code> flag.</li>
</ul>
</blockquote>

<p>Again, fast enumeration is almost certain to be much faster than block enumeration, but these options may be useful if you&#39;re resigned to using blocks.</p>

<hr>

<p>So there you have all of the conventional forms of enumeration in Objective-C and Cocoa.</p>

<p>What&#39;s especially interesting is that in looking at these approaches, we learn a lesson about the power of abstraction. Higher levels of abstraction are not just easier to write and comprehend, but can often be much faster than doing it the &quot;hard way&quot;.</p>

<p>High-level commands that declare intention, like &quot;iterate through all of the elements of this collection&quot; lend themselves to high-level compiler optimization in a way that just isn&#39;t possible with pointer arithmetic in a loop. Context is a powerful thing, and designing APIs and functionality accordingly ultimately fulfill that great promise of abstraction: to solve larger problems more easily.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 01 Jul 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:33:"http://nshipster.com/enumerators/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:33:"http://nshipster.com/enumerators/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:39;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:100:"NSUUID /&lt;br/&gt;CFUUIDRef /&lt;br/&gt;UIDevice -uniqueIdentifier /&lt;br/&gt;-identifierForVendor";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:10093:"<p>Let&#39;s say you&#39;re making privacy software that also prevents piracy. I mean, it&#39;s an obvious idea—<a href="http://www.fakeblock.com">someone&#39;s going to do it</a>. You&#39;re just trying to be <em>that</em> person.</p>

<p>Until recently, it was trivial to uniquely identify devices between application launches, and even across applications: a simple call to <code>UIDevice -uniqueIdentifier</code>, and you were all set.</p>

<p>However, <code>UIDevice -uniqueIdentifier</code> was deprecated in iOS 5 with the following notes:</p>

<blockquote>
<p>Use the <code>identifierForVendor</code> property of [<code>UIDevice</code>] or the <code>advertisingIdentifier</code> property of the <code>ASIdentifierManager</code> class instead, as appropriate, or use the <code>UUID</code> method of the <code>NSUUID</code> class to create a <code>UUID</code> and write it to the user defaults database.</p>
</blockquote>

<p><a href="https://developer.apple.com/news/?id=3212013a">As of May 1st</a>, Apple began enforcing this deprecation on all new app submissions, even for apps targeting earlier versions of iOS. Any use of <code>uniqueIdentifier</code> is grounds for immediate rejection of new binaries.</p>

<p>Just as privacy and piracy have phonetic and conceptual similarities, device identifiers, whether UUID / GUID, UDID, or otherwise can be rather confusing:</p>

<ul>
<li><strong>UUID <em>(Universally Unique Identifier)</em></strong>: A sequence of 128 bits that can guarantee uniqueness across space and time, defined by <a href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.</li>
<li><strong>GUID <em>(Globally Unique Identifier)</em></strong>: Microsoft&#39;s implementation of the UUID specification; often used interchangeably with UUID.</li>
<li><strong>UDID <em>(Unique Device Identifier)</em></strong>: A sequence of 40 hexadecimal characters that uniquely identify an iOS device (the device&#39;s <a href="https://en.wikipedia.org/wiki/Social_Security_number">Social Security Number</a>, if you will). This value can be <a href="http://whatsmyudid.com">retrieved through iTunes</a>, or found using <code>UIDevice -uniqueIdentifier</code>. Derived from hardware details like <a href="http://en.wikipedia.org/wiki/MAC_address">MAC address</a>.</li>
</ul>

<p>Incidentally, all of the suggested replacements for <code>UIDevice -uniqueIdentifier</code> listed in its deprecation notes return UUID, whether created automatically with <code>UIDevice -identifierForVendor</code> &amp; <code>ASIdentifierManager -advertisingIdentifier</code> or manually with <code>NSUUID</code> (or <code>CFUUIDCreate</code>).</p>

<h2>Vendor Identifier</h2>

<blockquote>
<p>The value of this property is the same for apps that come from the same vendor running on the same device. A different value is returned for apps on the same device that come from different vendors, and for apps on different devices regardless of vendor.</p>

<p>The value in this property remains the same while the app (or another app from the same vendor) is installed on the iOS device. The value changes when the user deletes all of that vendor’s apps from the device and subsequently reinstalls one or more of them. Therefore, if your app stores the value of this property anywhere, you should gracefully handle situations where the identifier changes.</p>
</blockquote>

<p>In many ways, this is what should have been used the whole time. App developers now have a way to identify devices uniquely—even across other apps by the same developer—without being entrusted with something as sensitive as the device&#39;s UDID.</p>

<p>For most applications, doing a find-and-replace of <code>uniqueIdentifier</code> to <code>identifierForVendor</code> is enough.</p>

<p>However, for advertising networks, which require a consistent identifier across applications from many developers, a different approach is required:</p>

<h2>Advertising Identifier</h2>

<blockquote>
<p>iOS 6 introduces the Advertising Identifier, a non-permanent, non-personal, device identifier, that advertising networks will use to give you more control over advertisers’ ability to use tracking methods. If you choose to limit ad tracking, advertising networks using the Advertising Identifier may no longer gather information to serve you targeted ads. In the future all advertising networks will be required to use the Advertising Identifier. However, until advertising networks transition to using the Advertising Identifier you may still receive targeted ads from other networks.</p>
</blockquote>

<p>As the sole component of the <a href="http://developer.apple.com/library/ios/#documentation/DeviceInformation/Reference/AdSupport_Framework/_index.html#//apple_ref/doc/uid/TP40012658">Ad Support framework</a>, <code>ASIdentifierManager</code>&#39;s modus operandi is clear: provide a way for ad networks to track users between different applications in a way that doesn&#39;t compromise privacy.</p>

<p>Users can opt out of ad targeting in a Settings screen added in iOS 6.1, found at <strong>Settings &gt; General &gt; About &gt; Advertising</strong>:</p>

<p><img src="http://nshipster.s3.amazonaws.com/ad-support-limit-ad-tracking.png" alt="Limit Ad Tracking"></p>

<h2>NSUUID &amp; CFUUIDRef</h2>

<p><code>NSUUID</code> was added to Foundation in iOS 6 as a way to easily create UUIDs. How easy?</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">UUID</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSUUID</span> <span class="n">UUID</span><span class="p">]</span> <span class="n">UUIDString</span><span class="p">];</span>
</code></pre></div>
<p>If your app targets iOS 5 or earlier, however, you have to settle for Core Foundation functions on <code>CFUUIDRef</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">CFUUIDRef</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">CFUUIDCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
<span class="n">NSString</span> <span class="o">*</span><span class="n">UUID</span> <span class="o">=</span> <span class="n">CFUUIDCreateString</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">uuid</span><span class="p">);</span>
</code></pre></div>
<p>For apps building against a base SDK without the vendor or advertising identifier APIs, a similar effect can be achieved—as recommended in the deprecation notes—by using <a href="http://developer.apple.com/library/ios/#documentation/cocoa/reference/foundation/Classes/NSUserDefaults_Class/Reference/Reference.html"><code>NSUserDefaults</code></a>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span>
<span class="nl">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
<span class="p">{</span>
    <span class="n">NSString</span> <span class="o">*</span><span class="n">UUID</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="n">objectForKey</span><span class="o">:</span><span class="n">kApplicationUUIDKey</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">UUID</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">CFUUIDRef</span> <span class="n">uuid</span> <span class="o">=</span> <span class="n">CFUUIDCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
        <span class="n">UUID</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge_transfer</span> <span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">CFUUIDCreateString</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">uuid</span><span class="p">);</span>
        <span class="n">CFRelease</span><span class="p">(</span><span class="n">uuid</span><span class="p">);</span>

        <span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="n">setObject</span><span class="o">:</span><span class="n">UUID</span> <span class="n">forKey</span><span class="o">:</span><span class="n">kApplicationUUIDKey</span><span class="p">];</span>
        <span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="n">synchronize</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<p>This way, a UUID will be generated once when the app is launched for the first time, and then stored in <code>NSUserDefaults</code> to be retrieved on each subsequent app launch. Unlike advertising or vendor identifiers, these identifiers would not be shared across other apps, but for most intents and purposes, this is works just fine.</p>

<hr>

<p>Of course, UUIDs have many other uses: primary identifiers for records in distributed systems, names for temporary files, or even a bulk color generator (chunk the hexadecimal representation into 5 groups of 6!). But on iOS, it&#39;s all about tracking, about finding what was lost in a sea of network traffic and possibilities. Knowing where you stand on uniqueness is the first step to understanding all of this.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 24 Jun 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:49:"http://nshipster.com/uuid-udid-unique-identifier/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:49:"http://nshipster.com/uuid-udid-unique-identifier/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:40;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:19:"Object Subscripting";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:9475:"<p>Xcode 4.4 quietly introduced a syntactic revolution to Objective-C. Like all revolutions, however, its origins and agitators require some effort to trace: Xcode 4.4 shipped with Apple LLVM Compiler 4.0, which incorporated changes effective in the Clang front-end as of version 3.1.</p>

<blockquote>
<p>For the uninitiated, <a href="http://clang.llvm.org/index.html">Clang</a> is the open source C language family front end to the <a href="http://www.llvm.org">LLVM</a> compiler. Clang is responsible for all of the killer language features in Objective-C going back a few years, such as &quot;Build &amp; Analyze&quot;, ARC, blocks, and a nearly 3× performance boost when compiling over GCC.</p>
</blockquote>

<p>Clang 3.1 added three features to Objective-C whose aesthetic &amp; cosmetic impact is comparable to the changes brought about in Objective-C 2.0: <strong><code>NSNumber</code> Literals</strong>, <strong>Collection Literals</strong>, and <strong>Object Subscripting</strong>.</p>

<p>In a single Xcode release, Objective-C went from this:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">dictionary</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="n">dictionaryWithObject</span><span class="o">:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="n">numberWithInteger</span><span class="o">:</span><span class="mi">42</span><span class="p">]</span> <span class="n">forKey</span><span class="o">:</span><span class="s">@&quot;foo&quot;</span><span class="p">];</span>
<span class="kt">id</span> <span class="n">value</span> <span class="o">=</span> <span class="p">[</span><span class="n">dictionary</span> <span class="n">objectForKey</span><span class="o">:</span><span class="s">@&quot;foo&quot;</span><span class="p">];</span>
</code></pre></div>
<p>...to this:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">dictionary</span> <span class="o">=</span> <span class="p">@{</span><span class="s">@&quot;foo&quot;</span><span class="o">:</span> <span class="mi">@42</span><span class="p">};</span>
<span class="kt">id</span> <span class="n">value</span> <span class="o">=</span> <span class="n">dictionary</span><span class="p">[</span><span class="s">@&quot;foo&quot;</span><span class="p">];</span>
</code></pre></div>
<p>Concision is the essence of clarity.</p>

<p>Shorter code means typing less, but it also means understanding more. Even a sprinkle of syntactic sugar can be enough to transform a language, and unlock new design patterns.</p>

<p>Collection literals become preferable to property lists for configuration.<br/>
Single-element array parameters become more acceptable.<br/>
APIs requiring boxed numeric values become more palatable.<br/></p>

<p>However, what remains relatively under-utilized even now—a year after the these language features were added—is object subscripting. Perhaps after reading the rest of this article, though, you&#39;ll help to change this.</p>

<hr>

<p>Elements in a C array are laid out contiguously in memory, and is referenced by the address of its first element. To get the value at a particular index, one would offset this address by the size of an array element, multiplied by the desired index. This pointer arithmetic is provided by the <code>[]</code> operator.</p>

<p>Over time, scripting languages began to take greater liberties with this familiar convention, expanding its role to get &amp; set values in arrays, as well as hashes and objects.</p>

<p>With Clang 3.1, everything has come full-circle: what began as a C operator and co-opted by scripting languages, has now been rolled back into Objective-C. And like the aforementioned scripting languages of yore, the <code>[]</code> subscripting operator in Objective-C has been similarly overloaded to handle both integer-indexed and object-keyed accessors.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">dictionary</span><span class="p">[</span><span class="s">@&quot;foo&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="mi">@42</span><span class="p">;</span>
<span class="n">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">@&quot;bar&quot;</span>
</code></pre></div>
<blockquote>
<p>If Objective-C is a superset of C, how can Object Subscripting overload the <code>[]</code> C operator? The modern Objective-C runtime prohibits pointer arithmetic on objects, making this semantic pivot possible.</p>
</blockquote>

<p>Where this really becomes interesting is when you extend your own classes with subscripting support:</p>

<h3>Custom Indexed Subscripting</h3>

<p>To add custom-indexed subscripting support to your class, simply declare and implement the following methods:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">objectAtIndexedSubscript:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">idx</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj</span> <span class="nf">atIndexedSubscript:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">idx</span><span class="p">;</span>
</code></pre></div>
<h3>Custom Keyed Subscripting</h3>

<p>Similarly, custom-keyed subscripting can be added to your class by declaring and implementing these methods:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">objectForKeyedSubscript:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">NSCopying</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">key</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setObject:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj</span> <span class="nf">forKeyedSubscript:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">NSCopying</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">key</span><span class="p">;</span>
</code></pre></div>
<h2>Custom Subscripting as DSL</h2>

<p>The whole point in describing all of this is to encourage unconventional thinking about this whole language feature. At the moment, a majority of custom subscripting in classes is used as a convenience accessor to a private collection class. But there&#39;s nothing to stop you from, for instance, doing this:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">routes</span><span class="p">[</span><span class="s">@&quot;GET /users/:id&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="o">^</span><span class="p">(</span><span class="n">NSNumber</span> <span class="o">*</span><span class="n">userID</span><span class="p">){</span>
  <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div>
<p>...or this:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="kt">id</span> <span class="n">piece</span> <span class="o">=</span> <span class="n">chessBoard</span><span class="p">[</span><span class="s">@&quot;E1&quot;</span><span class="p">];</span>
</code></pre></div>
<p>...or this:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSArray</span> <span class="o">*</span><span class="n">results</span> <span class="o">=</span> <span class="n">managedObjectContext</span><span class="p">[</span><span class="s">@&quot;Product WHERE stock &gt; 20&quot;</span><span class="p">];</span>
</code></pre></div>
<p>Because of how flexible and concise subscripting is, it is extremely well-purposed for creating <a href="http://en.wikipedia.org/wiki/Domain-specific_language">DSL</a>s. When defining custom subscripting methods on your own class, there are no restrictions on how they are implemented. You can use this syntax to provide a shorthand for defining application routes, search queries, compound property accessors, or plain-old KVO.</p>

<hr>

<p>This is, of course, dangerous thinking. Subscripting isn&#39;t your new bicycle. It isn&#39;t a giant hammer. Hell, <em>it isn&#39;t even a giant screwdriver!</em> If there is one thing Object Subscripting DSLs are, it&#39;s trouble. Here be dragons.</p>

<p>That said, it does open up some interesting opportunities to bend syntactic conventions to useful ends.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 17 Jun 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:41:"http://nshipster.com/object-subscripting/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:41:"http://nshipster.com/object-subscripting/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:41;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:17:"NSHipster Quiz #2";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:9416:"<p>On June 11th, we organized an NSHipster Pub Quiz for WWDC attendees. Like <a href="http://nshipster.com/nshipster-quiz-1/">our first quiz</a>, questions ranged from random Apple trivia to obscure framework questions. The event was hosted by <a href="http://newrelic.com">New Relic</a>, and sponsored by <a href="https://heroku.com">Heroku</a> &amp; <a href="http://www.mutualmobile.com">Mutual Mobile</a>. About 100 developers attended the event, with the team &quot;UIResponders&quot; taking top prize.</p>

<p>For everyone that couldn&#39;t make it to the event, here&#39;s an opportunity to play along at home. Here are some ground rules:</p>

<ul>
<li>There are 4 Rounds, with 10 questions each</li>
<li>Record answers on a separate sheet of paper</li>
<li>Each correct answer to a question gets you 1 point (unless otherwise specified)</li>
<li>Play with up to 5 friends for maximum enjoyment</li>
<li>Don&#39;t be lame and look things up on the Internet or in Xcode</li>
</ul>

<hr>

<h2>Round 1: General Knowledge</h2>

<ol>
<li>Mac OS 10.9 Mavericks is named after a surf spot in Northern California. What was the surf spot named after?</li>
<li>What is the Objective-C Type Encoding of <code>NSError **</code>?</li>
<li>What is the name of the command line utility that generates a <code>.strings</code> file from Objective-C source code with <code>NSLocalizedString</code>?</li>
<li>What <code>NSArray</code> method was available since 10.6, but only made public as of 10.9?</li>
<li>What is the name of the open source project whose C/C++ libraries power <code>NSRegularExpression</code>, <code>CFStringTransform</code>, and other Unicode features in Cocoa?</li>
<li>On May 19, 2001 Apple opened its first 2 retail stores. Where were they? (1 point for each exact location, or ½‎ for each state)</li>
<li>What is the name of the private Apple TV framework responsible for appliance UI?</li>
<li>Which Apple VP said &quot;Can&#39;t innovate anymore,  my ass!&quot;?</li>
<li>List all of the rooms in Moscone West named after San Francisco neighborhoods, starting at Level 2 (1 point for each room)</li>
<li>Complete the following verse:</li>
</ol>

<blockquote>
<p>We&#39;ve come too far
To give up who we are</p>

<hr>

<hr>

<p>She&#39;s up all night to the sun...</p>
</blockquote>

<h2>Round 2: Before &amp; After</h2>

<p>What are the following better known as today?</p>

<ol>
<li>Yellow Box</li>
<li>AppleSearch</li>
<li>Jaguar (i.e. &quot;Mac OS X 10.__&quot;?)</li>
<li>Rendezvous</li>
<li>SoundJam</li>
<li>Six Pack</li>
<li>Universal Access</li>
<li>Graphics Group (semi-related to Apple)</li>
<li>20525 Mariani Ave.</li>
<li>Yerba Buena (has to do with California, not Apple)</li>
</ol>

<h2>Round 3: Picture Round</h2>

<ul>
<li>1. Which WWDC keynote was this from?</li>
</ul>

<p><img src="http://nshipster-quiz-2.s3.amazonaws.com/question-1.jpg" alt="Question 1"></p>

<ul>
<li>2. Which WWDC keynote was this from?</li>
</ul>

<p><img src="http://nshipster-quiz-2.s3.amazonaws.com/question-2.jpg" alt="Question 2"></p>

<ul>
<li>3. Which WWDC keynote was this from?</li>
</ul>

<p><img src="http://nshipster-quiz-2.s3.amazonaws.com/question-3.jpg" alt="Question 3"></p>

<ul>
<li>4. Which WWDC keynote was this from?</li>
</ul>

<p><img src="http://nshipster-quiz-2.s3.amazonaws.com/question-4.jpg" alt="Question 4"></p>

<ul>
<li>5. WTF is this?</li>
</ul>

<p><img src="http://nshipster-quiz-2.s3.amazonaws.com/question-5.jpg" alt="Question 5"></p>

<ul>
<li>6. What is this?</li>
</ul>

<p><img src="http://nshipster-quiz-2.s3.amazonaws.com/question-6.jpg" alt="Question 6"></p>

<ul>
<li>7. What is this?</li>
</ul>

<p><img src="http://nshipster-quiz-2.s3.amazonaws.com/question-7.jpg" alt="Question 7"></p>

<ul>
<li>8. What is this? (and which generation?)</li>
</ul>

<p><img src="http://nshipster-quiz-2.s3.amazonaws.com/question-8.jpg" alt="Question 8"></p>

<ul>
<li>9. Which &quot;Core&quot; framework is represented by this logo?</li>
</ul>

<p><img src="http://nshipster-quiz-2.s3.amazonaws.com/question-9.jpg" alt="Question 9"></p>

<ul>
<li>10. Everybody loves Craig <em>/fɛdɹ̩igi/</em> (Pictured). How do you spell his last name?</li>
</ul>

<p><img src="http://nshipster-quiz-2.s3.amazonaws.com/question-10.jpg" alt="Question 10"></p>

<h2>Round 4: Name That Framework!</h2>

<p>For each question, a list of three classes from the same framework have been listed without their two-letter namespace prefix. Name the framework that they all belong to!</p>

<ol>
<li>Call, CallCenter, Carrier</li>
<li>Attitude, LogItem, Magnetometer Data</li>
<li>IdentifierManager</li>
<li>Request, ComposeViewController, ServiceTypes.h</li>
<li>Metadata, FileWrapper, FileManager</li>
<li>Alarm, RecurrenceEnd, Source</li>
<li>NotificationBanner, Player, SessionError</li>
<li>Null, Zone, Coder</li>
<li>Attribute Description, Relationship Description, Property Mapping</li>
<li>Map Table, Hash Table, Pointer Array</li>
</ol>

<hr>

<h1>Answers</h1>

<h2>Round 1: General Knowledge</h2>

<ol>
<li><a href="http://en.wikipedia.org/wiki/Mavericks_(location">A white-haired German Shepherd named Maverick</a>#History) (anything about a dog gets the point)</li>
<li><a href="http://nshipster.com/type-encodings/"><code>^@</code></a></li>
<li><a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/genstrings.1.html"><code>genstrings</code></a></li>
<li><code>NSArray -firstObject</code></li>
<li><a href="http://site.icu-project.org">ICU (International Components for Unicode)</a></li>
<li><a href="http://en.wikipedia.org/wiki/Apple_Store#History"> Tysons Corner, Virginia &amp; Glendale, California</a></li>
<li><a href="http://nshipster.com/backrow/">BackRow</a></li>
<li><a href="http://www.theverge.com/2013/6/13/4423844/cant-innovate-anymore-my-ass-apple">Phil Schiller</a></li>
<li>Pacific Heights, Mission, Nob Hill, Russian Hill, Marina, Presidio</li>
<li><a href="http://rock.rapgenius.com/Daft-punk-get-lucky-lyrics">&quot;So let&#39;s raise the bar / And our cups to the stars&quot;</a></li>
</ol>

<h2>Round 2: Before &amp; After</h2>

<ol>
<li><a href="http://en.wikipedia.org/wiki/Cocoa_%28API%29">Cocoa</a></li>
<li><a href="http://en.wikipedia.org/wiki/Sherlock_%28Software%29">Sherlock</a></li>
<li><a href="http://en.wikipedia.org/wiki/Mac_OS_X_v10.2">Mac OS X 10.2</a></li>
<li><a href="http://en.wikipedia.org/wiki/Bonjour_%28Software%29">Bonjour</a></li>
<li><a href="http://en.wikipedia.org/wiki/Itunes#History">iTunes</a></li>
<li><a href="http://en.wikipedia.org/wiki/System_6">System 6 / Mac OS 6</a></li>
<li><a href="http://www.apple.com/accessibility/">Accessibility</a></li>
<li><a href="https://en.wikipedia.org/wiki/Pixar">Pixar</a></li>
<li><a href="https://en.wikipedia.org/wiki/1_infinite_loop">1 Infinite Loop</a></li>
<li><a href="http://www.sfmuseum.org/hist/name.html">San Francisco</a></li>
</ol>

<h2>Round 3: Picture Round</h2>

<ol>
<li>2011</li>
<li>2009</li>
<li>2012</li>
<li>2008</li>
<li><a href="http://en.wikipedia.org/wiki/EMate_300">eMate 300</a></li>
<li><a href="http://en.wikipedia.org/wiki/Xserve_RAID">Xserve RAID</a></li>
<li><a href="http://en.wikipedia.org/wiki/ISight">iSight</a></li>
<li><a href="http://en.wikipedia.org/wiki/Ipod_shuffle#Third_generation">3rd gen. iPod Shuffle</a></li>
<li><a href="http://en.wikipedia.org/wiki/Core_Audio">Core Audio</a></li>
<li><a href="http://en.wikipedia.org/wiki/Craig_Federighi">&quot;Federighi&quot;</a></li>
</ol>

<h2>Round 4: Name That Framework!</h2>

<ol>
<li><a href="http://developer.apple.com/library/ios/#documentation/NetworkingInternet/Reference/CoreTelephonyFrameworkReference/_index.html">Core Telephony</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/CoreMotion/Reference/CoreMotion_Reference/_index.html">Core Motion</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/DeviceInformation/Reference/AdSupport_Framework/_index.html">Ad Support</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/Social/Reference/Social_Framework/_index.html%23//apple_ref/doc/uid/TP40012233">Social</a></li>
<li><a href="https://developer.apple.com/library/mac/#documentation/cocoa/reference/foundation/ObjC_classic/_index.html">Foundation</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/EventKit/Reference/EventKitFrameworkRef/_index.html">EventKit</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/GameKit/Reference/GameKit_Collection/_index.html">Game Kit</a></li>
<li><a href="https://developer.apple.com/library/mac/#documentation/cocoa/reference/foundation/ObjC_classic/_index.html">Foundation</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/CoreData_ObjC/_index.html">Core Data</a></li>
<li><a href="https://developer.apple.com/library/mac/#documentation/cocoa/reference/foundation/ObjC_classic/_index.html">Foundation</a> or <a href="https://developer.apple.com/library/mac/#documentation/CoreFoundation/Reference/CoreFoundation_Collection/_index.html">Core Foundation</a> (2 points if you got both)</li>
</ol>

<hr>

<p>So how did you fare? Tweet out your score to see how you stack up to your peers!</p>

<p>We&#39;ll be announcing another pub quiz soon, so be sure to <a href="http://eepurl.com/ys5K1">sign up here</a> to be the first to know about it!</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Wed, 12 Jun 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/nshipster-quiz-2/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/nshipster-quiz-2/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:42;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:14:"NSDataDetector";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:10649:"<p>Machines speak in binary, while humans speak in riddles, half-truths, and omissions.</p>

<p>And until humanity embraces <a href="http://en.wikipedia.org/wiki/Resource_Description_Framework">RDF</a> for all of their daily interactions, a large chunk of artificial intelligence is going to go into figuring out what the heck we&#39;re all talking about.</p>

<p>Because in the basic interactions of our daily lives—meeting people, making plans, finding information online—there is immense value in automatically converting from implicit human language to explicit structured data, so that it can be easily added to our calendars, address books, maps, and reminders.</p>

<p>Fortunately for Cocoa developers, there&#39;s an easy solution: <code>NSDataDetector</code>.</p>

<hr>

<p><code>NSDataDetector</code> is a subclass of <a href="https://developer.apple.com/library/mac/#documentation/Foundation/Reference/NSRegularExpression_Class/Reference/Reference.html"><code>NSRegularExpression</code></a>, but instead of matching on an ICU pattern, it detects semi-structured information: dates, addresses, links, phone numbers and transit information.</p>

<p>It does all of this with frightening accuracy. <code>NSDataDetector</code> will match flight numbers, address snippets, oddly formatted digits, and even relative deictic expressions like &quot;next Saturday at 5&quot;.</p>

<p>You can think of it as a regexp matcher with incredibly complicated expressions that can extract information from natural language (though its actual implementation details may be somewhat more complicated than that).</p>

<p><code>NSDataDetector</code> objects are initialized with a bitmask of types of information to check, and then passed strings to match on. Like <code>NSRegularExpression</code>, each match found in a string is represented by a <code>NSTextCheckingResult</code>, which has details like character range and match type. However, <code>NSDataDetector</code>-specific types may also contain metadata such as address or date components.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
<span class="n">NSDataDetector</span> <span class="o">*</span><span class="n">detector</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDataDetector</span> <span class="n">dataDetectorWithTypes</span><span class="o">:</span><span class="n">NSTextCheckingTypeAddress</span>
                                                        <span class="o">|</span> <span class="n">NSTextCheckingTypePhoneNumber</span>
                                                           <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>

<span class="n">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="s">@&quot;123 Main St. / (555) 555-5555&quot;</span><span class="p">;</span>
<span class="p">[</span><span class="n">detector</span> <span class="n">enumerateMatchesInString</span><span class="o">:</span><span class="n">string</span>
                           <span class="nl">options:</span><span class="n">kNilOptions</span>
                             <span class="nl">range:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">string</span> <span class="n">length</span><span class="p">])</span>
                        <span class="nl">usingBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSTextCheckingResult</span> <span class="o">*</span><span class="n">result</span><span class="p">,</span> <span class="n">NSMatchingFlags</span> <span class="n">flags</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Match: %@&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
<span class="p">}];</span>
</code></pre></div>
<blockquote>
<p>When initializing <code>NSDataDetector</code>, be sure to specify only the types you&#39;re interested in. With each additional type to be checked comes a nontrivial performance cost.</p>
</blockquote>

<h2>Data Detector Match Types</h2>

<p>Because of how much <code>NSTextCheckingResult</code> is used for, it&#39;s not immediately clear which properties are specific to <code>NSDataDetector</code>. For your reference, here is a table of the different <code>NSTextCheckingTypes</code> for <code>NSDataDetector</code> matches, and their associated properties:</p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Properties</th>
    </tr>
  </thead>
  <tbody>

    <tr>
      <td><tt>NSTextCheckingTypeDate</tt></td>
      <td>
        <ul>
          <li><tt>date</tt></li>
          <li><tt>duration</tt></li>
          <li><tt>timeZone</tt></li>
        </ul>
      </td>
    </tr>
    <tr>
      <td><tt>NSTextCheckingTypeAddress</tt></td>
      <td>
        <ul>
          <li><tt>addressComponents</tt><sup>*</sup></li>
          <ul>
            <li><tt>NSTextCheckingNameKey</tt></li>
            <li><tt>NSTextCheckingJobTitleKey</tt></li>
            <li><tt>NSTextCheckingOrganizationKey</tt></li>
            <li><tt>NSTextCheckingStreetKey</tt></li>
            <li><tt>NSTextCheckingCityKey</tt></li>
            <li><tt>NSTextCheckingStateKey</tt></li>
            <li><tt>NSTextCheckingZIPKey</tt></li>
            <li><tt>NSTextCheckingCountryKey</tt></li>
            <li><tt>NSTextCheckingPhoneKey</tt></li>
          </ul>
        </ul>
      </td>
    </tr>
    <tr>
      <td><tt>NSTextCheckingTypeLink</tt></td>
      <td>
        <ul>
          <li><tt>url</tt></li>
        </ul>
      </td>
    </tr>
    <tr>
      <td><tt>NSTextCheckingTypePhoneNumber</tt></td>
      <td>
        <ul>
          <li><tt>phoneNumber</tt></li>
        </ul>
      </td>
    </tr>
    <tr>
      <td><tt>NSTextCheckingTypeTransitInformation</tt></td>
      <td>
        <ul>
          <li><tt>components</tt><sup>*</sup></li>
          <ul>
            <li><tt>NSTextCheckingAirlineKey</tt></li>
            <li><tt>NSTextCheckingFlightKey</tt></li>
          </ul>
        </ul>
      </td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td colspan="2"><sup>*</sup> <tt>NSDictionary</tt> properties have values at defined keys.
  </tfoot>
</table>

<h2>Data Detection on iOS</h2>

<p>Somewhat confusingly, iOS also defines <code>UIDataDetectorTypes</code>. A bitmask of these values can be set as the <code>dataDetectorTypes</code> of a <code>UITextView</code> to have detected data automatically linked in the displayed text.</p>

<p><code>UIDataDetectorTypes</code> is distinct from <code>NSTextCheckingTypes</code> in that equivalent enum constants (e.g. <code>UIDataDetectorTypePhoneNumber</code> and <code>NSTextCheckingTypePhoneNumber</code>) do not have the same integer value, and not all values in one are found in the other. Converting from <code>UIDataDetectorTypes</code> to <code>NSTextCheckingTypes</code> can be accomplished with a function:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">static</span> <span class="kr">inline</span> <span class="n">NSTextCheckingType</span> <span class="nf">NSTextCheckingTypesFromUIDataDetectorTypes</span><span class="p">(</span><span class="n">UIDataDetectorTypes</span> <span class="n">dataDetectorType</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">NSTextCheckingType</span> <span class="n">textCheckingType</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">dataDetectorType</span> <span class="o">&amp;</span> <span class="n">UIDataDetectorTypeAddress</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">textCheckingType</span> <span class="o">|=</span> <span class="n">NSTextCheckingTypeAddress</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">dataDetectorType</span> <span class="o">&amp;</span> <span class="n">UIDataDetectorTypeCalendarEvent</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">textCheckingType</span> <span class="o">|=</span> <span class="n">NSTextCheckingTypeDate</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">dataDetectorType</span> <span class="o">&amp;</span> <span class="n">UIDataDetectorTypeLink</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">textCheckingType</span> <span class="o">|=</span> <span class="n">NSTextCheckingTypeLink</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">dataDetectorType</span> <span class="o">&amp;</span> <span class="n">UIDataDetectorTypePhoneNumber</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">textCheckingType</span> <span class="o">|=</span> <span class="n">NSTextCheckingTypePhoneNumber</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">textCheckingType</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>If you&#39;re looking for an easy way to use <code>NSDataDetector</code> in your iOS app, you may want to check out <a href="https://github.com/mattt/TTTAttributedLabel/">TTTAttributedLabel</a>, a drop-in replacement for <code>UILabel</code> that supports attributed strings, and (as of 1.7.0) automatic data detection of <code>NSTextCheckingTypes</code>.</p>

<hr>

<p>Do I detect some disbelief of how easy it is to translate between natural language and structured data? This should not be surprising, given how <a href="http://nshipster.com/cfstringtransform/">insanely</a> <a href="http://nshipster.com/nslinguistictagger/">great</a> Cocoa&#39;s linguistic APIs are.</p>

<p>Don&#39;t make your users re-enter information by hand just because of a programming oversight. Take advantage of <code>NSDataDetector</code> in your app to unlock the structured information already hiding in plain sight.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Sun, 02 Jun 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:36:"http://nshipster.com/nsdatadetector/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"http://nshipster.com/nsdatadetector/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:43;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:12:"Unit Testing";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:12848:"<p>Unit Testing is an emotional topic for developers. It inspires a sense of superiority to its most zealous adherents, and evokes a feeling of inadequacy to non-practitioners. <a href="http://ntoll.org/article/tdd-cargo-cult">Cargo Cults like TDD</a> stake their reputation on unit testing to the point of co-opting and conflating utility with morality.</p>

<p>It&#39;s as close to a religious matter as programmers get, aside from the tabs-versus-spaces debate.</p>

<p>Objective-C developers have, for the most part, remained relatively apathetic to Unit Testing (<em>&quot;There&#39;s that SenTest thing, but who uses that, really?&quot;</em>). Between static typing, typically manageable project sizes, and a compiler advanced enough to <a href="http://clang.llvm.org/doxygen/Rewriter_8h_source.html">rewrite code for you</a>, unit testing isn&#39;t as much of a necessity as it is for more dynamic languages like Ruby (at least in practice).</p>

<p>But that&#39;s not to say that Objective-C developers wouldn&#39;t benefit from unit testing. In fact, as Objective-C continues to become more collaborative, with growing participation in the open source community, automated testing will become a necessity.</p>

<p>This week NSHipster will explore the world of unit testing frameworks, and how to set up an automated build system with Travis CI.</p>

<hr>

<p><a href="https://en.wikipedia.org/wiki/Unit_testing">Unit Testing</a> is a tool, just like any other tool. Its purpose is to make us better at our jobs, which is to produce robust, maintainable software.</p>

<p>It&#39;s a simple enough premise: write code to construct environments that exercise the particular behavior of a given method, function, class, or feature. Variables are isolated in a scientific manner, so as to test assumptions with logical atomicity.</p>

<h2>OCUnit</h2>

<p><a href="http://www.sente.ch/software/ocunit/">OCUnit</a>, a.k.a. SenTestingKit, was integrated into Xcode 2.1 circa WWDC 2005, <a href="http://www.friday.com/bbum/2005/09/24/unit-testing">as a result of its use in the development of Core Data 1.0</a>. Developed by <a href="http://www.sente.ch">Sen:te</a>, OCUnit is actually one of the first unit testing libraries written for any language.</p>

<p>Unit Tests were added into a separate testing target in the Xcode Project. Each test file defines an <code>SenTestCase</code> subclass, which implements a series of methods beginning with the word <code>test</code>. C <code>assert</code>-style macros are used to fail tests if the specified condition is not met. Each test is run in sequence, independently of one another, with the results logged afterwards:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#import &lt;SenTestingKit/SenTestingKit.h&gt;</span>
<span class="cp">#import &quot;Person.h&quot;</span>

<span class="k">@interface</span> <span class="nc">TestPerson</span> : <span class="nc">SenTestCase</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">TestPerson</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testFullName</span> <span class="p">{</span>
   <span class="n">Person</span> <span class="o">*</span><span class="n">person</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
   <span class="n">person</span><span class="p">.</span><span class="n">firstName</span> <span class="o">=</span> <span class="s">@&quot;Pablo&quot;</span><span class="p">;</span>
   <span class="n">person</span><span class="p">.</span><span class="n">lastName</span> <span class="o">=</span> <span class="s">@&quot;Picasso&quot;</span><span class="p">;</span>
   <span class="n">STAssertEqualObjects</span><span class="p">([</span><span class="n">person</span> <span class="n">fullName</span><span class="p">],</span> <span class="s">@&quot;Pablo Picasso&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>The SenTestingKit assertions are about what you&#39;d expect, offering bread-and-butter equality, existence, and truth checks:</p>

<ul>
<li><code>STAssertNil()</code></li>
<li><code>STAssertNotNil()</code></li>
<li><code>STAssertTrue()</code></li>
<li><code>STAssertFalse()</code></li>
<li><code>STAssertEqualObjects()</code></li>
<li><code>STAssertEquals()</code></li>
<li><code>STAssertEqualsWithAccuracy()</code></li>
<li><code>STAssertThrows()</code></li>
<li><code>STAssertThrowsSpecific()</code></li>
<li><code>STAssertThrowsSpecificNamed()</code></li>
<li><code>STAssertNoThrow()</code></li>
<li><code>STAssertNoThrowSpecific()</code></li>
<li><code>STAssertNoThrowSpecificNamed()</code></li>
<li><code>STAssertTrueNoThrow()</code></li>
<li><code>STAssertFalseNoThrow()</code></li>
<li><code>STFail()</code></li>
</ul>

<p>And yet, as useful as tests are, they necessarily introduce friction into a development cycle. When project pressures begin to weigh, tests are the first thing to be thrown overboard. At some point, the tests stop passing (&quot;we can worry about that later—now we have to ship!&quot;)</p>

<p>The only chance testing has to remain relevant in high-pressure situations is to reduce that friction in development. Essentially, tests need to become both <em>easier to write</em> and <em>easier to run</em>.</p>

<h2>Open Source Libraries</h2>

<p>There are a myriad of open source libraries that attempt to make testing more palatable by way of syntactic sugar and features like <a href="https://en.wikipedia.org/wiki/Method_stub">method stubs</a>, <a href="https://en.wikipedia.org/wiki/Mock_object">mock objects</a>, and <a href="http://en.wikipedia.org/wiki/Futures_and_promises">promises</a>.</p>

<p>Here&#39;s a list of some of the most useful open source libraries for unit testing:</p>

<table>
  <thead>
    <th colspan="3">Mock Objects</th>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://github.com/erikdoe/ocmock">OCMock</a></td>
      <td><a href="https://github.com/erikdoe">Erik Doernenburg</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=erikdoe&repo=ocmock&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
    <tr>
      <td><a href="https://github.com/jonreid/OCMockito">OCMockito</a></td>
      <td><a href="https://github.com/jonreid">Jon Reid</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=jonreid&repo=OCMockito&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
  </tbody>

  <thead>
    <th colspan="3">Matchers</th>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://github.com/specta/expecta">Expecta</a></td>
      <td><a href="https://github.com/petejkim">Peter Jihoon Kim</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=specta&repo=expecta&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
    <tr>
      <td><a href="https://github.com/hamcrest/OCHamcrest">OCHamcrest</a></td>
      <td><a href="https://github.com/jonreid">Jon Reid</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=hamcrest&repo=OCHamcrest&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
  </tbody>

  <thead>
    <th colspan="3">BDD / TDD</th>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://github.com/specta/specta">Specta</a></td>
      <td><a href="https://github.com/petejkim">Peter Jihoon Kim</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=specta&repo=specta&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
    <tr>
      <td><a href="https://github.com/allending/Kiwi">Kiwi</a></td>
      <td><a href="https://github.com/allending">Allen Ding</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=allending&repo=Kiwi&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
    <tr>
      <td><a href="https://github.com/pivotal/cedar">Cedar</a></td>
      <td><a href="https://github.com/pivotal">Pivotal Labs</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=pivotal&repo=cedar&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
  </tbody>

  <thead>
    <th colspan="3">Frameworks</th>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://github.com/gabriel/gh-unit/">GHUnit</a></td>
      <td><a href="https://github.com/gabriel">Gabriel Handford</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=gabriel&repo=gh-unit&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
  </tbody>
</table>

<h2>Automated Testing</h2>

<p>Making tests easier to write is one thing, but getting them to run without affecting productivity is quite another.</p>

<h3>Jenkins</h3>

<p>For a long time, installing <a href="http://jenkins-ci.org">Jenkins</a> on a dedicated Mac Mini was the state-of-the-art for automated build servers.</p>

<p>Aside from the fact that it&#39;s <em>kinda the worst thing ever to set-up</em>, <a href="https://speakerdeck.com/subdigital/ios-build-automation-with-jenkins">you can do a lot of cool things</a> like notifying build status over IM or IRC, automatically distributing builds to <a href="https://testflightapp.com/dashboard/">TestFlight</a> or <a href="http://hockeyapp.net">HockeyApp</a> with <a href="https://github.com/nomad/shenzhen">Shenzhen</a>, and generating documentation with <a href="http://gentlebytes.com/appledoc/">AppleDoc</a>.</p>

<h3>Travis</h3>

<p>Until recently, automated unit testing for Objective-C was the privilege of projects that could dedicate the time and money to setup a CI server. <a href="https://travis-ci.org">Travis CI</a> made CI available to the masses.</p>

<p>CI for Objective-C is more difficult than for other languages, because it needs to be done on a Mac. For economic reasons, there just isn&#39;t a market for cloud-based OS X environments like there is for Linux. Fortunately, <a href="https://saucelabs.com">SauceLabs</a> has built such a virtualized Mac cloud, and is graciously donating some of it to run tests for open source Objective-C projects on Travis-CI.</p>

<p>For an example of automated Objective-C unit testing in the wild, check out <a href="https://github.com/afnetworking/afnetworking#unit-tests">how AFNetworking does it</a>.</p>

<p>The <code>Tests</code> subdirectory contains separate projects for iOS and OS X targets, as well as a Podfile, which specifies all of the testing library dependencies. AFNetworking executes a <a href="http://rake.rubyforge.org">Rake</a> task, which shells out to <a href="https://github.com/facebook/xctool"><code>xctool</code></a>.</p>

<p>All of the configuration for setup is defined in <code>.travis.yml</code>:</p>

<h4>.travis.yml</h4>
<div class="highlight"><pre><code class="text language-text" data-lang="text">language: objective-c
before_install:
  - brew update
  - brew install xctool --HEAD
  - cd Tests &amp;&amp; pod install &amp;&amp; cd $TRAVIS_BUILD_DIR
  - mkdir -p &quot;Tests/AFNetworking Tests.xcodeproj/xcshareddata/xcschemes&quot; &amp;&amp; cp Tests/Schemes/*.xcscheme &quot;Tests/AFNetworking Tests.xcodeproj/xcshareddata/xcschemes/&quot;
script: rake test
</code></pre></div>
<p>Full documentation for the Travis configuration file <a href="http://about.travis-ci.org/docs/user/build-configuration/">can be found on Travis-CI.org</a>.</p>

<hr>

<p>Once again, the direction of Objective-C has been directly influenced by the Ruby community. Those guys and gals are <em>serious</em> about testing. It&#39;s not like we should complain, though: between <a href="http://cocoapods.org">CocoaPods</a>, <a href="http://www.rubymotion.com">RubyMotion</a>, and <a href="http://nomad-cli.com">Nomad</a>, Ruby has made Objective-C development better by several orders of magnitude.</p>

<p>The bottom line is that testing has come to Objective-C. It&#39;s not always necessary, and it&#39;s certainly not a silver bullet for writing great software, but it&#39;s proven itself invaluable (especially for open source development). So give it a try now, before <em>not</em> testing becomes <em>seriously uncool</em>.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 27 May 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:34:"http://nshipster.com/unit-testing/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:34:"http://nshipster.com/unit-testing/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:44;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:35:"Core Data Libraries &amp; Utilities";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:17957:"<p>So let&#39;s say that, having determined your particular needs and compared all of the alternatives, you&#39;ve chosen <a href="http://developer.apple.com/library/mac/#documentation/cocoa/Conceptual/CoreData/cdProgrammingGuide.html">Core Data</a> for your next app.</p>

<p>Nothing wrong with that! Core Data is a great choice for apps that model, persist, and query large object graphs.</p>

<p>Sure it&#39;s complicated, cumbersome, and yes, at times, a real <a href="http://nshipster.com/nscoding#figure-2">pain in the ass</a>—but gosh darn it, some of the best and most popular apps ever built use Core Data. And if it&#39;s good enough for them, it&#39;s probably good enough for you, too.</p>

<p>...but that&#39;s not to say that Core Data can&#39;t be improved.</p>

<p>And while there have been many libraries attempting to replace Core Data, there are many more that attempt to make it better. These libraries range from the much-needed dose of syntactic sugar to comprehensive, full-stack frameworks.</p>

<p>This week on NSHipster: a guided tour of the best open source libraries for working with Core Data. Read on to see how you might make the most from your Core Data experience.</p>

<hr>

<blockquote>
<p>For your convenience, the following table is provided. Contained within are the most significant open source libraries and utilities for working with Core Data. This is list is by no means comprehensive, so if you think something is missing or out of place, please tweet <a href="https://twitter.com/NSHipster">@NSHipster</a>—or better yet, <a href="https://github.com/NSHipster/articles">submit a pull request</a>.</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th colspan="3">Wrappers</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://github.com/magicalpanda/MagicalRecord">Magical Record</a></td>
      <td><a href="https://github.com/casademora">Saul Mora</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=magicalpanda&repo=MagicalRecord&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
    <tr>
      <td><a href="https://github.com/mneorr/Objective-Record">Objective-Record</a></td>
      <td><a href="https://github.com/mneorr">Marin Usalj</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=mneorr&repo=Objective-Record&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
    <tr>
      <td><a href="https://github.com/soffes/SSDataKit">SSDataKit</a></td>
      <td><a href="https://github.com/soffes">Sam Soffes</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=soffes&repo=SSDataKit&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
    <tr>
      <td><a href="https://github.com/martydill/ios-queryable">ios-queryable</a></td>
      <td><a href="https://github.com/martydill">Marty Dill</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=martydill&repo=ios-queryable&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
    <tr>
      <td><a href="https://github.com/apparentsoft/ReactiveCoreData">ReactiveCoreData</a></td>
      <td><a href="https://github.com/apparentsoft">Jacob Gorban</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=apparentsoft&repo=ReactiveCoreData&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
  </tbody>

  <thead>
    <tr>
      <th colspan="3">Adapters</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://github.com/RestKit/RestKit">RestKit</a></td>
      <td><a href="https://github.com/blakewatters">Blake Watters</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=RestKit&repo=RestKit&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
    <tr>
      <td><a href="https://github.com/AFNetworking/AFIncrementalStore">AFIncrementalStore</a></td>
      <td><a href="https://github.com/mattt">Mattt Thompson</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=AFNetworking&repo=AFIncrementalStore&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
    <tr>
      <td><a href="https://github.com/mutualmobile/MMRecord">MMRecord</a></td>
      <td><a href="https://github.com/cnstoll">Conrad Stoll</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=mutualmobile&repo=MMRecord&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
    <tr>
      <td><a href="https://github.com/OliverLetterer/SLRESTfulCoreData">SLRESTfulCoreData</a></td>
      <td><a href="https://github.com/OliverLetterer">Oliver Letterer</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=OliverLetterer&repo=SLRESTfulCoreData&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
    <tr>
      <td><a href="https://github.com/gonzalezreal/Overcoat">Overcoat</a></td>
      <td><a href="https://github.com/gonzalezreal">Guillermo Gonzalez</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=gonzalezreal&repo=Overcoat&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
    <tr>
      <td><a href="https://github.com/github/Mantle">Mantle</a></td>
      <td><a href="https://github.com/GitHub">GitHub</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=github&repo=Mantle&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
  </tbody>

  <thead>
    <tr>
      <th colspan="3">Synchronizers</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://github.com/nothirst/TICoreDataSync">TICoreDataSync</a></td>
      <td><a href="https://github.com/timisted">Tim Isted</a>, <a href="https://github.com/MrRooni">Michael Fey</a>, <a href="https://github.com/kevinhoctor">Kevin Hoctor</a>, <a href="https://github.com/chbeer">Christian Beer</a>, <a href="https://github.com/tonyarnold">Tony Arnold</a>, and <a href="https://github.com/dannygreg">Danny Greg</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=nothirst&repo=TICoreDataSync&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
    <tr>
      <td><a href="https://github.com/lhunath/UbiquityStoreManager">UbiquityStoreManager</a></td>
      <td><a href="https://github.com/lhunath">Maarten Billemont</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=lhunath&repo=UbiquityStoreManager&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
  </tbody>


  <thead>
    <tr>
      <th colspan="3">Utilities</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://github.com/rentzsch/mogenerator">mogenerator</a></td>
      <td><a href="https://github.com/rentzsch">Jonathan 'Wolf' Rentzsch</a></td>
      <td><iframe src="http://ghbtns.com/github-btn.html?user=rentzsch&repo=mogenerator&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="106" height="20"></iframe></td>
    </tr>
  </tbody>
</table>

<h2>Wrappers</h2>

<p>Wrapper libraries provide some much needed syntactic sugar and convenience methods to Core Data&#39;s verbose and complicated APIs.</p>

<p>For example, to insert a new managed object into a managed object context, it&#39;s a class method on, not <code>NSManagedObject</code> or <code>NSManagedObjectContext</code> as one might reasonably expect, but <code>NSEntityDescription</code>. <code>NSEntityDescription +insertNewObjectForEntityForName:inManagedObjectContext:</code>. What?</p>

<p>There are a number of open source libraries that collectively identify and correct for the roughest patches of the Core Data APIs. Managing a main and private context outside of <code>AppDelegate</code>, convenience method for manipulating and querying managed objects, and so on.</p>

<h4><a href="https://github.com/soffes/SSDataKit">SSDataKit</a></h4>

<blockquote>
<p>There is a lot of boilerplate code required to write a Core Data application. This is annoying. In pretty much everything I&#39;ve written since Core Data came to iOS, I have used the following class.</p>
</blockquote>

<h3>Inspired by <a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">Active Record</a></h3>

<p>It should be no surprise that programmers, having learned how to do things a certain way, will bring those ideas and conventions to other technologies. For the large influx of Ruby developers coming over to iOS, that familiar paradigm was <a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">Active Record</a>.</p>

<p>Contrary to popular belief, Core Data is <em>not</em> an <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">Object-Relational Mappers</a>, but rather an object graph and persistence framework, capable of much more than the <a href="http://en.wikipedia.org/wiki/Active_record_pattern">Active Record pattern</a> alone is capable of. Using Core Data as an ORM necessarily limits the capabilities of Core Data and muddies its conceptual purity. But for many developers longing for the familiarity of an ORM, this trade-off is a deal at twice the price!</p>

<h4><a href="https://github.com/magicalpanda/MagicalRecord">Magical Record</a></h4>

<blockquote>
<p>MagicalRecord was inspired by the ease of Ruby on Rails&#39; Active Record fetching. The goals of this code are to clean up Core Data related code, allow for clear, simple, one-line fetches, and still allow the modification of the <code>NSFetchRequest</code> when request optimizations are needed.</p>
</blockquote>

<h4><a href="https://github.com/mneorr/Objective-Record">Objective-Record</a></h4>

<blockquote>
<p>This is a lightweight ActiveRecord way of managing Core Data objects.
The syntax is borrowed from Ruby on Rails.
And yeah, no AppDelegate code.
It&#39;s fully tested with <a href="https://github.com/allending/Kiwi">Kiwi</a>.</p>
</blockquote>

<h3>Inspired by <a href="http://en.wikipedia.org/wiki/Language_Integrated_Query">LINQ</a></h3>

<p>Here&#39;s a fun game: the next time you meet a developer coming over from the .NET world, set a timer to see how long it takes them to start raving about <a href="http://en.wikipedia.org/wiki/Language_Integrated_Query">LINQ</a>. Seriously, people <em>love</em> LINQ.</p>

<p>For the uninitiated, LINQ is like <a href="http://en.wikipedia.org/wiki/SQL">SQL</a>, but integrated as a language feature. Think <code>NSPredicate</code>, <a href="http://nshipster.com/nssortdescriptor/"><code>NSSortDescriptor</code></a>, and <a href="http://nshipster.com/kvc-collection-operators/"><code>Key-Value Coding</code></a> with a much nicer syntax:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">from c in SomeCollection
  where c.SomeProperty &lt; 10
  select new {c.SomeProperty, c.OtherProperty};
</code></pre></div>
<h4><a href="https://github.com/martydill/ios-queryable">ios-queryable</a></h4>

<blockquote>
<p>ios-queryable supports LINQ-style query composition and deferred execution, and implements a subset of IEnumerable&#39;s methods, including <code>where</code>, <code>take</code>, <code>skip</code>, <code>orderBy</code>, <code>first/firstOrDefault</code>, <code>single/singleOrDefault</code>, <code>count</code>, <code>any</code>, and <code>all</code>.</p>
</blockquote>

<h3>Inspired by <a href="https://github.com/ReactiveCocoa">ReactiveCocoa</a></h3>

<p>ReactiveCocoa, which itself <a href="http://nshipster.com/reactivecocoa/">brings the functional reactive paradigm to Objective-C</a>, is now being used to bring some functional sanity and order to Core Data. This is still uncharted territory, but the initial results are indeed promising.</p>

<h4><a href="https://github.com/apparentsoft/ReactiveCoreData">ReactiveCoreData</a></h4>

<blockquote>
<p>ReactiveCoreData (RCD) is an attempt to bring Core Data into the ReactiveCocoa (RAC) world.</p>
</blockquote>

<h2>Adapters</h2>

<p>Most iOS apps communicate with a webservice in some capacity. For apps using Core Data, it&#39;s common for records to be fetched, updated, and deleted from a REST or RPC-style webservice. Maintaining consistency between a local cache and the server is a deceptively tricky enterprise.</p>

<p>Keeping objects up-to-date, removing duplicate records, mapping entities to API endpoints, reconciling conflicts, managing network reachability... these are just some of the challenges a developer faces when creating a robust client-server application.</p>

<p>Fortunately, there are a wealth of open-source libraries that can help alleviate some of this pain.</p>

<h4><a href="https://github.com/RestKit/RestKit">RestKit</a></h4>

<blockquote>
<p>RestKit is a modern Objective-C framework for implementing RESTful web services clients on iOS and Mac OS X. It provides a powerful <a href="https://github.com/RestKit/RestKit/wiki/Object-mapping">object mapping</a> engine that seamlessly integrates with <a href="http://developer.apple.com/library/mac/#documentation/cocoa/Conceptual/CoreData/cdProgrammingGuide.html">Core Data</a> and a simple set of networking primitives for mapping HTTP requests and responses built on top of <a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>. It has an elegant, carefully designed set of APIs that make accessing and modeling RESTful resources feel almost magical.</p>
</blockquote>

<h4><a href="https://github.com/AFNetworking/AFIncrementalStore">AFIncrementalStore</a></h4>

<blockquote>
<p>AFIncrementalStore is an NSIncrementalStore subclass that uses AFNetworking to automatically request resources as properties and relationships are needed.</p>
</blockquote>

<h4><a href="https://github.com/mutualmobile/MMRecord">MMRecord</a></h4>

<blockquote>
<p>MMRecord is a block-based seamless web service integration library for iOS and Mac OS X. It leverages the Core Data model configuration to automatically create and populate a complete object graph from an API response. It works with any networking library, is simple to setup, and includes many popular features that make working with web services even easier.</p>
</blockquote>

<h4><a href="https://github.com/OliverLetterer/SLRESTfulCoreData">SLRESTfulCoreData</a></h4>

<blockquote>
<p><code>SLRESTfulCoreData</code> builds on top of <a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> and <a href="https://github.com/OliverLetterer/SLCoreDataStack">SLCoreDataStack</a> and let&#39;s you map your JSON REST API to your CoreData model in minutes.</p>
</blockquote>

<h4><a href="https://github.com/gonzalezreal/Overcoat">Overcoat</a></h4>

<blockquote>
<p>Overcoat is an <a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> extension that makes it super simple for developers to use Mantle model objects with a REST client.</p>
</blockquote>

<h4><a href="https://github.com/github/Mantle">Mantle</a></h4>

<blockquote>
<p>Mantle makes it easy to write a simple model layer for your Cocoa or Cocoa Touch application.</p>
</blockquote>

<h2>Synchronizers</h2>

<p>Whereas adapters synchronize information through an existing, general purpose interface such as REST, synchronizers use a more direct protocol, offering better integration and performance at the expense of portability and generality.</p>

<h3><a href="https://github.com/nothirst/TICoreDataSync">TICoreDataSync</a></h3>

<blockquote>
<p>Automatic synchronization for Core Data Apps, between any combination of Mac OS X and iOS: Mac to iPhone to iPad to iPod touch and back again</p>
</blockquote>

<h4><a href="https://github.com/lhunath/UbiquityStoreManager">UbiquityStoreManager</a></h4>

<blockquote>
<p>UbiquityStoreManager is a controller that implements iCloud integration with Core Data for you.</p>
</blockquote>

<h2>Utilities</h2>

<p>We would be remiss to survey the open source Core Data ecosystem without mentioning Mogenerator. Among one of the surviving projects from the pre-iPhone era, Mogenerator has become indispensable to developers over the years. Although much has changed about Core Data over the years, the one constant has been Apple&#39;s characteristic lack of comprehensive tooling. Fortunately, Mr. Wolf Rentzsch has us covered.</p>

<h4><a href="https://github.com/rentzsch/mogenerator">Mogenerator</a></h4>

<blockquote>
<p><code>mogenerator</code> is a command-line tool that, given an <code>.xcdatamodel</code> file, will generate <em>two classes per entity</em>. The first class, <code>_MyEntity</code>, is intended solely for machine consumption and will be continuously overwritten to stay in sync with your data model. The second class, <code>MyEntity</code>, subclasses <code>_MyEntity</code>, won&#39;t ever be overwritten and is a great place to put your custom logic.</p>
</blockquote>

<hr>

<p>Remember: there is no silver bullet. There is no one-size-fits-all solution. Just as Core Data may only be advisable in particular circumstances, so too are the aforementioned Core Data libraries.</p>

<p>Dividing the ecosystem up into broad categories is informative if only to help identify the relative strengths and trade-offs of each library. Only you can determine (yes, sometimes through trial and error) which solution is the best for you.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 20 May 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:55:"http://nshipster.com/core-data-libraries-and-utilities/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:55:"http://nshipster.com/core-data-libraries-and-utilities/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:45;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:26:"NSCoding / NSKeyedArchiver";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:15372:"<p>Among the most important architectural decisions made when building an app is how to persist data between launches. The question of how, exactly, to re-create the state of the app from the time it was last opened; of how to describe the object graph in such a way that it can be flawlessly reconstructed next time.</p>

<p>On iOS and Mac OS X, Apple provides two options: <a href="http://developer.apple.com/library/mac/#documentation/cocoa/Conceptual/CoreData/cdProgrammingGuide.html">Core Data</a> or <a href="http://developer.apple.com/library/ios/#Documentation/Cocoa/Reference/Foundation/Classes/NSKeyedArchiver_Class/Reference/Reference.html"><code>NSKeyedArchiver</code></a> / <a href="http://developer.apple.com/library/ios/#documentation/Cocoa/Reference/Foundation/Classes/NSKeyedUnarchiver_Class/Reference/Reference.html"><code>NSKeyedUnarchiver</code></a> (which serializes <code>&lt;NSCoding&gt;</code>-compliant classes to and from a data representation).</p>

<blockquote>
<p>Or rather: three, if you include <code>NSURLCache</code>. In the case of a client-server application, having the client load necessary data on each launch is a viable design, especially when combined with a disk-based cache, which allows stored server responses to be returned immediately from matching requests. In practice, some combination of network and object caching is advisable.</p>
</blockquote>

<p>When it comes to modeling, querying, traversing and persisting complex object graphs, there is no substitute for Core Data. Core Data is a big hammer, but not every problem is a nail—much less a sufficiently large nail.</p>

<p>A fair and common comparison of Core Data to <code>NSKeyedArchiver</code> might go something like this:</p>

<table id="figure-1" class="core-data-versus-nskeyedarchiver">
  <thead>
    <tr>
      <th></th>
      <th>Core Data</th>
      <th>NSKeyedArchiver</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Entity Modeling</td>
      <td>Yes</td>
      <td>No</td>
    </tr>
    <tr>
      <td>Querying</td>
      <td>Yes</td>
      <td>No</td>
    </tr>
    <tr>
      <td>Speed</td>
      <td>Fast</td>
      <td>Slow</td>
    </tr>
    <tr>
      <td>Serialization Format</td>
      <td>SQLite, XML, or NSData</td>
      <td>NSData</td>
    </tr>
    <tr>
      <td>Migrations</td>
      <td>Automatic</td>
      <td>Manual</td>
    </tr>
    <tr>
      <td>Undo Manager</td>
      <td>Automatic</td>
      <td>Manual</td>
    </tr>
  </tbody>
</table>

<p>Et cetera. In a heads-up, apples to apples comparison, it looks rather one-sided.</p>

<p>...that is, until you look at it from a slightly different perspective:</p>

<table id="figure-2" class="core-data-versus-nskeyedarchiver">
  <thead>
    <tr>
      <th></th>
      <th>Core Data</th>
      <th>NSKeyedArchiver</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Persists State</td>
      <td>Yes</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Pain in the Ass</td>
      <td>Yes</td>
      <td>No</td>
    </tr>
  </tbody>
</table>

<p>By these measures, <code>NSKeyedArchiver</code> becomes a perfectly reasonable choice in certain situations. Not all apps need to query data. Not all apps need automatic migrations. Not all apps work with large or complex object graphs. And even apps that do may have certain components better served by a simpler solution.</p>

<p>This article will look at the how&#39;s, when&#39;s, and why&#39;s of <code>NSKeyedArchiver</code> and <code>NSCoding</code>. And with this understanding, hopefully provide you, dear reader, with the wisdom to choose the best tool for the job.</p>

<hr>

<p><code>NSCoding</code> is a simple protocol, with two methods: <code>-initWithCoder:</code> and <code>encodeWithCoder:</code>. Classes that conform to <code>NSCoding</code> can be serialized and deserialized into data that can be either be archived to disk or distributed across a network.</p>

<p>For example:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">Book</span> : <span class="nc">NSObject</span> <span class="o">&lt;</span><span class="n">NSCoding</span><span class="o">&gt;</span>
<span class="k">@property</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">title</span><span class="p">;</span>
<span class="k">@property</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">author</span><span class="p">;</span>
<span class="k">@property</span> <span class="n">NSUInteger</span> <span class="n">pageCount</span><span class="p">;</span>
<span class="k">@property</span> <span class="n">NSSet</span> <span class="o">*</span><span class="n">categories</span><span class="p">;</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">getter</span> <span class="o">=</span> <span class="n">isAvailable</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">available</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">Book</span>

<span class="cp">#pragma mark - NSCoding</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithCoder:</span><span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">decoder</span> <span class="p">{</span>
    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">self</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="p">[</span><span class="n">decoder</span> <span class="n">decodeObjectForKey</span><span class="o">:</span><span class="s">@&quot;title&quot;</span><span class="p">];</span>
    <span class="n">self</span><span class="p">.</span><span class="n">author</span> <span class="o">=</span> <span class="p">[</span><span class="n">decoder</span> <span class="n">decodeObjectForKey</span><span class="o">:</span><span class="s">@&quot;author&quot;</span><span class="p">];</span>
    <span class="n">self</span><span class="p">.</span><span class="n">pageCount</span> <span class="o">=</span> <span class="p">[</span><span class="n">decoder</span> <span class="n">decodeIntegerForKey</span><span class="o">:</span><span class="s">@&quot;pageCount&quot;</span><span class="p">];</span>
    <span class="n">self</span><span class="p">.</span><span class="n">categories</span> <span class="o">=</span> <span class="p">[</span><span class="n">decoder</span> <span class="n">decodeObjectForKey</span><span class="o">:</span><span class="s">@&quot;categories&quot;</span><span class="p">];</span>
    <span class="n">self</span><span class="p">.</span><span class="n">available</span> <span class="o">=</span> <span class="p">[</span><span class="n">decoder</span> <span class="n">decodeBoolForKey</span><span class="o">:</span><span class="s">@&quot;available&quot;</span><span class="p">];</span>

    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">encodeWithCoder:</span><span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">encoder</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">encoder</span> <span class="n">encodeObject</span><span class="o">:</span><span class="n">self</span><span class="p">.</span><span class="n">title</span> <span class="n">forKey</span><span class="o">:</span><span class="s">@&quot;title&quot;</span><span class="p">];</span>
    <span class="p">[</span><span class="n">encoder</span> <span class="n">encodeObject</span><span class="o">:</span><span class="n">self</span><span class="p">.</span><span class="n">author</span> <span class="n">forKey</span><span class="o">:</span><span class="s">@&quot;author&quot;</span><span class="p">];</span>
    <span class="p">[</span><span class="n">encoder</span> <span class="n">encodeInteger</span><span class="o">:</span><span class="n">self</span><span class="p">.</span><span class="n">pageCount</span> <span class="n">forKey</span><span class="o">:</span><span class="s">@&quot;pageCount&quot;</span><span class="p">];</span>
    <span class="p">[</span><span class="n">encoder</span> <span class="n">encodeObject</span><span class="o">:</span><span class="n">self</span><span class="p">.</span><span class="n">categories</span> <span class="n">forKey</span><span class="o">:</span><span class="s">@&quot;categories&quot;</span><span class="p">];</span>
    <span class="p">[</span><span class="n">encoder</span> <span class="n">encodeBool</span><span class="o">:</span><span class="p">[</span><span class="n">self</span> <span class="n">isAvailable</span><span class="p">]</span> <span class="n">forKey</span><span class="o">:</span><span class="s">@&quot;available&quot;</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">@end</span>
</code></pre></div>
<p>As you can see, <code>NSCoding</code> is mostly boilerplate. Each property is encoded or decoded as an object or type, using the name of the property of as the key each time. (Some developers prefer to define <code>NSString *</code> constants for each keypath, but this is usually unnecessary).</p>

<p>But boilerplate can be a good things sometimes—with direct control over the entire serialization process, it remains flexible to account for things like:</p>

<ul>
<li><strong>Migrations</strong>: If a data model changes—such as adding, renaming, or removing a field—it should maintain compatibility with data serialized in the old format. Apple provides some guidelines on how to go about this in <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Archiving/Articles/compatibility.html#//apple_ref/doc/uid/20001055-BCICFFGE">&quot;Forward and Backward Compatibility for Keyed Archives&quot;</a>.</li>
<li><strong>Archiving non-<code>NSCoding</code>-compatible Classes</strong>: According to object-oriented design, objects should take responsibility for encoding and decoding to and from a serialization format. However, when a class doesn&#39;t come with <code>NSCoding</code> support built in, it may be left up to class that uses it to help out.</li>
</ul>

<blockquote>
<p>One library that aims to cut down the boilerplate of NSCoding is <a href="https://github.com/github/Mantle">Mantle</a>, from the good folks over at GitHub. If you&#39;re looking for more of the conveniences of Core Data modeling with <code>NSCoding</code>, Mantle is definitely worth a look.</p>
</blockquote>

<hr>

<p>Of course, serialization is only one part of the story. Determining where this data will persist is another question. Again, there are two approaches: writing to the local file system and using <code>NSUserDefaults</code>.</p>

<h2>File System</h2>

<p><code>NSKeyedArchiver</code> and <code>NSKeyedUnarchiver</code> provide a convenient API to read / write objects directly to / from disk.</p>

<p>An <code>NSCoding</code>-backed table view controller might, for instance, set its collection property from the file manager</p>

<h4>Archiving</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[</span><span class="n">NSKeyedArchiver</span> <span class="n">archiveRootObject</span><span class="o">:</span><span class="n">books</span> <span class="n">toFile</span><span class="o">:</span><span class="s">@&quot;/path/to/archive&quot;</span><span class="p">];</span>
</code></pre></div>
<h4>Unarchiving</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[</span><span class="n">NSKeyedUnarchiver</span> <span class="n">unarchiveObjectWithFile</span><span class="o">:</span><span class="s">@&quot;/path/to/archive&quot;</span><span class="p">];</span>
</code></pre></div>
<h2><code>NSUserDefaults</code></h2>

<p>Each app has its own database of user preferences, which can store and retrieve any <code>NSCoding</code>-compatible object or C value.</p>

<p>While it is not advisable to store an entire object graph into <code>NSUserDefaults</code>, it can be useful to encode compound objects in this way, such as &quot;current user&quot; objects <del>or API credentials</del> <ins>(use <a href="https://developer.apple.com/library/mac/#documentation/security/Conceptual/keychainServConcepts/iPhoneTasks/iPhoneTasks.html">Keychain</a> instead)</ins>.</p>

<h4>Archiving</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSKeyedArchiver</span> <span class="n">archivedDataWithRootObject</span><span class="o">:</span><span class="n">books</span><span class="p">];</span>
<span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="n">setObject</span><span class="o">:</span><span class="n">data</span> <span class="n">forKey</span><span class="o">:</span><span class="s">@&quot;books&quot;</span><span class="p">];</span>
</code></pre></div>
<h4>Unarchiving</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="n">objectForKey</span><span class="o">:</span><span class="s">@&quot;books&quot;</span><span class="p">];</span>
<span class="n">NSArray</span> <span class="o">*</span><span class="n">books</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSKeyedUnarchiver</span> <span class="n">unarchiveObjectWithData</span><span class="o">:</span><span class="n">data</span><span class="p">];</span>
</code></pre></div>
<hr>

<p>As developers, it is our responsibility to understand the goals and needs of our applications, and to resist the urge to over-engineer and prematurely optimize our solutions.</p>

<p>The decision to use Core Data in an application may appear to be a no-brainer, if not harmless. But in many cases, Core Data is discovered to be so unwieldy or unnecessary as to become a real hindrance to making something useful, let alone functional.</p>

<p>And even if most applications <em>would</em> benefit from Core Data at some point, there is wisdom to letting complexity evolve from a simple as necessary. And as far as persistence goes, it doesn&#39;t get much simpler than <code>NSCoding</code>.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 13 May 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:30:"http://nshipster.com/nscoding/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:30:"http://nshipster.com/nscoding/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:46;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:8:"GPUImage";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:18453:"<p>Here at NSHipster, we&#39;re all about diving into the darker corners of Objective-C to learn something new about the systems we interact with every day. Often, this means sifting through Apple frameworks or language features (it is, after all, a lot of what it means to work in Objective-C). However, <a href="http://nshipster.com/reactivecocoa/">on occasion</a>, it&#39;s nice to take a look to the burgeoning landscape of third-party libraries and frameworks (and there are some truly remarkable ones) for a glimpse of what&#39;s new and great outside of Cupertino.</p>

<p>This week, we&#39;ll be taking a look at one of the most impressive open source projects you&#39;ll find: <a href="https://github.com/BradLarson/GPUImage">GPUImage</a>. Buckle up, NSHipsters—if you&#39;re not careful, you may well end up creating a camera app by the end of the article.</p>

<hr>

<p>GPUImage is a BSD-licensed iOS library written by <a href="https://github.com/BradLarson/">Brad Larson</a> that lets you apply GPU-accelerated filters and other effects to images, live camera video, and movies.</p>

<h2>GPU vs. CPU</h2>

<p>Every iPhone ships with two processors: a <a href="http://en.wikipedia.org/wiki/Central_processing_unit">CPU</a>, or Central Processing Unit and a <a href="http://en.wikipedia.org/wiki/Graphics_processing_unit">GPU</a>, or Graphics Processing Unit. Each processor has its own strengths, and modern chip architecture (like in the iPhone&#39;s <a href="http://en.wikipedia.org/wiki/Apple_A4">A4</a>) integrate the CPU and GPU onto the same physical die.</p>

<p>When you write C or Objective-C code in Xcode, you&#39;re generating instructions that will be handled almost exclusively by the CPU. The GPU, by contrast, is a specialized chip that is especially well-suited for computation that can be split out into many small, independent operations, such as graphics rendering. The kinds of instructions understood by the GPU are quite different from that of the CPU, and as such, we write this code in a different language: <a href="http://en.wikipedia.org/wiki/Opengl">OpenGL</a> (or specifically, <a href="http://en.wikipedia.org/wiki/OpenGL_ES">OpenGL ES</a> on the iPhone &amp; iPad).</p>

<blockquote>
<p>Check out <a href="http://iphonedevelopment.blogspot.com/2010/11/opengl-es-20-for-ios-chapter-4.html">Jeff LaMarche&#39;s GLProgram OpenGL ES 2.0 book</a> for a great introduction to OpenGL ES and the rendering pipeline.</p>
</blockquote>

<p>Comparing the performance of GPU-based rendering to CPU rendering for something like video, the differences are staggering:</p>

<table id="gpuimage-benchmarks">
  <caption>CPU vs. GPU Frame-Rate (Larger FPS is Better)</caption>
  <thead>
    <tr>
      <th>Calculation</th>
      <th>GPU FPS</th>
      <th>CPU FPS</th>
      <th>Δ</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Thresholding ⨉ 1</td>
      <td>60.00</td>
      <td>4.21</td>
      <td>14.3⨉</td>
    </tr>
    <tr>
      <td>Thresholding ⨉ 2</td>
      <td>33.63</td>
      <td>2.36</td>
      <td>14.3⨉</td>
    </tr>
    <tr>
      <td>Thresholding ⨉ 100</td>
      <td>1.45</td>
      <td>0.05</td>
      <td>28.7⨉</td>
    </tr>
  </tbody>
</table>

<h3>&quot;Oh, so it&#39;s like Instagram?&quot;</h3>

<p>Let me put it this way:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">Instagram : GPUImage :: Disposable Camera : NASA Space Optics Manufacturing Center
</code></pre></div>
<p>To put it another way, within GPUImage&#39;s APIs lay <em>thousands</em> of camera apps, just waiting for the right combination of filters and a little spark of imagination.</p>

<p>Here&#39;s a table of the 125 (!) filters that come with GPUImage:</p>

<table id="gpuimage-filters">
  <thead>
    <tr>
      <th>Color Adjustments</th>
      <th>Image Processing</th>
      <th>Blending Modes</th>
      <th>Visual Effects</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
        <ul>
          <li>Brightness Filter</li>
          <li>Exposure Filter</li>
          <li>Contrast Filter</li>
          <li>Saturation Filter</li>
          <li>Gamma Filter</li>
          <li>Levels Filter</li>
          <li>Color Matrix Filter</li>
          <li>RGB Filter</li>
          <li>Hue Filter</li>
          <li>Tone Curve Filter</li>
          <li>Highlight Shadow Filter</li>
          <li>Lookup Filter</li>
          <li>Amatorka Filter</li>
          <li>Miss Etikate Filter</li>
          <li>Soft Elegance Filter</li>
          <li>Color Invert Filter</li>
          <li>Grayscale Filter</li>
          <li>Monochrome Filter</li>
          <li>False Color Filter</li>
          <li>Haze Filter</li>
          <li>Sepia Filter</li>
          <li>Opacity Filter</li>
          <li>Solid Color Generator</li>
          <li>Luminance Threshold Filter</li>
          <li>Adaptive Threshold Filter</li>
          <li>Average Luminance Threshold Filter</li>
          <li>Histogram Filter</li>
          <li>Histogram Generator</li>
          <li>Average Color</li>
          <li>Luminosity</li>
          <li>Chroma Key Filter</li>
        </ul>
      </td>
      <td>
        <ul>
          <li>Transform Filter</li>
          <li>Crop Filter</li>
          <li>Lanczos Resampling Filter</li>
          <li>Sharpen Filter</li>
          <li>Unsharp Mask Filter</li>
          <li>Fast Blur Filter</li>
          <li>Single Component Fast Blur Filter</li>
          <li>Gaussian Blur Filter</li>
          <li>Single Component Gaussian Blur Filter</li>
          <li>Gaussian Selective Blur Filter</li>
          <li>Gaussian Blur Position Filter</li>
          <li>Median Filter</li>
          <li>Bilateral Filter</li>
          <li>Tilt Shift Filter</li>
          <li>Box Blur Filter</li>
          <li>3x3 Convolution Filter</li>
          <li>Sobel Edge Detection Filter</li>
          <li>Threshold Edge Detection Filter</li>
          <li>Canny Edge Detection Filter</li>
          <li>Harris Corner Detection Filter</li>
          <li>Noble Corner Detection Filter</li>
          <li>Shi-Tomasi Corner Detection Filter</li>
          <li>Non Maximum Suppression Filter</li>
          <li>X/Y Derivative Filter</li>
          <li>Crosshair Generator</li>
          <li>Dilation Filter</li>
          <li>RGB Dilation Filter</li>
          <li>Erosion Filter</li>
          <li>RGB Erosion Filter</li>
          <li>Opening Filter</li>
          <li>RGB Opening Filter</li>
          <li>Closing Filter</li>
          <li>RGB Closing Filter</li>
          <li>Local Binary Pattern Filter</li>
          <li>Low Pass Filter</li>
          <li>High Pass Filter</li>
          <li>Motion Detector</li>
          <li>Hough Transform Line Detector</li>
          <li>Line Generator</li>
          <li>Motion Blur Filter</li>
          <li>Zoom Blur Filter</li>
        </ul>
      </td>
      <td>
        <ul>
          <li>Chroma Key Blend Filter</li>
          <li>Dissolve Blend Filter</li>
          <li>Multiply Blend Filter</li>
          <li>Add Blend Filter</li>
          <li>Subtract Blend Filter</li>
          <li>Divide Blend Filter</li>
          <li>Overlay Blend Filter</li>
          <li>Darken Blend Filter</li>
          <li>Lighten Blend Filter</li>
          <li>Color Burn Blend Filter</li>
          <li>Color Dodge Blend Filter</li>
          <li>Screen Blend Filter</li>
          <li>Exclusion Blend Filter</li>
          <li>Difference Blend Filter</li>
          <li>Hard Light Blend Filter</li>
          <li>Soft Light Blend Filter</li>
          <li>Alpha Blend Filter</li>
          <li>Source Over Blend Filter</li>
          <li>Color Burn Blend Filter</li>
          <li>Color Dodge Blend Filter</li>
          <li>Normal Blend Filter</li>
          <li>Color Blend Filter</li>
          <li>Hue Blend Filter</li>
          <li>Saturation Blend Filter</li>
          <li>Luminosity Blend Filter</li>
          <li>Linear Burn Blend Filter</li>
          <li>Poisson Blend Filter</li>
          <li>Mask Filter</li>
        </ul>
      </td>
      <td>
        <ul>
          <li>Pixellate Filter</li>
          <li>Polar Pixellate Filter</li>
          <li>Polka Dot Filter</li>
          <li>Halftone Filter</li>
          <li>Crosshatch Filter</li>
          <li>Sketch Filter</li>
          <li>Threshold Sketch Filter</li>
          <li>Toon Filter</li>
          <li>Smooth Toon Filter</li>
          <li>Emboss Filter</li>
          <li>Posterize Filter</li>
          <li>Swirl Filter</li>
          <li>Bulge Distortion Filter</li>
          <li>Pinch Distortion Filter</li>
          <li>Stretch Distortion Filter</li>
          <li>Sphere Refraction Filter</li>
          <li>Glass Sphere Filter</li>
          <li>Vignette Filter</li>
          <li>Kuwahara Filter</li>
          <li>Kuwahara Radius 3 Filter</li>
          <li>Perlin Noise Filter</li>
          <li>CGAColorspace Filter</li>
          <li>Mosaic Filter</li>
          <li>JFAVoronoi Filter</li>
          <li>Voronoi Consumer Filter</li>
        </ul>
      </td>
    </tr>
  </tbody>
</table>

<p>Seriously, the <a href="https://github.com/BradLarson/GPUImage/tree/master/examples/iOS/FilterShowcase">Filter Showcase Example App</a> that comes bundled in the repository could easily retail on the AppStore for $3.99, as-is. Add Twitter integration and a few sound effects, and you could bump that up to a respectable $6.99.</p>

<h2>Rendering Pipeline</h2>

<p><object data="http://nshipster.s3.amazonaws.com/gpuimage-pipeline.svg" type="image/svg+xml">
  <img src="http://nshipster.s3.amazonaws.com/gpuimage-pipeline.png" />
</object></p>

<p>GPUImage is, at its core, an Objective-C abstraction around a rendering pipeline. Source images from the camera, network, or disk are loaded and manipulated according to a chain of filters, and finally outputted either a view, graphics context, or data stream.</p>

<p>For example, images from the video camera  could have a Color Levels filter applied to simulate different types of <a href="http://en.wikipedia.org/wiki/Color_blindness">color blindness</a> and displayed in a live view.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">GPUImageVideoCamera</span> <span class="o">*</span><span class="n">videoCamera</span> <span class="o">=</span> <span class="p">[[</span><span class="n">GPUImageVideoCamera</span> <span class="n">alloc</span><span class="p">]</span>
    <span class="nl">initWithSessionPreset:</span><span class="n">AVCaptureSessionPreset640x480</span>
           <span class="nl">cameraPosition:</span><span class="n">AVCaptureDevicePositionBack</span><span class="p">];</span>
<span class="n">videoCamera</span><span class="p">.</span><span class="n">outputImageOrientation</span> <span class="o">=</span> <span class="n">UIInterfaceOrientationPortrait</span><span class="p">;</span>

<span class="n">GPUImageFilter</span> <span class="o">*</span><span class="n">filter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">GPUImageLevelsFilter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithFragmentShaderFromFile</span><span class="o">:</span><span class="s">@&quot;CustomShader&quot;</span><span class="p">];</span>
<span class="p">[</span><span class="n">filter</span> <span class="n">setRedMin</span><span class="o">:</span><span class="mf">0.299</span> <span class="n">gamma</span><span class="o">:</span><span class="mf">1.0</span> <span class="n">max</span><span class="o">:</span><span class="mf">1.0</span> <span class="n">minOut</span><span class="o">:</span><span class="mf">0.0</span> <span class="n">maxOut</span><span class="o">:</span><span class="mf">1.0</span><span class="p">];</span>
<span class="p">[</span><span class="n">filter</span> <span class="n">setGreenMin</span><span class="o">:</span><span class="mf">0.587</span> <span class="n">gamma</span><span class="o">:</span><span class="mf">1.0</span> <span class="n">max</span><span class="o">:</span><span class="mf">1.0</span> <span class="n">minOut</span><span class="o">:</span><span class="mf">0.0</span> <span class="n">maxOut</span><span class="o">:</span><span class="mf">1.0</span><span class="p">];</span>
<span class="p">[</span><span class="n">filter</span> <span class="n">setBlueMin</span><span class="o">:</span><span class="mf">0.114</span> <span class="n">gamma</span><span class="o">:</span><span class="mf">1.0</span> <span class="n">max</span><span class="o">:</span><span class="mf">1.0</span> <span class="n">minOut</span><span class="o">:</span><span class="mf">0.0</span> <span class="n">maxOut</span><span class="o">:</span><span class="mf">1.0</span><span class="p">];</span>
<span class="p">[</span><span class="n">videoCamera</span> <span class="n">addTarget</span><span class="o">:</span><span class="n">filter</span><span class="p">];</span>

<span class="n">GPUImageView</span> <span class="o">*</span><span class="n">filteredVideoView</span> <span class="o">=</span> <span class="p">[[</span><span class="n">GPUImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithFrame</span><span class="o">:</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">bounds</span><span class="p">)];</span>
<span class="p">[</span><span class="n">filter</span> <span class="n">addTarget</span><span class="o">:</span><span class="n">filteredVideoView</span><span class="p">];</span>
<span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="n">addSubView</span><span class="o">:</span><span class="n">filteredVideoView</span><span class="p">];</span>

<span class="p">[</span><span class="n">videoCamera</span> <span class="n">startCameraCapture</span><span class="p">];</span>
</code></pre></div>
<p>Or, combining various color blending modes, image effects, and adjustments, you could transform still images into something worthy of sharing with your hipster friends (example taken from <a href="https://github.com/eklipse2k8/FilterKit/blob/master/FilterKit/FilterKit/Filters/FKBlueValentine.m">FilterKit</a>, which is built on GPUImage):</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">GPUImageFilterGroup</span> <span class="o">*</span><span class="n">filter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">GPUImageFilterGroup</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>

<span class="n">GPUImageSaturationFilter</span> <span class="o">*</span><span class="n">saturationFilter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">GPUImageSaturationFilter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="p">[</span><span class="n">saturationFilter</span> <span class="n">setSaturation</span><span class="o">:</span><span class="mf">0.5</span><span class="p">];</span>

<span class="n">GPUImageMonochromeFilter</span> <span class="o">*</span><span class="n">monochromeFilter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">GPUImageMonochromeFilter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="p">[</span><span class="n">monochromeFilter</span> <span class="n">setColor</span><span class="o">:</span><span class="p">(</span><span class="n">GPUVector4</span><span class="p">){</span><span class="mf">0.0f</span><span class="p">,</span> <span class="mf">0.0f</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">,</span> <span class="mf">1.0f</span><span class="p">}];</span>
<span class="p">[</span><span class="n">monochromeFilter</span> <span class="n">setIntensity</span><span class="o">:</span><span class="mf">0.2</span><span class="p">];</span>

<span class="n">GPUImageVignetteFilter</span> <span class="o">*</span><span class="n">vignetteFilter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">GPUImageVignetteFilter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="p">[</span><span class="n">vignetteFilter</span> <span class="n">setVignetteEnd</span><span class="o">:</span><span class="mf">0.7</span><span class="p">];</span>

<span class="n">GPUImageExposureFilter</span> <span class="o">*</span><span class="n">exposureFilter</span> <span class="o">=</span> <span class="p">[[</span><span class="n">GPUImageExposureFilter</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="p">[</span><span class="n">exposureFilter</span> <span class="n">setExposure</span><span class="o">:</span><span class="mf">0.3</span><span class="p">];</span>

<span class="p">[</span><span class="n">filter</span> <span class="n">addGPUFilter</span><span class="o">:</span><span class="n">exposureFilter</span><span class="p">];</span>
<span class="p">[</span><span class="n">filter</span> <span class="n">addGPUFilter</span><span class="o">:</span><span class="n">monochromeFilter</span><span class="p">];</span>
<span class="p">[</span><span class="n">filter</span> <span class="n">addGPUFilter</span><span class="o">:</span><span class="n">saturationFilter</span><span class="p">];</span>
<span class="p">[</span><span class="n">filter</span> <span class="n">addGPUFilter</span><span class="o">:</span><span class="n">vignetteFilter</span><span class="p">];</span>
</code></pre></div>
<hr>

<p>Looking through all of what GPUImage can do, one can&#39;t help but get <em>excited</em>. Easy enough to get started immediately (without needing to know anything about OpenGL) yet performant enough to power whatever you dream up. And not just that, but it also comes with a dizzying number of building blocks—all of the color adjustments, blending modes, and visual effects you could ever want (or never knew you needed).</p>

<p>GPUImage is a rare treat for the open source community, and we as Mac &amp; iOS developers are lucky to have it at our disposal. Use it to make something great, and show others the world in a whole new way.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 06 May 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:30:"http://nshipster.com/gpuimage/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:30:"http://nshipster.com/gpuimage/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:47;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:13:"MKLocalSearch";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:5502:"<p>Look, we get it: people are upset about Apple Maps.</p>

<p>What should have been a crowning feature for iOS 6 became the subject of an official apology due to its embarrassing inaccuracies and the removal of public transportation information.</p>

<p>In all of the hubbub of torch burning and pitchfork raising, you may have completely missed a slew of additions to MapKit in iOS 6.1. Namely: <code>MKLocalSearch</code>.</p>

<hr>

<p><code>MKLocalSearch</code> allows developers to find nearby points of interest within a geographic region.</p>

<p>But before you go and rush into using <code>MKLocalSearch</code>, you&#39;ll have to know a few things about its friends. You see, <code>MKLocalSearch</code> has its functionality divided across <code>MKLocalSearchRequest</code> and <code>MKLocalSearchResponse</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">MKLocalSearchRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKLocalSearchRequest</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="n">request</span><span class="p">.</span><span class="n">naturalLanguageQuery</span> <span class="o">=</span> <span class="s">@&quot;Restaurants&quot;</span><span class="p">;</span>
<span class="n">request</span><span class="p">.</span><span class="n">region</span> <span class="o">=</span> <span class="n">mapView</span><span class="p">.</span><span class="n">region</span><span class="p">;</span>
<span class="n">MKLocalSearch</span> <span class="o">*</span><span class="n">search</span> <span class="o">=</span> <span class="p">[[</span><span class="n">MKLocalSearch</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithRequest</span><span class="o">:</span><span class="n">request</span><span class="p">];</span>
<span class="p">[</span><span class="n">search</span> <span class="n">startWithCompletionHandler</span><span class="o">:^</span><span class="p">(</span><span class="n">MKLocalSearchResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Map Items: %@&quot;</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">mapItems</span><span class="p">);</span>
<span class="p">}];</span>
</code></pre></div>
<p><code>MKLocalSearchRequest</code> takes a <code>naturalLanguageQuery</code>, such as &quot;Taxidermists&quot;, and an optional bounding geographic <code>region</code> to constrain results. In practice, the <code>region</code> is usually passed from an <code>MKMapView</code>.</p>

<p><code>MKLocalSearchResponse</code> is returned in the eponymous block handler of <code>MKLocalSearch -startWithCompletionHandler:</code>, and returns an array of <code>MKMapItem</code> objects. Each <code>MKMapItem</code> contains information like <code>name</code>, <code>phoneNumber</code>, <code>url</code> and address information via the <code>placemark</code> property.</p>

<p>If you keep a reference to your <code>MKLocalSearch</code> object, you can optionally <code>-cancel</code> the request, such as on <code>-viewWillDisappear:</code> or the like.</p>

<h2>Where&#39;s The Beef?</h2>

<p><code>MKLocalSearch</code> is a relatively straight-forward API (albeit perhaps worse off for eschewing a simpler single-class interface)... so what&#39;s the big deal?</p>

<p><strong>API limits.</strong> Or rather, the lack of them. Let me explain:</p>

<p>Perhaps the most counter-intuitive things about MapKit in iOS 6 is that <em>it&#39;s still widely used</em>. Nevermind the &quot;Apple Maps-gate&quot; melodrama, MapKit, even with the introduction of impressive iOS mapping SDKs from <a href="https://developers.google.com/maps/documentation/ios/">Google</a> and <a href="http://mapbox.com/mobile/">MapBox</a>, <a href="http://appleinsider.com/articles/13/03/18/developers-prefer-apples-ios-maps-sdk-over-google-maps">developers are still using MapKit</a>.</p>

<p>Part of this may be aesthetics, but a lot has to do with a certain level of home-field advantage, too. Because of MapKit&#39;s close ties to UIKit, it can be customized more easily and more extensively by third-party developers.</p>

<p>This brings us back to API call limits. When developing with another mapping SDK or geospatial webservice, licensing terms are almost necessarily going to be more limited than what Apple makes available for free. Free is a tough price to beat, and it&#39;s all-the-more compelling because there is no worry of going over API limits for tile loading or API calls.</p>

<h2>Where Do We Go From Here?</h2>

<p>With the introduction of <code>MKLocalSearch</code>, one can be hopeful of more first-party webservices being exposed in a similar fashion. Expanded geospatial search? Or perhaps first-party APIs to iTunes media streaming?</p>

<p>One can dare to dream, after all...</p>

<hr>

<p><code>MKLocalSearch</code> provides a simple way to find local points of interest. Because of its no-hassle webservice integration and tight integration with MapKit, any location-based app would do well to take advantage of it.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 29 Apr 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:35:"http://nshipster.com/mklocalsearch/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:35:"http://nshipster.com/mklocalsearch/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:48;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:17:"NSHipster Quiz #1";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:10508:"<p>On April 9th, the first-ever <a href="http://www.uikonf.com/2013/04/11/nshipster-pub-quiz.html">NSHipster Pub Quiz</a> was held in Berlin. Think of your traditional pub quiz crossed with &quot;Stump the Experts&quot;, with questions about things that you know and care about: computers, programming, Apple trivia—that sort of thing. The event was hosted by <a href="http://www.uikonf.com">UIKonf</a>, and made possible by its organizers <a href="http://twitter.com/chriseidhof">Chris Eidhof</a>, <a href="http://twitter.com/fidothe">Matt Patterson</a>, and <a href="http://twitter.com/peterbihr">Peter Bihr</a>. Thanks again to Chris, Matt, and Peter, and everyone who came out to make it such an amazing event.</p>

<p>All told, a whopping 50-some folks came out, composing a dozen or so teams of up to 6 people, with names such as &quot;NSBeep&quot;, &quot;alloc] win_it]&quot;, &amp; &quot;- Bug Fixes / - Performance Improvements&quot;. At the end of the evening, it was the <a href="http://codekollektiv.com">CodeKollectiv</a> team that claimed top prize, with a score of 30pts.</p>

<p>Here are the rules to play along at home:</p>

<ul>
<li>There are 4 Rounds, with 10 questions each</li>
<li>Record answers on a separate sheet of paper</li>
<li>Each correct answer to a question gets you 1 point</li>
<li>Play with up to 5 friends for maximum enjoyment</li>
<li>Don&#39;t be lame and look things up on the internet or in Xcode</li>
</ul>

<hr>

<h2>Round 1: General Knowledge</h2>

<ol>
<li>What does <code>NS</code> stand for?</li>
<li>When Steve Jobs introduced the iPhone, he made a prank call to Starbucks. How many lattés did he order to-go?
a. 3000
b. 4000
c. 6000</li>
<li>NSOperation has 4 properties used as keypaths for operation object states. What are they?</li>
<li>On your answer sheet, draw a <code>UITableViewCell</code> with <code>UITableViewCellStyleValue2</code>.</li>
<li>Which UIKit protocol contains the method <code>–tableView:heightForRowAtIndexPath:</code>?</li>
<li>What is the storage type of <code>BOOL</code>? <em>(i.e. <code>typedef</code> equivalent)</em></li>
<li>When was the Unix Epoch? Hint: NSDate has an initializer referencing this.</li>
<li>What is the current version of Xcode?</li>
<li>What was the first article written on NSHipster?</li>
<li>How many apps were on on the home screen of the first iPhone?</li>
</ol>

<h2>Round 2: APIs</h2>

<p>You will be given the name of the class, and the description of the property or method from the documentation. You need to tell me the name of that method or property.</p>

<ol>
<li><code>UIView</code>: &quot;A flag used to determine how a view lays out its content when its bounds change.&quot;</li>
<li><code>UIAccessibility</code>: &quot;A brief description of the result of performing an action on the accessibility element, in a localized string.&quot;</li>
<li><code>UIColor</code>: &quot;Returns a color object whose RGB values are 0.0, 1.0, and 1.0 and whose alpha value is 1.0.&quot;</li>
<li><code>UIAlertView</code>: &quot;Sent to the delegate when the user clicks a button on an alert view.&quot;</li>
<li><code>UIButton</code>: &quot;A Boolean value that determines whether tapping the button causes it to glow.&quot;</li>
<li><code>UITableView</code>: &quot;Reloads the specified rows using a certain animation effect.&quot;</li>
<li><code>UITableViewDataSource</code>: &quot;Tells the data source to return the number of rows in a given section of a table view.&quot;</li>
<li><code>UIWebView</code>: &quot;Sets the main page content and base URL.&quot;</li>
<li><code>UIGestureRecognizer</code>: &quot;Sent to the receiver when one or more fingers touch down in the associated view.&quot;</li>
<li><code>UIDictationPhrase</code>: &quot;The most likely textual interpretation of a dictated phrase.&quot;</li>
</ol>

<h2>Round 3: Picture Round</h2>

<ul>
<li>1. What is this?</li>
</ul>

<p><img src="http://nshipster-quiz-1.s3.amazonaws.com/question-1.jpg" alt="Question 1"></p>

<ul>
<li>2. What is this?</li>
</ul>

<p><img src="http://nshipster-quiz-1.s3.amazonaws.com/question-2.jpg" alt="Question 2"></p>

<ul>
<li>3. What is this?</li>
</ul>

<p><img src="http://nshipster-quiz-1.s3.amazonaws.com/question-3.jpg" alt="Question 3"></p>

<ul>
<li>4. What is this?</li>
</ul>

<p><img src="http://nshipster-quiz-1.s3.amazonaws.com/question-4.jpg" alt="Question 4"></p>

<ul>
<li>5. WTF is this?</li>
</ul>

<p><img src="http://nshipster-quiz-1.s3.amazonaws.com/question-5.jpg" alt="Question 5"></p>

<ul>
<li>6. Who is this?</li>
</ul>

<p><img src="http://nshipster-quiz-1.s3.amazonaws.com/question-6.jpg" alt="Question 6"></p>

<ul>
<li>7. Who is this?</li>
</ul>

<p><img src="http://nshipster-quiz-1.s3.amazonaws.com/question-7.jpg" alt="Question 7"></p>

<ul>
<li>8. Who is this?</li>
</ul>

<p><img src="http://nshipster-quiz-1.s3.amazonaws.com/question-8.jpg" alt="Question 8"></p>

<ul>
<li>9. Who is this?</li>
</ul>

<p><img src="http://nshipster-quiz-1.s3.amazonaws.com/question-9.jpg" alt="Question 9"></p>

<ul>
<li>10. In this photo, Bill Gates &amp; Steve Jobs are being interviewed at the D5 conference in 2007 by a man and a woman just off-screen to the left. Who are they? (One point for each person)</li>
</ul>

<p><img src="http://nshipster-quiz-1.s3.amazonaws.com/question-10.jpg" alt="Question 10"></p>

<h2>Round 4: Name That Framework!</h2>

<p>For each question, a list of three classes from the same framework have been listed without their two-letter namespace prefix. Name the framework that they all belong to!</p>

<ol>
<li>Color List, Matrix, Sound</li>
<li>Composition, URL Asset, Capture Session</li>
<li>Enclosure, Author, Feed</li>
<li>Geocoder, Location, Region</li>
<li>Merge Policy, Mapping Model, Incremental Store</li>
<li>Analysis, Summary, Search</li>
<li>Record, Person, MultiValue</li>
<li>View, View Controller, Skybox Effect</li>
<li>Central Manager, Descriptor, Peripheral Delegate</li>
<li>Filter, Face Feature, Vector</li>
</ol>

<hr>

<h1>Answers</h1>

<h2>Round 1: General Knowledge</h2>

<ol>
<li><a href="http://en.wikipedia.org/wiki/NeXTSTEP">NeXTSTEP</a></li>
<li><a href="http://www.macrumors.com/2013/03/04/steve-jobs-4000-latte-prank-order-lives-on-at-san-francisco-starbucks/">4000</a></li>
<li><a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/NSOperation_class/Reference/Reference.html%23//apple_ref/doc/uid/TP40004591-RH2-DontLinkElementID_1"><code>isReady</code>, <code>isExecuting</code>, <code>isFinished</code>, <code>isCancelled</code></a></li>
<li><a href="http://developer.apple.com/library/ios/DOCUMENTATION/UserExperience/Conceptual/TableView_iPhone/Art/tvcellstyle_value2.jpg">    textLabel detailTextLabel   </a></li>
<li><a href="http://developer.apple.com/library/ios/documentation/uikit/reference/UITableViewDelegate_Protocol/Reference/Reference.html#//apple_ref/doc/uid/TP40006942-CH3-SW25"><code>UITableViewDelegate</code></a></li>
<li><a href="http://nshipster.com/bool/"><code>signed char</code></a></li>
<li><a href="http://en.wikipedia.org/wiki/Unix_epoch">Midnight UTC, 1 January 1970</a></li>
<li><a href="http://en.wikipedia.org/wiki/Xcode">4.6.2 (4H1003)</a></li>
<li><a href="http://nshipster.com/nsindexset/">NSIndexSet</a></li>
<li><a href="http://en.wikipedia.org/wiki/IPhone_%281st_generation%29">16</a></li>
</ol>

<h2>Round 2: APIs</h2>

<ol>
<li><code>@contentMode</code></li>
<li><code>@accessibilityHint</code></li>
<li><code>+cyanColor</code></li>
<li><code>-alertView:clickedButtonAtIndex:</code></li>
<li><code>@showsTouchWhenHighlighted</code></li>
<li><code>-reloadRowsAtIndexPaths:withRowAnimation:</code></li>
<li><code>-tableView:numberOfRowsInSection:</code></li>
<li><code>-loadHTMLString:baseURL:</code></li>
<li><code>-touchesBegan:withEvent:</code></li>
<li><code>@text</code></li>
</ol>

<h2>Round 3: Picture Round</h2>

<ol>
<li><a href="http://en.wikipedia.org/wiki/Apple_I">Apple I</a></li>
<li><a href="http://en.wikipedia.org/wiki/EMac">Apple eMac</a></li>
<li><a href="http://en.wikipedia.org/wiki/Apple_Bandai_Pippin">Apple Bandai Pippin</a></li>
<li><a href="http://en.wikipedia.org/wiki/Apple_QuickTake">Apple QuickTake</a></li>
<li><a href="http://www.cultofmac.com/108782/apples-magnificent-mothership-campus-gets-new-renders-and-more-details-report/">New Proposed Apple Campus / &quot;Mothership&quot;</a></li>
<li><a href="http://en.wikipedia.org/wiki/Jonathan_Ive">Sir Jonathan &quot;Jony&quot; Ive</a></li>
<li><a href="http://en.wikipedia.org/wiki/Scott_Forstall">Scott Forstall</a></li>
<li><a href="http://en.wikipedia.org/wiki/Bob_Mansfield">Bob Mansfield</a></li>
<li><a href="http://en.wikipedia.org/wiki/Susan_kare">Susan Kare</a></li>
<li><a href="http://allthingsd.com/20071224/best-of-2007-video-d5-interview-with-bill-gates-and-steve-jobs/">Kara Swisher &amp; Walt Mossberg </a></li>
</ol>

<h2>Round 4: Name That Framework!</h2>

<ol>
<li><a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/ApplicationKit/ObjC_classic/_index.html">App Kit</a></li>
<li><a href="https://developer.apple.com/library/mac/#documentation/AVFoundation/Reference/AVFoundationFramework/_index.html">AV Foundation</a></li>
<li><a href="http://developer.apple.com/library/mac/#documentation/InternetWeb/Reference/PubSubReference/_index.html#//apple_ref/doc/uid/TP40004649">Publication Subscription</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/CoreLocation/Reference/CoreLocation_Framework/_index.html">Core Location</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/cocoa/Reference/CoreData_ObjC/_index.html">Core Data</a></li>
<li><a href="https://developer.apple.com/library/mac/#documentation/UserExperience/Reference/SearchKit/Reference/reference.html">Search Kit</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/AddressBook/Reference/AddressBook_iPhoneOS_Framework/_index.html">Address Book</a></li>
<li><a href="http://developer.apple.com/library/mac/#documentation/GLkit/Reference/GLKit_Collection/_index.html">GLKit</a></li>
<li><a href="http://developer.apple.com/library/ios/#documentation/CoreBluetooth/Reference/CoreBluetooth_Framework/_index.html">Core Bluetooth</a></li>
<li><a href="https://developer.apple.com/library/mac/#documentation/graphicsimaging/Conceptual/CoreImaging/ci_intro/ci_intro.html">Core Image</a></li>
</ol>

<hr>

<p>So how did you fare? Tweet out your score to see how you stack up to your peers!</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 22 Apr 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/nshipster-quiz-1/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/nshipster-quiz-1/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:49;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:14:"NSSecureCoding";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:4678:"<p>A short post for this week: everything you need to know about <code>NSSecureCoding</code>.</p>

<hr>

<p><code>NSSecureCoding</code> is a protocol introduced in the iOS 6 / Mac OS X 10.8 SDKs. Aside from a few mentions at WWDC, <code>NSSecureCoding</code> remains relatively obscure—most developers have perhaps heard of it, but perhaps never went so far as to look up what it does.</p>

<p><code>NSSecureCoding</code> extends the <code>NSCoding</code> protocol by adding the class method:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">supportsSecureCoding</span><span class="p">;</span>
</code></pre></div>
<p>By conforming to <code>NSSecureCoding</code> and returning <code>YES</code> for <code>+supportsSecureCoding</code>, a class declares that it handles encoding and decoding of instances of itself in a way that guards against substitution attacks.</p>

<p>Specifically, classes that override <code>-initWithCoder</code> and conform to <code>NSSecureCoding</code> should use <code>-decodeObjectOfClass:forKey:</code> rather than <code>-decodeObjectForKey:</code>.</p>

<p>Why is this important? Recall that <code>NSCoding</code> is Foundation&#39;s way of marshaling objects to be either archived on a file system, or copied to another address space. When <code>-decodeObjectForKey:</code> is used to decode representations of objects into actual objects, there is no guarantee that the result of creating the object will be what was expected. If that representation is corrupted—specifically, in changing the target class (and thus designated initializer)—the application runs the risk of constructing unknown objects. Whether by malicious intent or an incidental coding error, this can cause serious problems.</p>

<p>It&#39;s not an apples-to-apples comparison, but it&#39;s somewhat similar to <a href="http://tenderlovemaking.com/2013/02/06/yaml-f7u12.html">recent YAML exploit found in Rails</a>.</p>

<p>For an <a href="http://developer.apple.com/library/mac/#documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingXPCServices.html">XPC service</a>, which is designed with security in mind, data integrity of this nature is especially important. It&#39;s a safe bet that XPC will only wax influence in subsequent iOS and OS X releases, so it&#39;s good to keep this all in mind.</p>

<p>Anyway, <code>NSSecureCoding</code> patches this vulnerability by establishing a contract for best practices. Now, decoding an object requires the class to be known ahead of time.</p>

<p>Whereas a standard, secure implementation of <code>-initWithCoder:</code> might have a check like:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="n">decoder</span> <span class="n">decodeObjectForKey</span><span class="o">:</span><span class="s">@&quot;myKey&quot;</span><span class="p">];</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">obj</span> <span class="n">isKindOfClass</span><span class="o">:</span><span class="p">[</span><span class="n">MyClass</span> <span class="n">class</span><span class="p">]])</span> <span class="p">{</span>
  <span class="c1">// fail</span>
<span class="p">}</span>
</code></pre></div>
<p>...an <code>NSSecureCoding</code>-conforming class would use:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="kt">id</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[</span><span class="n">decoder</span> <span class="n">decodeObjectOfClass</span><span class="o">:</span><span class="p">[</span><span class="n">MyClass</span> <span class="n">class</span><span class="p">]</span>
                               <span class="nl">forKey:</span><span class="s">@&quot;myKey&quot;</span><span class="p">];</span>
</code></pre></div>
<p>Sometimes, a little API change makes all of the difference.</p>

<hr>

<p>So now you know what&#39;s up with <code>NSSecureCoding</code>. Keep an eye out for that going forward: <a href="http://oleb.net/blog/2012/10/remote-view-controllers-in-ios-6/">XPC is only going to become more important</a>. Perhaps not today, perhaps not tomorrow, but someday—you will probably need to implement <code>NSSecureCoding</code>. And when that day comes... you&#39;ll be ready.</p>

<p>Stay safe, everyone.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 15 Apr 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:36:"http://nshipster.com/nssecurecoding/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"http://nshipster.com/nssecurecoding/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:50;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:35:"BOOL / bool / Boolean / NSCFBoolean";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:9937:"<p>We&#39;ve talked before about the <a href="http://nshipster.com/nil/">philosophical and technical concerns of nothingness in programming</a>. This week, our attention turns to another fundamental matter: Truth.</p>

<p>Truth. <em>Vēritās</em>. The entire charter of Philosophy is founded upon the pursuit of it, and yet its exact meaning and implications still elude us. Does truth exist independently, or is it defined contingently against falsity? Can a proposition be at once both true <em>and</em> false? Is there absolute truth in anything, or is everything relative?</p>

<p>Once again, encoding our logical universe into the cold, calculating bytecode of computers forces us to deal with these questions one way or another. And as you&#39;ll see from our discussion of boolean types in Objective-C and its kin, truth is indeed stranger than fiction.</p>

<hr>

<p>Objective-C defines <code>BOOL</code> to encode truth value. It is a <code>typedef</code> of a <code>signed char</code>, with the macros <code>YES</code> and <code>NO</code> to represent true and false, respectively.</p>

<p>Boolean values are used in conditionals, such as <code>if</code> or <code>while</code> statements, to conditionally perform logic or repeat execution. When evaluating a conditional statement, the value <code>0</code> is considered &quot;false&quot;, while any other value is considered &quot;true&quot;. Because <code>NULL</code> and <code>nil</code> are defined as <code>0</code>, conditional statements on these nonexistent values are also evaluated as &quot;false&quot;.</p>

<p><strong>In Objective-C, use the <code>BOOL</code> type for parameters, properties, and instance variables dealing with truth values. When assigning literal values, use the <code>YES</code> and <code>NO</code> macros.</strong></p>

<h2>The Wrong Answer to the Wrong Question</h2>

<p>Novice programmers often include an equality operator when evaluating conditionals:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">if</span> <span class="p">([</span><span class="n">a</span> <span class="n">isEqual</span><span class="o">:</span><span class="n">b</span><span class="p">]</span> <span class="o">==</span> <span class="nb">YES</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>
</code></pre></div>
<p>Not only is this unnecessary, but depending on the left-hand value, it may also cause unexpected results, as described in the <a href="http://blog.bignerdranch.com/564-bools-sharp-corners/">Big Nerd Ranch blog post, &quot;BOOL&#39;s Sharp Edges&quot;</a>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">static</span> <span class="kt">BOOL</span> <span class="nf">different</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>An overly clever C programmer might take some satisfaction in the simplicity of this approach: indeed, two integers are equal if and only if their difference is <code>0</code>.</p>

<p>However, because of the reality of <code>BOOL</code> being <code>typedef</code>&#39;d as a <code>signed char</code>, this will not behave as expected:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">if</span> <span class="p">(</span><span class="n">different</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="nb">YES</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;11 != 10</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;11 == 10</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="n">different</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span> <span class="o">==</span> <span class="nb">YES</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;10 != 11</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;10 == 11</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="n">different</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span> <span class="o">==</span> <span class="nb">YES</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;512 != 256</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;512 == 256</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>This evaluates to:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">11 != 10
10 == 11
512 == 256
</code></pre></div>
<p>Now, <a href="https://www.destroyallsoftware.com/talks/wat">this might be acceptable for JavaScript</a>, but Objective-C don&#39;t suffer fools gladly.</p>

<p>Deriving truth value directly from an arithmetic operation is never a good idea. Like the sentence <a href="http://en.wikipedia.org/wiki/Colorless_green_ideas_sleep_furiously">&quot;Colorless green ideas sleep furiously&quot;</a>, it may be grammatical (after all, <code>BOOL</code> is a <code>signed char</code> like any other, so it <em>could</em> be treated as a number), but it doesn&#39;t make sense semantically. Instead, use the result of the <code>==</code> operator, or cast values into booleans with the <code>!</code> (or <code>!!</code>) operator.</p>

<h2>The Truth About <code>NSNumber</code> and <code>BOOL</code></h2>

<p>Pop quiz: what is the output of the following expression?</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[@(</span><span class="nb">YES</span><span class="p">)</span> <span class="n">class</span><span class="p">]);</span>
</code></pre></div>
<p>The answer:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">__NSCFBoolean
</code></pre></div>
<p>Wait, what?</p>

<p>All this time, we&#39;ve been led to believe that <code>NSNumber</code> <a href="http://nshipster.com/nsvalue/">boxes</a> primitives into an object representation. Any other integer- or float-derived <code>NSNumber</code> object shows its class to be <code>__NSCFNumber</code>. What gives?</p>

<p><code>NSCFBoolean</code> is a private class in the <code>NSNumber</code> <a href="http://nshipster.com/nsorderedset/">class cluster</a>. It is a bridge to the <a href="https://developer.apple.com/library/mac/#documentation/CoreFoundation/Reference/CFBooleanRef/Reference/reference.html"><code>CFBooleanRef</code> type</a>, which is used to wrap boolean values for Core Foundation property lists and collections. <code>CFBoolean</code> defines the constants <code>kCFBooleanTrue</code> and <code>kCFBooleanFalse</code>. Because <code>CFNumberRef</code> and <code>CFBooleanRef</code> are different types in Core Foundation, it makes sense that they are represented by different bridging classes in <code>NSNumber</code>.</p>

<p>For most people, boolean values and boxed objects &quot;just work&quot;, and don&#39;t really care what goes into making the sausage. But here at NSHipster, we&#39;re all about sausages.</p>

<hr>

<p>So, to recap, here is a table of all of the truth types and values in Objective-C:</p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Typedef</tt>
      <th>Header</th>
      <th>True Value</th>
      <th>False Value</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><tt>BOOL</tt></td>
      <td><tt>signed char</tt></td>
      <td>objc.h</td>
      <td><tt>YES</tt></td>
      <td><tt>NO</tt></td>
    </tr>
    <tr>
      <td><tt>bool</tt></td>
      <td><tt>_Bool</tt> (<tt>int</tt>)</td>
      <td>stdbool.h</td>
      <td><tt>true</tt></td>
      <td><tt>false</tt></td>
    </tr>
    <tr>
      <td><tt>Boolean</tt></td>
      <td><tt>unsigned char</tt></td>
      <td>MacTypes.h</td>
      <td><tt>TRUE</tt></td>
      <td><tt>FALSE</tt></td>
    </tr>
    <tr>
      <td><tt>NSNumber</tt></td>
      <td><tt>__NSCFBoolean</tt></td>
      <td>Foundation.h</td>
      <td><tt>@(YES)</tt></td>
      <td><tt>@(NO)</tt></td>
    </tr>
    <tr>
      <td><tt>CFBooleanRef</tt></td>
      <td><tt>struct</tt></td>
      <td>CoreFoundation.h</td>
      <td><tt>kCFBooleanTrue</tt></td>
      <td><tt>kCFBooleanFalse</tt></td>
    </tr>
  </tbody>
</table>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 08 Apr 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:26:"http://nshipster.com/bool/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:26:"http://nshipster.com/bool/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:51;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:6:"iCloud";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:9526:"<p>The <a href="http://en.wikipedia.org/wiki/Apple_Lisa">Lisa</a>. The <a href="http://en.wikipedia.org/wiki/Twentieth_Anniversary_Macintosh">Twentieth Anniversary Macintosh</a>. The <a href="http://en.wikipedia.org/wiki/IPod_Hi-Fi">iPod Hi-Fi</a>. The <a href="http://www.youtube.com/watch?v=9BnLbv6QYcA">MacBook Wheel</a>.</p>

<p>Each of these products exemplifies Apple&#39;s obsessive pursuit of quality as much as its unrivaled ability to anticipate the direction of things to come and execute flawlessly.</p>

<p>In the words of Wayne Gretzky: <q>Skate where the puck&#39;s going, not where it&#39;s been.</q></p>

<p>But perhaps what Apple is most renowned for, however, is its consistent track record for creating <em>great</em> webservices. From consumer products like MobileMe and Ping to developer tools including the Provisioning Portal and iTunes Connect, Apple has continued to set new standards for convenience, robustness, and extensibility.</p>

<p>So when Apple introduced iCloud at WWDC in 2011, everyone in the audience was rapt in anticipation, overcome with a sense of optimistic wonder. &quot;Not again!&quot;, we said to ourselves, shaking our head with a knowing smile. &quot;This changes everything!&quot;</p>

<p>And indeed, iCloud <em>has</em> changed everything. Although it seemed almost too good to be true when Steve Jobs got up on that stage in Moscone to announce iCloud to the world that morning in June—if anything, Apple has <strong>under</strong>-promised and <strong>over</strong>-delivered with iCloud.</p>

<p>Now, NSHipster usually covers obscure topics that you&#39;ve probably never heard of. But this is one of those days where it just feels <em>right</em> to take this opportunity today to make sure we&#39;re all on the same page about iCloud.</p>

<hr>

<p>iCloud is an umbrella term for the latest evolution of Apple&#39;s consumer web services. Following from the success of iTools, .Mac, and MobileMe, iCloud manages our digital lives like never before, with features like Photo Stream, iTunes Match, and Documents in the Cloud.</p>

<p>What really ties everything together are the iCloud Storage APIs that allow developers to easily create applications to stay connected across all of your devices. These APIs come in three different flavors, depending on the particular needs of your application:</p>

<blockquote>
<ul>
<li><strong>Key-value storage</strong> for discrete values, such as preferences, settings, and simple app state.</li>
<li><strong>Document storage</strong> for user-visible file-based information such as word processing documents, drawings, and complex app state.</li>
<li><strong>Core Data storage</strong> for shoebox-style apps and server-based, multi-device database solutions for structured content. iCloud Core Data storage is built on document storage and employs the same iCloud APIs.</li>
</ul>
</blockquote>

<h2>Key-Value Storage... in the Cloud!</h2>

<blockquote>
<p>To store discrete values in iCloud for app preferences, app configuration, or app state, use iCloud key-value storage. Key-value storage is similar to the local user defaults database; but values that you place in key-value storage are available to every instance of your app on all of a user’s various devices.</p>
</blockquote>

<p>Everyone knows that key-value storage is the secret to achieving Web Scale. That&#39;s just science.</p>

<p>Inject a healthy dose of Web Scale convenience into your app by incorporating <code>NSUbiquitousKeyValueStore</code> into your app:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span>
<span class="nl">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
<span class="p">{</span>
  <span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span>
      <span class="nl">addObserver:</span><span class="n">self</span>
         <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">ubiquitousKeyValueStoreDidChange</span><span class="o">:</span><span class="p">)</span>
             <span class="nl">name:</span><span class="n">NSUbiquitousKeyValueStoreDidChangeExternallyNotification</span>
           <span class="nl">object:</span><span class="p">[</span><span class="n">NSUbiquitousKeyValueStore</span> <span class="n">defaultStore</span><span class="p">]];</span>

  <span class="p">[[</span><span class="n">NSUbiquitousKeyValueStore</span> <span class="n">defaultStore</span><span class="p">]</span> <span class="n">synchronize</span><span class="p">];</span>

  <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">ubiquitousKeyValueStoreDidChange:</span><span class="p">(</span><span class="n">NSNotification</span><span class="o">*</span><span class="p">)</span><span class="nv">notification</span> <span class="p">{</span>
    <span class="n">NSUbiquitousKeyValueStore</span> <span class="o">*</span><span class="n">ubiquitousKeyValueStore</span> <span class="o">=</span> <span class="n">notification</span><span class="p">.</span><span class="n">object</span><span class="p">;</span>
    <span class="p">[</span><span class="n">ubiquitousKeyValueStore</span> <span class="n">synchronize</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<h2>Document Storage... in the Cloud!</h2>

<blockquote>
<p>Adopting iCloud document storage makes your app’s documents available on all of a user’s devices. Documents automatically implement most of the behavior expected of iCloud apps. Specifically, a document automatically ensures that local changes are safely coordinated with iCloud-originated changes.</p>
</blockquote>

<p>Leave filesystem-based storage to those poor terrestrial bound souls who haven&#39;t been raptured to the iCloud. Dropbox? Never heard of &#39;em.</p>

<p>Having documents reside entirely in application-specific cloud containers means less clutter in your digital life. Why should other applications be able to access documents anyway? Why would I want to use any more than a single app for any particular task?</p>

<p>They say seeing is believing, but iCloud is built on faith—that everything will be there next time you open Pages, Keynote, or TextEdit. Leave the Finder to play with its folders and <code>.DS_Store</code> files; we shall inherit the open skies of digital freedom.</p>

<h2>Core Data Storage... in the Cloud!</h2>

<blockquote>
<p>Adopting iCloud Core Data storage makes the content in a shoebox-style app (like iPhoto) or a database-style app (like Bento) available on all of a user’s devices. Each instance of your app, on each device attached to an iCloud account, maintains its own local Core Data store file. When data changes locally, Core Data writes change log files to your app’s default ubiquity container.</p>
</blockquote>

<p>Developers really love Core Data syncing over iCloud. Seriously, they just <a href="http://blackpixel.com/blog/2013/03/the-return-of-netnewswire.html">can&#39;t</a> <a href="https://twitter.com/SteveStreza/status/314494942489751553">stop</a> <a href="http://www.jumsoft.com/2013/01/response-to-sync-issues/">raving</a> <a href="http://inessential.com/2013/03/27/why_developers_shouldnt_use_icloud_sy">about</a> <a href="http://www.theverge.com/2013/3/26/4148628/why-doesnt-icloud-just-work">it</a>.</p>

<p>Just when you thought Core Data couldn&#39;t get simpler, iCloud once again redefines our expectations.</p>

<p>Every time your application receives a <code>NSPersistentStoreDidImportUbiquitousContentChangesNotification</code> is reminiscent of that excitement of seeing the FedEx truck pull up with your pre-ordered iPhone 5. &quot;This is the first day of the rest of my life&quot;, you&#39;ll think to yourself as you sign the proverbial confirmation slip of the package.</p>

<p>Sure, there&#39;s a chance that what you&#39;re signing is <em>actually</em> a repossession confirmation, and that the delivery guy will proceed to bust into your apartment and take everything you once owned, but at least you still have your new iPhone.</p>

<p>So it goes. Even an enlightened iLife is not without its risks.</p>

<hr>

<p>Life just seems to float by, now that iCloud is managing our digital existence. No longer do we have to think about whether we have all of the information we need to go about our day:</p>

<p>From the moment our iPhone wakes us up with the &quot;Marimba&quot; ringtone, to our daily commute with Siri talking us through our day, and a productive work day using iWork; from the walk to the gym, listening to Podcasts.app, and working out with iTunes Sync, until our last waking hours as we wind down the day with Game Center, Apple and iCloud makes every day special.</p>

<p>And with the iCloud Storage APIs, you too can add your application to that perfect routine of digitally-synced bliss.</p>

<p>No foolin&#39;.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 01 Apr 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:28:"http://nshipster.com/icloud/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://nshipster.com/icloud/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:52;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:10:"Search Kit";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:17686:"<p>NSHipsters love irony, right? How about this for irony:</p>

<p>There&#39;s this framework called <a href="https://developer.apple.com/library/mac/#documentation/UserExperience/Reference/SearchKit/Reference/reference.html">Search Kit</a>, which despite being insanely powerful and useful for finding information, is something that almost no one has ever heard of.</p>

<p>It&#39;s true! I&#39;d reckon there&#39;s a better chance that you have implemented your own search functionality from scratch than have ever even heard of Search Kit. (Heck, most people haven&#39;t even heard of <a href="https://developer.apple.com/library/mac/#documentation/Carbon/Reference/CoreServicesReferenceCollection/_index.html">Core Services</a>, its parent framework)</p>

<p>If only everyone knew that they could harness the same killer search functionality that Apple uses for their own applications...</p>

<hr>

<p>Search Kit is a C framework for searching and indexing content in human languages. It supports matching on phrase or partial word, including logical (<code>AND</code>, <code>OR</code>) and wildcard (<code>*</code>) operators, and can rank results by relevance. Search Kit also provides document summarization, which is useful for generating representative excerpts. And best of all: it&#39;s thread-safe.</p>

<p>All of the whiz-bang search-as-you-type features in Mac OS X—from Mail.app and Xcode to System Preferences and Spotlight—use Search Kit under the hood.</p>

<p>But to understand how Search Kit does its magic, it&#39;s important to explain some of the basics of Information Retrieval and Natural Language Processing.</p>

<blockquote>
<p>Be sure to check out <a href="https://developer.apple.com/library/mac/#documentation/UserExperience/Conceptual/SearchKitConcepts/searchKit_intro/searchKit_intro.html">Apple&#39;s Search Kit Programming Guide</a> for an authoritative explanation of the what&#39;s, why&#39;s, and how&#39;s of this great framework.</p>
</blockquote>

<h2>Search 101</h2>

<p>Quoth Apple:</p>

<blockquote>
<p>You have an information need. But before you can ask a question, you need someone or something to ask. That is, you need to establish who or what you will accept as an authority for an answer. So before you ask a question you need to define the target of your question.</p>
</blockquote>

<p>Finding the answer in a reasonable amount of time requires effort from the start. This is what that process looks like in general terms:</p>

<h3>Extract</h3>

<p>First, content must be extracted from a <a href="http://en.wikipedia.org/wiki/Text_corpus">corpus</a>. For a text document, this could involve removing any styling, formatting, or other meta-information. For a data record, such as an <code>NSManagedObject</code>, this means taking all of the salient fields and combining it into a representation.</p>

<p>Once extracted, the content is <a href="http://en.wikipedia.org/wiki/Tokenization">tokenized</a> for further processing.</p>

<h3>Filter</h3>

<p>In order to get the most relevant matches, it&#39;s important to filter out common, or &quot;stop&quot; words like articles, pronouns, and helping verbs, that don&#39;t really contribute to overall meaning.</p>

<h3>Reduce</h3>

<p>Along the same lines, words that mean basically the same thing should be reduced down into a common form. Morpheme clusters, such as grammatical conjugations like &quot;computer&quot;, &quot;computers&quot;, &quot;computed&quot;, and &quot;computing&quot;, for example, can all be simplified to be just &quot;compute&quot;, using a <a href="http://en.wikipedia.org/wiki/Stemming">stemmer</a>. Synonyms, likewise, can be lumped into a common entry using a thesaurus lookup.</p>

<h3>Index</h3>

<p>The end result of extracting, filtering, and reducing content into an array of normalized tokens is to form an <a href="http://en.wikipedia.org/wiki/Inverted_index">inverted index</a>, such that each token points to its origin in the index.</p>

<p>After repeating this process for each document or record in the corpus until, each token can point to many different articles. In the process of searching, a query is mapped onto one or many of these tokens, retrieving the union of the articles associated with each token.</p>

<h2>Using Search Kit</h2>

<h3>Creating an Index</h3>

<p><code>SKIndexRef</code> is the central data type in Search Kit, containing all of the information needed to process and fulfill searches, and add information from new documents. Indexes can be persistent / file-based or ephemeral / in-memory. Indexes can either be created from scratch, or loaded from an existing file or data object—and once an index is finished being used, like many other C APIs, the index is closed.</p>

<h3>Adding Documents to an Index</h3>

<p><code>SKDocumentRef</code> is the data type associated with entries in the index. When a search is performed, documents (along with their context and relevance) are the results.</p>

<p>Each <code>SKDocumentRef</code> is associated with a URI.</p>

<p>For documents on the file system, the URI is simply the location of the file on disk:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSURL</span> <span class="o">*</span><span class="n">fileURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="n">fileURLWithPath</span><span class="o">:</span><span class="s">@&quot;/path/to/document&quot;</span><span class="p">];</span>
<span class="n">SKDocumentRef</span> <span class="n">document</span> <span class="o">=</span> <span class="n">SKDocumentCreateWithURL</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFURLRef</span><span class="p">)</span><span class="n">fileURL</span><span class="p">);</span>
</code></pre></div>
<p>For Core Data managed objects, the <code>NSManagedObjectID -URIRepresentation</code> can be used:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSURL</span> <span class="o">*</span><span class="n">objectURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">objectID</span> <span class="n">URIRepresentation</span><span class="p">];</span>
<span class="n">SKDocumentRef</span> <span class="n">document</span> <span class="o">=</span> <span class="n">SKDocumentCreateWithURL</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFURLRef</span><span class="p">)</span><span class="n">objectURL</span><span class="p">);</span>
</code></pre></div>
<blockquote>
<p>For any other kinds of data, it would be up to the developer to define a URI representation.</p>
</blockquote>

<p>When adding the contents of a <code>SKDocumentRef</code> to an <code>SKIndexRef</code>, the text can either be specified manually:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="s">@&quot;Lorem ipsum dolar sit amet&quot;</span>
<span class="n">SKIndexAddDocumentWithText</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">document</span><span class="p">,</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFStringRef</span><span class="p">)</span><span class="n">string</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</code></pre></div>
<p>...or collected automatically from a file:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">mimeTypeHint</span> <span class="o">=</span> <span class="s">@&quot;text/rtf&quot;</span>
<span class="n">SKIndexAddDocument</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">document</span><span class="p">,</span> <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFStringRef</span><span class="p">)</span><span class="n">mimeTypeHint</span><span class="p">,</span> <span class="nb">true</span><span class="p">);</span>
</code></pre></div>
<p>To change the way a file-based document&#39;s contents are processed, properties can be defined when creating the index:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSSet</span> <span class="o">*</span><span class="n">stopwords</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSet</span> <span class="n">setWithObjects</span><span class="o">:</span><span class="s">@&quot;all&quot;</span><span class="p">,</span> <span class="s">@&quot;and&quot;</span><span class="p">,</span> <span class="s">@&quot;its&quot;</span><span class="p">,</span> <span class="s">@&quot;it&#39;s&quot;</span><span class="p">,</span> <span class="s">@&quot;the&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>

<span class="n">NSDictionary</span> <span class="o">*</span><span class="n">properties</span> <span class="o">=</span> <span class="p">@{</span>
  <span class="s">@&quot;kSKStartTermChars&quot;</span><span class="o">:</span> <span class="s">@&quot;&quot;</span><span class="p">,</span> <span class="c1">// additional starting-characters for terms</span>
  <span class="s">@&quot;kSKTermChars&quot;</span><span class="o">:</span> <span class="s">@&quot;-_@.&#39;&quot;</span><span class="p">,</span> <span class="c1">// additional characters within terms</span>
  <span class="s">@&quot;kSKEndTermChars&quot;</span><span class="o">:</span> <span class="s">@&quot;&quot;</span><span class="p">,</span>   <span class="c1">// additional ending-characters for terms</span>
  <span class="s">@&quot;kSKMinTermLength&quot;</span><span class="o">:</span> <span class="p">@(</span><span class="mi">3</span><span class="p">),</span>
  <span class="s">@&quot;kSKStopWords&quot;</span><span class="o">:</span><span class="n">stopwords</span>
<span class="p">};</span>

<span class="n">SKIndexRef</span> <span class="n">index</span> <span class="o">=</span> <span class="n">SKIndexCreateWithURL</span><span class="p">((</span><span class="n">CFURLRef</span><span class="p">)</span><span class="n">url</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">kSKIndexInverted</span><span class="p">,</span> <span class="p">(</span><span class="n">CFDictionaryRef</span><span class="p">)</span><span class="n">properties</span><span class="p">);</span>
</code></pre></div>
<h3>Searching</h3>

<p><code>SKSearchRef</code> is the data type constructed to perform a search on an <code>SKIndexRef</code>. It contains a reference to the index, a query string, and a set of options:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">query</span> <span class="o">=</span> <span class="s">@&quot;kind of blue&quot;</span><span class="p">;</span>
<span class="n">SKSearchOptions</span> <span class="n">options</span> <span class="o">=</span> <span class="n">kSKSearchOptionDefault</span><span class="p">;</span>
<span class="n">SKSearchRef</span> <span class="n">search</span> <span class="o">=</span> <span class="n">SKSearchCreate</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="p">(</span><span class="n">CFStringRef</span><span class="p">)</span><span class="n">query</span><span class="p">,</span> <span class="n">options</span><span class="p">);</span>
</code></pre></div>
<p><code>SKSearchOptions</code> is a bitmask with the following possible values:</p>

<blockquote>
<ul>
<li><code>kSKSearchOptionDefault</code>: Default search options include:

<ul>
<li>Relevance scores will be computed</li>
<li>Spaces in a query are interpreted as Boolean AND operators.</li>
<li>Do not use similarity searching.</li>
</ul></li>
</ul>
</blockquote>

<p>These options can be specified individually as well:</p>

<blockquote>
<ul>
<li><code>kSKSearchOptionNoRelevanceScores</code>: This option saves time during a search by suppressing the computation of relevance scores.</li>
<li><code>kSKSearchOptionSpaceMeansOR</code>: This option alters query behavior so that spaces are interpreted as Boolean OR operators.</li>
<li><code>kSKSearchOptionFindSimilar</code>: This option alters query behavior so that Search Kit returns references to documents that are similar to an example text string. When this option is specified, Search Kit ignores all query operators.</li>
</ul>
</blockquote>

<p>Putting this all together is <code>SKIndexCopyDocumentURLsForDocumentIDs</code>, which performs the search and fills arrays with the results. Iterating through the range of found matches provides access to the document URL and relevance score (if calculated):</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSUInteger</span> <span class="n">limit</span> <span class="o">=</span> <span class="p">...;</span> <span class="c1">// Maximum number of results</span>
<span class="n">NSTimeInterval</span> <span class="n">time</span> <span class="o">=</span> <span class="p">...;</span> <span class="c1">// Maximum time to get results, in seconds</span>
<span class="n">SKDocumentID</span> <span class="n">documentIDs</span><span class="p">[</span><span class="n">limit</span><span class="p">];</span>
<span class="n">CFURLRef</span> <span class="n">urls</span><span class="p">[</span><span class="n">limit</span><span class="p">];</span>
<span class="kt">float</span> <span class="n">scores</span><span class="p">[</span><span class="n">limit</span><span class="p">];</span>
<span class="n">CFIndex</span> <span class="n">count</span><span class="p">;</span>
<span class="n">Boolean</span> <span class="n">hasResult</span> <span class="o">=</span> <span class="n">SKSearchFindMatches</span><span class="p">(</span><span class="n">search</span><span class="p">,</span> <span class="n">limit</span><span class="p">,</span> <span class="n">documentIDs</span><span class="p">,</span> <span class="n">scores</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">count</span><span class="p">);</span>

<span class="n">SKIndexCopyDocumentURLsForDocumentIDs</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">foundCount</span><span class="p">,</span> <span class="n">documentIDs</span><span class="p">,</span> <span class="n">urls</span><span class="p">);</span>

<span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">mutableResults</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
<span class="p">[[</span><span class="n">NSIndexSet</span> <span class="n">indexSetWithIndexesInRange</span><span class="o">:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">count</span><span class="p">)]</span> <span class="n">enumerateIndexesUsingBlock</span><span class="o">:^</span><span class="p">(</span><span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">CFURLRef</span> <span class="n">url</span> <span class="o">=</span> <span class="n">urls</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
    <span class="kt">float</span> <span class="n">relevance</span> <span class="o">=</span> <span class="n">scores</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>

    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;- %@: %f&quot;</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">relevance</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">objectID</span><span class="p">)</span> <span class="p">{</span>
      <span class="p">[</span><span class="n">mutableResults</span> <span class="n">addObject</span><span class="o">:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="n">url</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="n">CFRelease</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
<span class="p">}];</span>
</code></pre></div>
<blockquote>
<p>For more examples of Search Kit in action, be sure to check out <a href="https://github.com/indragiek">Indragie Karunaratne&#39;s</a> project, <a href="https://github.com/indragiek/SNRSearchIndex">SNRSearchIndex</a>.</p>
</blockquote>

<hr>

<p>And so this article becomes yet another document in the corpus we call the Internet. By pointing to Search Kit, and explaining even the briefest of its features, this—the strings of tokens you read at this very moment—are (perhaps) making it easier for others to find Search Kit.</p>

<p>...and it&#39;s a good thing, too, because Search Kit is a wonderful and all-too-obscure framework, which anyone building a content-based system would do well to investigate.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 25 Mar 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:32:"http://nshipster.com/search-kit/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:32:"http://nshipster.com/search-kit/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:53;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:17:"C Storage Classes";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:10209:"<p>It&#39;s time, once again, to take a few steps back from the world of Objective-C, and look at some underlying C language features. Hold onto your fedoras, ladies &amp; gents, as we dive into C storage classes in this week&#39;s edition of NSHipster.</p>

<hr>

<p>In C, the <em>scope</em> and <em>lifetime</em> of a variable or function within a program is determined by its <em>storage class</em>. Each variable has a <em>lifetime</em>, or the context in which they store their value. Functions, along with variables, also exist within a particular <em>scope</em>, or visibility, which dictates which parts of a program know about and can access them.</p>

<p>There are 4 storage classes in C:</p>

<ul>
<li><code>auto</code></li>
<li><code>register</code></li>
<li><code>static</code></li>
<li><code>extern</code></li>
</ul>

<p>At least a few of these will look familiar to anyone who has done a cursory amount of Objective-C programming. Let&#39;s go into more detail with each one:</p>

<h2><code>auto</code></h2>

<p>There&#39;s a good chance you&#39;ve never seen this keyword in the wild. That&#39;s because <code>auto</code> is the default storage class, and therefore doesn&#39;t need to be explicitly used often.</p>

<p>Automatic variables have memory automatically allocated when a program enters a block, and released when the program leaves that block. Access to automatic variables is limited to only the block in which they are declared, as well as any nested blocks.</p>

<h2><code>register</code></h2>

<p>Most Objective-C programmers probably aren&#39;t familiar with <code>register</code> either, as it&#39;s just not widely used in the <code>NS</code> world.</p>

<p><code>register</code> behaves just like <code>auto</code>, except that instead of being allocated onto the stack, they are stored in a <a href="http://en.wikipedia.org/wiki/Processor_register">register</a>. </p>

<p>Registers offer faster access than RAM, but because of the complexities of memory management, putting variables in registers does not guarantee a faster program—in fact, it may very well end up slowing down execution by taking up space on the register unnecessarily. As it were, using <code>register</code> is actually just a <em>suggestion</em> to the compiler to store the variable in the register; implementations may choose whether or not to honor this.</p>

<p><code>register</code>&#39;s lack of popularity in Objective-C is instructive: it&#39;s probably best not to bother with it, as it&#39;s much more likely to cause a headache than speed up your app in any noticeable way.</p>

<h2><code>static</code></h2>

<p>Finally, one that everyone&#39;s sure to recognize: <code>static</code>.</p>

<p>As a keyword, <code>static</code> gets used in a lot of different, incompatible ways, so it can be confusing to figure out exactly what it means in every instance. When it comes to storage classes, <code>static</code> means one of two things.</p>

<ol>
<li>A <code>static</code> variable inside a method or function retains its value between invocations.</li>
<li>A <code>static</code> variable declared globally can be called by any function or method, so long as those functions appear in the same file as the <code>static</code> variable. The same goes for <code>static</code> functions.</li>
</ol>

<h3>Static Singletons</h3>

<p>A common pattern in Objective-C is the <code>static</code> singleton, wherein a statically-declared variable is initialized and returned in either a function or class method. <code>dispatch once</code> is used to guarantee that the variable is initialized <em>exactly</em> once in a thread-safe manner:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">sharedInstance</span> <span class="p">{</span>
  <span class="k">static</span> <span class="kt">id</span> <span class="n">_sharedInstance</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
  <span class="k">static</span> <span class="kt">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
  <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
      <span class="n">_sharedInstance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
  <span class="p">});</span>

  <span class="k">return</span> <span class="n">_sharedInstance</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>The singleton pattern is useful for creating objects that are shared across the entire application, such as an HTTP client or a notification manager, or objects that may be expensive to create, such as formatters.</p>

<h2><code>extern</code></h2>

<p>Whereas <code>static</code> makes functions and variables globally visible within a particular file, <code>extern</code> makes them visible globally to <em>all files</em>.</p>

<p>Global variables are not a great idea, generally speaking. Having no constraints on how or when state can be mutated is just asking for impossible-to-debug bugs. That said, there are two common and practical uses for <code>extern</code> in Objective-C.</p>

<h3>Global String Constants</h3>

<p>Any time your application uses a string constant with a non-linguistic value in a public interface, it should declare it as an external string constant. This is especially true of keys in <code>userInfo</code> dictionaries, <code>NSNotification</code> names, and <code>NSError</code> domains.</p>

<p>The pattern is to declare an <code>extern</code> <code>NSString * const</code> in a public header, and define that <code>NSString * const</code> in the implementation:</p>

<h4>AppDelegate.h</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">extern</span> <span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">kAppErrorDomain</span><span class="p">;</span>
</code></pre></div>
<h4>AppDelegate.m</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">kAppErrorDomain</span> <span class="o">=</span> <span class="s">@&quot;com.example.yourapp.error&quot;</span><span class="p">;</span>
</code></pre></div>
<p>It doesn&#39;t particularly matter what the value of the string is, so long as it&#39;s unique. Using a string constant establishes a strict contract, that the constant variable is used instead of the string&#39;s literal value itself.</p>

<h3>Public Functions</h3>

<p>Some APIs may wish to expose helper functions publicly. For auxiliary concerns and state-agnostic procedures, functions are a great way to encapsulate these behaviors—and if they&#39;re particularly useful, it may be worth making them available globally.</p>

<p>The pattern follows the same as in the previous example:</p>

<h4>TransactionStateMachine.h</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">typedef</span> <span class="nf">NS_ENUM</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">,</span> <span class="n">TransactionState</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">TransactionOpened</span><span class="p">,</span>
    <span class="n">TransactionPending</span><span class="p">,</span>
    <span class="n">TransactionClosed</span><span class="p">,</span>
<span class="p">};</span>

<span class="k">extern</span> <span class="n">NSString</span> <span class="o">*</span> <span class="nf">NSStringFromTransactionState</span><span class="p">(</span><span class="n">TransactionState</span> <span class="n">state</span><span class="p">);</span>
</code></pre></div>
<h4>TransactionStateMachine.m</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span> <span class="nf">NSStringFromTransactionState</span><span class="p">(</span><span class="n">TransactionState</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">TransactionOpened</span>:
      <span class="k">return</span> <span class="s">@&quot;Opened&quot;</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">TransactionPending</span>:
      <span class="k">return</span> <span class="s">@&quot;Pending&quot;</span><span class="p">;</span>
    <span class="k">case</span> <span class="n">TransactionClosed</span>:
      <span class="k">return</span> <span class="s">@&quot;Closed&quot;</span><span class="p">;</span>
    <span class="nl">default:</span>
      <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>
<hr>

<p>To understand anything is to make sense of its context. What we may see as obvious and self-evident, is all but unknown to someone without our frame of reference. Our inability to truly understand or appreciate the differences in perspective and information between ourselves and others is perhaps our most basic shortcoming.</p>

<p>That is why, in our constructed logical universe of 0&#39;s and 1&#39;s, we take such care to separate contexts, and structure our assumptions based on these explicit rules. C storage classes are essential to understanding how a program operates. Without them, we are left to develop as one might walk on egg shells. So take heed of these simple rules of engagement and go forth to code with confidence.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 18 Mar 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:39:"http://nshipster.com/c-storage-classes/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:39:"http://nshipster.com/c-storage-classes/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:54;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:12:"UIAppearance";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:9201:"<p>Style vs. Substance.
Message vs. Medium.
Rhetoric vs. Dialectic.</p>

<p>Is beauty merely skin deep, or is it somehow informed by deeper truths?
What does it mean for something to possess good design?
Are aesthetic judgments relative, or absolute?</p>

<p>These are deep questions that have been pondered by philosophers, artists, and makers alike for millennia.</p>

<p>And while we all continue our search for beauty and understanding in the universe, the app marketplace has been rather clear on this subject:</p>

<p><strong>Users will pay a premium for good-looking software.</strong></p>

<p>When someone purchases an iPhone, they are buying into Apple&#39;s philosophy that things that work well should look good, too. The same goes for when we choose to develop for iOS—a sloppy UI reflects poorly on the underlying code.</p>

<p>It used to be that even trivial UI customization on iOS required AppStore-approval-process-taunting ju-ju like method swizzling. Fortunately, with iOS 5, developers were given an easier way: <code>UIAppearance</code>.</p>

<hr>

<p><code>UIAppearance</code> allows the appearance of views and controls to be consistently defined across the entire application.</p>

<p>In order to have this work within the existing structure of UIKit, Apple devised a rather clever solution: <code>UIAppearance</code> is a protocol that returns a proxy that will forward any configuration to instances of a particular class. Why a proxy instead of a property or method on <code>UIView</code> directly? Because there are non-<code>UIView</code> objects like <code>UIBarButtonItem</code> that render their own composite views.
Appearance can be customized for all instances, or scoped to particular view hierarchies:</p>

<blockquote>
<ul>
<li><code>+appearance</code>: Returns the appearance proxy for the receiver.</li>
<li><code>+appearanceWhenContainedIn:(Class &lt;UIAppearanceContainer&gt;)ContainerClass,...</code>: Returns the appearance proxy for the receiver in a given containment hierarchy.</li>
</ul>

<p>To customize the appearance of all instances of a class, you use <code>appearance</code> to get the appearance proxy for the class. For example, to modify the tint color for all instances of UINavigationBar:</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[[</span><span class="n">UINavigationBar</span> <span class="n">appearance</span><span class="p">]</span> <span class="n">setTintColor</span><span class="o">:</span><span class="n">myColor</span><span class="p">];</span>
</code></pre></div>
<blockquote>
<p>To customize the appearances for instances of a class when contained within an instance of a container class, or instances in a hierarchy, you use appearanceWhenContainedIn: to get the appearance proxy for the class:</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[[</span><span class="n">UIBarButtonItem</span> <span class="n">appearanceWhenContainedIn</span><span class="o">:</span><span class="p">[</span><span class="n">UINavigationBar</span> <span class="n">class</span><span class="p">],</span> <span class="nb">nil</span><span class="p">]</span>
       <span class="nl">setTintColor:</span><span class="n">myNavBarColor</span><span class="p">];</span>
<span class="p">[[</span><span class="n">UIBarButtonItem</span> <span class="n">appearanceWhenContainedIn</span><span class="o">:</span><span class="p">[</span><span class="n">UINavigationBar</span> <span class="n">class</span><span class="p">],</span> <span class="p">[</span><span class="n">UIPopoverController</span> <span class="n">class</span><span class="p">],</span> <span class="nb">nil</span><span class="p">]</span>
        <span class="nl">setTintColor:</span><span class="n">myPopoverNavBarColor</span><span class="p">];</span>
<span class="p">[[</span><span class="n">UIBarButtonItem</span> <span class="n">appearanceWhenContainedIn</span><span class="o">:</span><span class="p">[</span><span class="n">UIToolbar</span> <span class="n">class</span><span class="p">],</span> <span class="nb">nil</span><span class="p">]</span>
        <span class="nl">setTintColor:</span><span class="n">myToolbarColor</span><span class="p">];</span>
<span class="p">[[</span><span class="n">UIBarButtonItem</span> <span class="n">appearanceWhenContainedIn</span><span class="o">:</span><span class="p">[</span><span class="n">UIToolbar</span> <span class="n">class</span><span class="p">],</span> <span class="p">[</span><span class="n">UIPopoverController</span> <span class="n">class</span><span class="p">],</span> <span class="nb">nil</span><span class="p">]</span>
        <span class="nl">setTintColor:</span><span class="n">myPopoverToolbarColor</span><span class="p">];</span>
</code></pre></div>
<h2>Determining Which Properties Work With <code>UIAppearance</code></h2>

<p>One major downside to <code>UIAppearance</code>&#39;s proxy approach is that it&#39;s difficult to know which selectors are compatible.</p>

<del>Because <tt>+appearance</tt> returns an <tt>id</tt>, Xcode can't provide any code-completion information. This is a major source of confusion and frustration with this feature.</del>

<ins>As of iOS 7, UIAppearance now returns <a href="http://nshipster.com/instancetype/"><tt>instancetype</tt></a>, which allows for code completion to work as expected. Huzzah!</ins>

<p>In order to find out what methods work with <code>UIAppearance</code>, you have to <a href="http://stackoverflow.com/questions/9424112/what-properties-can-i-set-via-an-uiappearance-proxy">look at the headers</a>:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">$ cd /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/
  Developer/SDKs/iPhoneOS*.sdk/System/Library/Frameworks/UIKit.framework/Headers
$ grep -H UI_APPEARANCE_SELECTOR ./* | sed &#39;s/ __OSX_AVAILABLE_STARTING(__MAC_NA,__IPHONE_5_0) UI_APPEARANCE_SELECTOR;//&#39;
</code></pre></div>
<p><code>UIAppearance</code> looks for the <code>UI_APPEARANCE_SELECTOR</code> macro in method signatures. Any method with this annotation can be used with the <code>appearance</code> proxy.</p>

<p>For your convenience, <a href="https://gist.github.com/mattt/5135521">here is the list of properties as of iOS 7.0</a></p>

<h2>Implementing <code>&lt;UIAppearance&gt;</code> in Custom UIView Subclasses</h2>

<p>Much like how <a href="http://nshipster.com/nslocalizedstring/"><code>NSLocalizedString</code></a> and <a href="http://nshipster.com/pragma/"><code>#pragma</code></a> are marks of quality in Objective-C code, having custom UI classes conform to <code>UIAppearance</code> is not only a best-practice, but it demonstrates a certain level of care being put into its implementation.</p>

<p><a href="https://twitter.com/steipete">Peter Steinberger</a> has <a href="http://petersteinberger.com/blog/2013/uiappearance-for-custom-views/">this great article</a>, which describes some of the caveats about implementing <code>UIAppearance</code> in custom views. It&#39;s a must-read for anyone who aspires to greatness in their open source UI components.</p>

<h2>Alternatives</h2>

<p>Another major shortcoming of <code>UIAppearance</code> is that style rules are <em>imperative</em>, rather than <em>declarative</em>. That is, styling is applied at runtime in code, rather than being interpreted from a list of style rules.</p>

<p>Yes, if there&#39;s one idea to steal from web development, it&#39;s the separation of content and presentation. Say what you will about CSS, but stylesheets are <em>amazing</em>.</p>

<p>Stylesheet enthusiasts on iOS now have some options. <a href="http://www.pixate.com">Pixate</a> is a commercial framework that uses CSS to style applications. <a href="https://github.com/tombenner/nui">NUI</a>, an open-source project by <a href="https://github.com/tombenner">Tom Benner</a>, does much the same with a CSS/SCSS-like language. Another open source project along the same lines is <a href="https://github.com/robertwijas/UISS">UISS</a> by <a href="https://github.com/robertwijas">Robert Wijas</a>, which allows <code>UIAppearance</code> rules to be read from JSON.</p>

<hr>

<p>Cocoa developers have a long history of obsessing about visual aesthetics, and have often gone to extreme ends to achieve their desired effects. Recall the <a href="http://en.wikipedia.org/wiki/Delicious_Generation">Delicious Generation</a> of Mac developers, and applications like <a href="http://discoapp.com">Disco</a>, which went so far as to <a href="http://www.youtube.com/watch?v=8Dwi47XOqwI">emit virtual smoke when burning a disc</a>.</p>

<p>This spirit of dedication to making things look good is alive and well in iOS. As a community and as an ecosystem, we have relentlessly pushed the envelope in terms of what users should expect from their apps. And though this makes our jobs more challenging, it makes the experience of developing for iOS all the more enjoyable.</p>

<p>Settle for nothing less than the whole package.
Make your apps beautiful from interface to implementation.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 11 Mar 2013 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:34:"http://nshipster.com/uiappearance/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:34:"http://nshipster.com/uiappearance/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:55;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:8:"Back Row";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:10169:"<p>For years, many have predicted the announcement of an Apple TV SDK. We all know it&#39;s coming. It has to. And it will be amazing when it happens... whenever that is.</p>

<p>Everything is in place for Apple to kick-start the next generation of television, completely leap-frogging the current, pathetic crop of &quot;smart TVs&quot; like the iPhone did with its &quot;smart phone&quot; predecessors. All they need to do is open up the ecosystem.</p>

<p>But rather than simply wait for the future, we can take matters into our own hands, with <a href="https://github.com/nygard/class-dump">class-dump</a> and some reverse-engineering chutzpah.</p>

<p>Voila! <a href="http://appletv.ericiii.net/5.2/annotated.php">A class dump of the Apple TV private framework headers</a></p>

<p>That&#39;s right: this edition of NSHipster covers a topic so obscure, <em>it doesn&#39;t even officially exist</em>.</p>

<hr>

<p>Back Row is a private framework used in the Apple TV user experience. Its name is a reference to <a href="http://en.wikipedia.org/wiki/Front_Row_(software)">Front Row</a>, an application included in Mac OS X 10.4 – 10.6 that paired with the Apple Remote to transform the Mac into a couch-friendly media center.</p>

<p>The original Apple TV could be described as a &quot;short Mac Mini&quot;, which ran a modified version of Front Row on a stripped-down build of Mac OS X. It was little more than an iTunes remote, streaming content from a shared iTunes library on a separate computer.</p>

<p>The second generation of the device took a smaller form factor, shifting its focus from media storage and management to on-demand streaming. The second generation Apple TV user interface reflected this in both its design and implementation. BackRow was ported from OS X to iOS, as it transcended its original role coordinating iTunes libraries to become an extensible platform for streaming media appliances.</p>

<h2>Back Row &amp; UIKit</h2>

<p>Back Row (name prefix: <code>BR</code>) bears a striking resemblance to UIKit, with many of the familiar metaphors and conventions of iOS development.</p>

<p>Here&#39;s a brief list of some Back Row classes &amp; protocols and their UIKit equivalents:</p>

<table>
  <thead>
    <tr>
      <th>Back Row</th>
      <th>UIKit</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><tt>&lt;BRResponder&gt;</tt></td>
      <td><tt>&lt;UIResponder&gt;</tt></td>
    </tr>
    <tr>
      <td><tt>&lt;BRAppliance&gt;</tt></td>
      <td><tt>&lt;UIApplication&gt;</tt></td>
    </tr>
    <tr>
      <td><tt>BRController</tt></td>
      <td><tt>UIViewController</tt></td>
    </tr>
    <tr>
      <td><tt>BRMenuController</tt></td>
      <td><tt>UITableViewController</tt></td>
    </tr>
    <tr>
      <td><tt>BRControllerStack</tt></td>
      <td><tt>UINavigationController</tt></td>
    </tr>
    <tr>
      <td><tt>BRGridView</tt></td>
      <td><tt>UICollectionView</tt></td>
    </tr>
    <tr>
      <td><tt>BRListView</tt></td>
      <td><tt>UITableView</tt></td>
    </tr>
  </tbody>
</table>

<h2>Apple TV Appliance Structure</h2>

<p><img src="http://nshipster.s3.amazonaws.com/backrow-home-screen.jpg" alt="Apple TV Home Screen"></p>

<p>In the current Apple TV interface, the home screen contains a grid of rectangular icons, similar to the home screen on iOS. Each icon corresponds to an <em>appliance</em>.</p>

<p>Why an appliance and not an application? An appliance is more limited in what it can do as compared to an application. On iPhone or iPad, applications range from social media clients and photo tools to games and musical instruments. Whereas on Apple TV, an appliance consists of a series of remote-friendly menus, lists, and grids, which ultimately lead to media playback of some form. When it comes to appliances, (audio / video) content is king.</p>

<p>When an appliance launches, it displays a list of <code>BRApplianceCategory</code> items. Each category has its own name, identifier, and preferred ordering. When a category is selected, the appliance calls <code>- controllerForIdentifier:args:</code>, which returns a <code>BRController</code> object.</p>

<p>An appliance also has an optional <code>topShelfController</code>, which is what displays at the top of the home screen when the app is highlighted.</p>

<p>Pushing and popping controllers is managed by a shared <code>BRControllerStack</code>. When a controller is selected with in a list, it is pushed onto the stack. When the user presses the Menu button, the stack is popped.</p>

<p><img src="http://nshipster.s3.amazonaws.com/backrow-youtube.jpg" alt="Apple TV YouTube"></p>

<p>A typical controller consists of a menu list on the right, with some kind of complimentary view on the left.</p>

<p>On top-level controllers, this sometimes takes the form of a <code>BRMarqueeStack</code>, which animates a Cover-Flow-style sequence of preview images for each of the controllers.</p>

<p>For controllers listing media that can be played, the complimentary view usually shows a preview image, along with meta data in a <code>BRMetadataControl</code>, such as runtime, date created, and other relevant information.</p>

<p><img src="http://nshipster.s3.amazonaws.com/backrow-movie.jpg" alt="Apple TV Movie"></p>

<p>iTunes store controllers also use a horizontally-stacked layout, with media information at the top, with related titles listed below.</p>

<h2>Points of Interest</h2>

<p>Diving into the class dump of the Apple TV frameworks reveals a treasure trove of interesting tidbits. With only undocumented header files to go by, there&#39;s still a lot of mystery to what all&#39;s in these private frameworks, or how they fit together. However a thoughtful analysis of class and method names offers some workable clues into their inter-workings.</p>

<p>Here are some of the more interesting parts of the Back Row framework headers (again, all of this is complete speculation):</p>

<ul>
<li><a href="http://appletv.ericiii.net/5.2/protocol_b_r_image_proxy-p.php"><code>BRURLImageProxy</code></a>: A protocol that encapsulates the process of loading and displaying images at various dimensions.</li>
<li><a href="http://appletv.ericiii.net/5.2/interface_b_r_keyboard.php"><code>BRKeyboard</code></a>: It&#39;s always fascinating to see how Apple architects controls. Keyboards populate and manage interactions with the grid view of character and action keys, and are divided into classes for Roman and Japanese scripts.</li>
<li><a href="http://appletv.ericiii.net/5.2/interface_b_r_state_machine.php"><code>BRStateMachine</code></a>: No other Apple frameworks expose a class for state machines. <a href="http://appletv.ericiii.net/5.2/interface_l_t_a_v_lease_agent.php"><code>LATVLeaseAgent</code></a> is a subclass in the <code>AppleTV</code> framework that appears to negotiate the terms of iTunes movie rentals.</li>
<li><a href="http://appletv.ericiii.net/5.2/interface_b_r_mapping_dictionary.php"><code>BRMappingDictionary</code></a>: A new and useful-looking collection class that functions as an <code>NSMutableDictionary</code>, but also allows for an <code>NSValueTransformer</code> to be set for each key (<code>-transformedValueForKey:forObject:</code> in addition to <code>-valueForKey:</code>)</li>
<li><a href="http://appletv.ericiii.net/5.2/interface_b_r_merchant.php"><code>BRMerchant</code></a>: What you might expect in terms of a class representing a store client, with some <a href="http://appletv.ericiii.net/5.2/interface_b_r_merchant.php#pub-static-methods">interesting class methods</a>. <code>itms</code> is in reference to the iTunes Music Store, but what&#39;s <code>sedona</code> and <code>flagstaff</code>? They&#39;re probably codewords for streaming services that fall under the umbrella of the iTunes store.</li>
<li><a href="http://appletv.ericiii.net/5.2/protocol_b_r_control_factory-p.php"><code>&lt;BRControlFactory&gt;</code></a> <a href="http://appletv.ericiii.net/5.2/protocol_b_r_metadata_populator-p.php"><code>&lt;BRMetadataPopulator&gt;</code></a> &amp; <a href="http://appletv.ericiii.net/5.2/interface_b_r_control_mediator.php"><code>BRControlMediator</code></a>: Factories, Populators, and Mediators are not commonly seen design patterns in Apple frameworks, although they are described in the <a href="https://developer.apple.com/library/mac/#documentation/cocoa/conceptual/CocoaFundamentals/CocoaDesignPatterns/CocoaDesignPatterns.html">Cocoa Fundamentals Guide</a>.</li>
</ul>

<h2>Building Your Own Apple TV App</h2>

<p>In the immortal words of Jeff Goldblum: <a href="http://www.youtube.com/watch?v=SkWeMvrNiOM">&quot;Life finds a way&quot;</a>.</p>

<p>Undeterred by the litigious shadow of Apple Inc., nor the undocumented wilds of a private API, a cadre of jail-breaking homesteaders have cracked the nut on Apple TV development with promising results.</p>

<p>One of the most polished among them is <a href="https://github.com/alloy/UitzendingGemist-ATV2">UitzendingGemist</a> led by none other than <a href="https://github.com/alloy">Eloy Durán</a> of <a href="https://github.com/CocoaPods">CocoaPods</a> fame, along with <a href="https://github.com/lechium">Kevin Bradley</a> and <a href="https://github.com/mgile">Michael Gile</a>.</p>

<p>As you can see from <a href="http://cl.ly/2p2V0W3W0n3m">this video of an early version</a>, you can run your very own applications on a jail-broken Apple TV (OS 5.0.1 or compatible). The code is relatively straightforward, fetching a catalog of media files from the Dutch public broadcasting site <a href="http://www.uitzendinggemist.nl">UitzendingGemist.nl</a>, and playing them on demand.</p>

<hr>

<p>It&#39;s hard to say what it will take for Apple to open up the Apple TV ecosystem. Is it a matter of getting the APIs documented and ready for public use? Is there a process underway to refactor Back Row into UIKit? Or is everything pretty much ready, and it&#39;s just a matter of other business pieces falling into place?</p>

<p>Only time will tell.</p>

<p>In the meantime, you can get a head-start on what will almost certainly be a gold-rush on the scale of the first generation of iPhone apps.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 04 Mar 2013 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:29:"http://nshipster.com/backrow/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:29:"http://nshipster.com/backrow/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:56;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:18:"NSAssertionHandler";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:11657:"<p>&quot;When at first you don&#39;t succeed, use an object-oriented injection point to override default exception handling.&quot; This is the sort of advice you would have learned at mother&#39;s knee if you were raised by <code>NSAssertionHandler</code>.</p>

<p>Programming incorporates numerous disciplines of human reasoning, from high-level discourse and semantics—the &quot;story&quot; we tell each other to explain how a system works—to the mathematical and philosophical machinery that underpins everything.</p>

<p>Assertions are a concept borrowed from classical logic. In logic, assertions are statements about propositions within a proof. In programming, assertions denote assumptions the programmer has made about the application at the place where they are declared.</p>

<p>When used in the capacity of preconditions and postconditions, which describe expectations about the state of the code at the beginning and end of execution of a method or function, assertions form a <a href="http://en.wikipedia.org/wiki/Design_by_contract">contract</a>. Assertions can also be used to enforce conditions at run-time, in order to prevent execution when certain preconditions fail.</p>

<p>Assertions are similar to <a href="http://en.wikipedia.org/wiki/Unit_testing">unit testing</a> in that they define expectations about the way code will execute. Unlike unit tests, assertions exist inside the program itself, and are thereby constrained to the context of the program. Because unit tests are fully independent, they have a much greater capacity to isolate and test certain behaviors, using tools like methods stubs and mock objects. Developers should use assertions and unit tests in combination and in reasonable quantity to test and define behavior in an application.</p>

<h2>Foundation Assertion Handling</h2>

<p>Objective-C combines C-style assertion macros with an object-oriented approach to intercepting and handling assertion failures. Namely, <code>NSAssertionHandler</code>:</p>

<blockquote>
<p>Each thread has its own assertion handler, which is an object of class <code>NSAssertionHandler</code>. When invoked, an assertion handler prints an error message that includes the method and class names (or the function name). It then raises an <code>NSInternalInconsistencyException</code> exception.</p>
</blockquote>

<p>Foundation <a href="https://gist.github.com/mattt/5031388#file-nsassertionhandler-m-L50-L56">defines</a> two pairs of assertion macros:</p>

<ul>
<li><code>NSAssert</code> / <code>NSCAssert</code></li>
<li><code>NSParameterAssert</code> / <code>NSCParameterAssert</code></li>
</ul>

<p>Foundation makes two distinctions in their assertion handler APIs that are both semantic and functional.</p>

<p>The first distinction is between a general assertion (<code>NSAssert</code>) and a parameter assertion (<code>NSParameterAssert</code>). As a rule of thumb, methods / functions should use <code>NSParameterAssert</code> / <code>NSCParameterAssert</code> statements at the top of methods to enforce any preconditions about the input values; in all other cases, use <code>NSAssert</code> / <code>NSCAssert</code>.</p>

<p>The second is the difference between C and Objective-C assertions: <code>NSAssert</code> should only be used in an Objective-C context (i.e. method implementations), whereas <code>NSCAssert</code> should only be used in a C context (i.e. functions).</p>

<ul>
<li>When a condition in <code>NSAssert</code> or <code>NSParameterAssert</code> fails, <code>-handleFailureInMethod:object:file:lineNumber:description:</code> is called in the assertion handler.</li>
<li>When a condition in <code>NSCAssert</code> or <code>NSCParameterAssert</code> fails, <code>-handleFailureInFunction:file:lineNumber:description:</code> is called in the assertion handler.</li>
</ul>

<p>Additionally, there are variations of <code>NSAssert</code> / <code>NSCAssert</code>, from <code>NSAssert1</code> ... <code>NSAssert5</code>, which take their respective number of arguments to use in a <code>printf</code>-style format string.</p>

<h2>Using NSAssertionHandler</h2>

<p>It&#39;s important to note that as of Xcode 4.2, <a href="http://stackoverflow.com/questions/6445222/ns-block-assertions-in-objective-c">assertions are turned off by default for release builds</a>, which is accomplished by defining the <code>NS_BLOCK_ASSERTIONS</code> macro. That is to say, when compiled for release, any calls to <code>NSAssert</code> &amp; co. are effectively removed.</p>

<p>And while Foundation assertion macros are extremely useful in their own right—even when just used in development—the fun doesn&#39;t have to stop there. <code>NSAssertionHandler</code> provides a way to gracefully handle assertion failures in a way that preserves valuable real-world usage information.</p>

<blockquote>
<p>That said, many seasoned Objective-C developers caution against actually using <code>NSAssertionHandler</code> in production applications. Foundation assertion handlers are something to understand and appreciate from a safe distance. <strong>Proceed with caution if you decide to use this in a shipping application.</strong></p>
</blockquote>

<p><code>NSAssertionHandler</code> is a straightforward class, with two methods to implement in your subclass: <code>-handleFailureInMethod:...</code> (called on a failed <code>NSAssert</code> / <code>NSParameterAssert</code>) and <code>-handleFailureInFunction:...</code> (called on a failed <code>NSCAssert</code> / <code>NSCParameterAssert</code>).</p>

<p><code>LoggingAssertionHandler</code> simply logs out the assertion failures, but those failures could also be logged to an external web service to be aggregated and analyzed, for example.</p>

<h3>LoggingAssertionHandler.h</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">LoggingAssertionHandler</span> : <span class="nc">NSAssertionHandler</span>
<span class="k">@end</span>
</code></pre></div>
<h3>LoggingAssertionHandler.m</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@implementation</span> <span class="nc">LoggingAssertionHandler</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">handleFailureInMethod:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">selector</span>
                       <span class="nl">object:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">object</span>
                         <span class="nl">file:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">fileName</span>
                   <span class="nl">lineNumber:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">line</span>
                  <span class="nl">description:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">format</span><span class="p">,</span> <span class="p">...</span>
<span class="p">{</span>
  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;NSAssert Failure: Method %@ for object %@ in %@#%i&quot;</span><span class="p">,</span> <span class="n">NSStringFromSelector</span><span class="p">(</span><span class="n">selector</span><span class="p">),</span> <span class="n">object</span><span class="p">,</span> <span class="n">fileName</span><span class="p">,</span> <span class="n">line</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">handleFailureInFunction:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">functionName</span>
                           <span class="nl">file:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">fileName</span>
                     <span class="nl">lineNumber:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">line</span>
                    <span class="nl">description:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">format</span><span class="p">,</span> <span class="p">...</span>
<span class="p">{</span>
  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;NSCAssert Failure: Function (%@) in %@#%i&quot;</span><span class="p">,</span> <span class="n">functionName</span><span class="p">,</span> <span class="n">fileName</span><span class="p">,</span> <span class="n">line</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">@end</span>
</code></pre></div>
<p>Each thread has the option of specifying an assertion handler. To have the <code>NSAssertionHandler</code> subclass start handling failed assertions, set it as the value for the <code>NSAssertionHandlerKey</code> key in the thread&#39;s <code>threadDictionary</code>.</p>

<p>In most cases, it will make sense to set your assertion handler on the current thread inside <code>-application:
didFinishLaunchingWithOptions:</code>.</p>

<h3>AppDelegate.m</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span>
<span class="nl">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
<span class="p">{</span>
  <span class="n">NSAssertionHandler</span> <span class="o">*</span><span class="n">assertionHandler</span> <span class="o">=</span> <span class="p">[[</span><span class="n">LoggingAssertionHandler</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
  <span class="p">[[[</span><span class="n">NSThread</span> <span class="n">currentThread</span><span class="p">]</span> <span class="n">threadDictionary</span><span class="p">]</span> <span class="n">setValue</span><span class="o">:</span><span class="n">assertionHandler</span>
                                                 <span class="nl">forKey:</span><span class="n">NSAssertionHandlerKey</span><span class="p">];</span>
  <span class="c1">// ...</span>

  <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<hr>

<p><code>NSAssertionHandler</code> reminds us of the best practices around articulating our expectations as programmers through assert statements.</p>

<p>But if we look deeper into <code>NSAssertionHandler</code>—and indeed, into our own hearts, there are lessons to be learned about our capacity for kindness and compassion; about our ability to forgive others, and to recover from our own missteps. We can&#39;t be right all of the time. We all make mistakes. By accepting limitations in ourselves and others, only then are we able to grow as individuals.</p>

<p>Or whatever.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 25 Feb 2013 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:40:"http://nshipster.com/nsassertionhandler/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:40:"http://nshipster.com/nsassertionhandler/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:57;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:13:"ReactiveCocoa";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:17874:"<p>Languages are living works. They are nudged and challenged and bastardized and mashed-up in a perpetual cycle of undirected and rapid evolution. Technologies evolve, requirements change, corporate stewards and open source community come and go; obscure dialects are vaulted to prominence on the shoulders of exciting new frameworks, and thrust into a surprising new context after a long period of dormancy.</p>

<p>Objective-C has a remarkable history spanning four acts in as many decades:</p>

<p><strong>In its 1<sup>st</sup> act</strong>, Objective-C was adopted as the language of NeXT, powering <a href="http://en.wikipedia.org/wiki/NeXTSTEP">NeXTSTEP</a> and <a href="http://en.wikipedia.org/wiki/Web_server#History">the world&#39;s first web server</a>.</p>

<p><strong>In its 2<sup>nd</sup> act</strong>, Objective-C positioned itself in the heart Apple&#39;s technology stack (after a prolonged turf war with Java) with Apple&#39;s acquisition of NeXT.</p>

<p><strong>In its 3<sup>rd</sup> act</strong>, Objective-C rose to unprecedented significance with the release of iOS, making it the most important language of mobile computing.</p>

<p><strong>Objective-C&#39;s 4<sup>th</sup> act takes us to the present day</strong>, with an influx of new iOS developers from the Ruby, Python, and Javascript communities sparking a revolution in open source participation. For the first time, Objective-C is being directly shaped and guided by the contributions of individuals outside of Apple.</p>

<p>Breaking from a tradition of covering Apple APIs exclusively, this edition of NSHipster will look at an open source project that exemplifies this brave new era for Objective-C: <a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a>.</p>

<hr>

<blockquote>
<p>For a complete look at ReactiveCocoa, refer to the project&#39;s <a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/README.md">README</a>, <a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/Documentation/FrameworkOverview.md">Framework Overview</a> and <a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/Documentation/DesignGuidelines.md">Design Guidelines</a>.</p>
</blockquote>

<p><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a> is an open source library that brings Functional Reactive Programming paradigm to Objective-C. It was created by <a href="https://github.com/joshaber">Josh Abernathy</a> &amp; <a href="https://github.com/jspahrsummers">Justin Spahr-Summers</a> in the development of <a href="http://mac.github.com">GitHub for Mac</a>. Last week, ReactiveCocoa reached a major milestone with its <a href="https://github.com/ReactiveCocoa/ReactiveCocoa/tree/v1.0.0">1.0 release</a>.</p>

<p><a href="http://en.wikipedia.org/wiki/Functional_reactive_programming">Functional Reactive Programming</a> (FRP) is a way of thinking about software in terms of transforming inputs to produce output continuously over time. <a href="http://blog.maybeapps.com/post/42894317939/input-and-output">Josh Abernathy frames the paradigm thusly</a>:</p>

<blockquote>
<p>Programs take input and produce output. The output is the result of doing something with the input. Input, transform, output, done.</p>

<p>The input is all the sources of action for your app. It&#39;s taps. It&#39;s keyboard events. It&#39;s timer triggers, GPS events, and web service responses. These things are all inputs. They all feed into the app, and the app combines them all in some way to produce a result: the output.</p>

<p>The output is often a change in the app&#39;s UI. A switch is toggled or a list gets a new item. Or it could be more than that. It could be a new file on the device&#39;s disk, or it could be an API request. These things are the outputs of the app.</p>

<p>But unlike the classic input/output design, this input and output happens more than once. It&#39;s not just a single input → work → output—the cycle continues while the app is open. The app is always consuming inputs and producing outputs based on them.</p>
</blockquote>

<p>To illustrate the difference between the conventional, imperative paradigm of Objective-C programming versus a functional reactive approach, consider the common example of validating a signup form:</p>

<h3>Conventional</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isFormValid</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">usernameField</span><span class="p">.</span><span class="n">text</span> <span class="n">length</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">emailField</span><span class="p">.</span><span class="n">text</span> <span class="n">length</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">passwordField</span><span class="p">.</span><span class="n">text</span> <span class="n">length</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
            <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">passwordField</span><span class="p">.</span><span class="n">text</span> <span class="n">isEqual</span><span class="o">:</span><span class="n">self</span><span class="p">.</span><span class="n">passwordVerificationField</span><span class="p">.</span><span class="n">text</span><span class="p">];</span>
<span class="p">}</span>

<span class="cp">#pragma mark - UITextFieldDelegate</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">textField:</span><span class="p">(</span><span class="n">UITextField</span> <span class="o">*</span><span class="p">)</span><span class="nv">textField</span>
<span class="nl">shouldChangeCharactersInRange:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">range</span>
<span class="nl">replacementString:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">string</span>
<span class="p">{</span>
    <span class="n">self</span><span class="p">.</span><span class="n">createButton</span><span class="p">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">isFormValid</span><span class="p">];</span>

    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>In the conventional example, logic is fragmented across different methods in the view controller, with calls to <code>self.createButton.enabled = [self isFormValid];</code> interspersed throughout delegate methods and view lifecycle callbacks.</p>

<p>Compare this with equivalent code using ReactiveCocoa:</p>

<h3>ReactiveCocoa</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">RACSignal</span> <span class="o">*</span><span class="n">formValid</span> <span class="o">=</span> <span class="p">[</span><span class="n">RACSignal</span>
  <span class="nl">combineLatest:</span><span class="p">@[</span>
    <span class="n">self</span><span class="p">.</span><span class="n">username</span><span class="p">.</span><span class="n">rac_textSignal</span><span class="p">,</span>
    <span class="n">self</span><span class="p">.</span><span class="n">emailField</span><span class="p">.</span><span class="n">rac_textSignal</span><span class="p">,</span>
    <span class="n">self</span><span class="p">.</span><span class="n">passwordField</span><span class="p">.</span><span class="n">rac_textSignal</span><span class="p">,</span>
    <span class="n">self</span><span class="p">.</span><span class="n">passwordVerificationField</span><span class="p">.</span><span class="n">rac_textSignal</span>
  <span class="p">]</span>
  <span class="nl">reduce:</span><span class="o">^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">username</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">email</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">password</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">passwordVerification</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">@([</span><span class="n">username</span> <span class="n">length</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">email</span> <span class="n">length</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">password</span> <span class="n">length</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">8</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">password</span> <span class="n">isEqual</span><span class="o">:</span><span class="n">passwordVerification</span><span class="p">]);</span>
  <span class="p">}];</span>

<span class="n">RAC</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">createButton</span><span class="p">.</span><span class="n">enabled</span><span class="p">)</span> <span class="o">=</span> <span class="n">formValid</span><span class="p">;</span>
</code></pre></div>
<p>Here, all of the logic for validating form input is contained in a single chain of logic and responsibility. Each time any of the text fields is updated, their inputs are reduced into a single boolean value, which automatically enables / disables the create button.</p>

<h2>Overview</h2>

<p>ReactiveCocoa is comprised of two major components: <a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/Documentation/FrameworkOverview.md#signals">signals</a> (<code>RACSignal</code>) and <a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/Documentation/FrameworkOverview.md#sequences">sequences</a> (<code>RACSequence</code>).</p>

<p>Both signals and sequences are kinds of <a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/Documentation/FrameworkOverview.md#streams">streams</a>, sharing many of the same operators. ReactiveCocoa has done well to abstract a wide scope of functionality into a semantically dense, consistent design: signals are a <em>push</em>-driven stream, and sequences are a <em>pull</em>-driven stream.</p>

<h3><code>RACSignal</code></h3>

<blockquote>
<ul>
<li><strong>Handling Asynchronous Or Event-driven Data Sources</strong>: Much of Cocoa programming is focused on reacting to user events or changes in application state.</li>
<li><strong>Chaining Dependent Operations</strong>: Dependencies are most often found in network requests, where a previous request to the server needs to complete before the next one can be constructed.</li>
<li><strong>Parallelizing Independent Work</strong>: Working with independent data sets in parallel and then combining them into a final result is non-trivial in Cocoa, and often involves a lot of synchronization.</li>
</ul>

<p>Signals send three different types of events to their subscribers:</p>

<ul>
<li>The <strong>next</strong> event provides a new value from the stream. Unlike Cocoa collections, it is
completely valid for a signal to include <code>nil</code>.</li>
<li>The <strong>error</strong> event indicates that an error occurred before the signal could
finish. The event may include an <code>NSError</code> object that indicates what went
wrong. Errors must be handled specially – they are not included in the
stream&#39;s values.</li>
<li>The <strong>completed</strong> event indicates that the signal finished successfully, and
that no more values will be added to the stream. Completion must be handled
specially – it is not included in the stream of values.</li>
</ul>

<p>The lifetime of a signal consists of any number of <code>next</code> events, followed by
one <code>error</code> or <code>completed</code> event (but not both).</p>
</blockquote>

<h3><code>RACSequence</code></h3>

<blockquote>
<ul>
<li><strong>Simplifying Collection Transformations</strong>: Higher-order functions like <code>map</code>, <code>filter</code>, <code>fold/reduce</code> are sorely missing from <code>Foundation</code>.</li>
</ul>

<p>Sequences are a kind of collection, similar in purpose to <code>NSArray</code>. Unlike
an array, the values in a sequence are evaluated <em>lazily</em> (i.e., only when they
are needed) by default, potentially improving performance if only part of
a sequence is used. Just like Cocoa collections, sequences cannot contain <code>nil</code>.</p>

<p><code>RACSequence</code> allows any Cocoa collection to be manipulated in a uniform and declarative way.</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">RACSequence</span> <span class="o">*</span><span class="n">normalizedLongWords</span> <span class="o">=</span> <span class="p">[[</span><span class="n">words</span><span class="p">.</span><span class="n">rac_sequence</span>
    <span class="nl">filter:</span><span class="o">^</span> <span class="kt">BOOL</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">word</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">word</span> <span class="n">length</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">}]</span>
    <span class="nl">map:</span><span class="o">^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">word</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">word</span> <span class="n">lowercaseString</span><span class="p">];</span>
    <span class="p">}];</span>
</code></pre></div>
<h2>Precedents in Cocoa</h2>

<p>Capturing and responding to changes has a long tradition in Cocoa, and ReactiveCocoa is a conceptual and functional extension of that. It is instructive to contrast RAC with those Cocoa technologies:</p>

<h3>RAC vs. KVO</h3>

<p><a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html">Key-Value Observing</a> is at the heart of all magic in Cocoa—indeed, it is used extensively by ReactiveCocoa to react to property changes. However, KVO is neither pleasant nor easy to use: its API is overwrought with unused parameters and sorely lacking a blocks-based interface.</p>

<h3>RAC vs. Bindings</h3>

<p><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CocoaBindings/CocoaBindings.html">Bindings</a> are magic—voodoo, really.</p>

<p>Although essential to managing the complexity of a Mac OS X application, Bindings&#39; cultural relevance has waned for years, as the focus has shifted to iOS and UIKit, which notably lacks support. Bindings replace a lot of boilerplate glue code and allow programming to be done in Interface Builder, but they&#39;re severely limited and <em>impossible</em> to debug. RAC offers a clear, understandable, and extensible code-based API that works in iOS and is apt to replace all but the most trivial uses of bindings in your OS X application.</p>

<hr>

<p>Objective-C was built from Smalltalk&#39;s ideas on top of C&#39;s metal, but its cultural imports go far beyond its original pedigree.</p>

<p><code>@protocol</code> was a rejection of C++&#39;s multiple inheritance, favoring an abstract data type pattern comparable to a Java <code>Interface</code>. Objective-C 2.0 introduced <code>@property / @synthesize</code>, a contemporary of C#&#39;s <code>get; set;</code> shorthand for getter and setter methods (as well as dot syntax, which is still a point of contention for NeXTSTEP hard-liners). Blocks injected some functional programming flavor to the language, which paired nicely with Grand Central Dispatch--a queue-based concurrency API almost certainly influenced by Fortran / C / C++ standard <a href="http://en.wikipedia.org/wiki/OpenMP">OpenMP</a>. Subscripting and object literals, a standard feature in scripting languages like Ruby and Javascript, now finally brought to Objective-C thanks to a Clang language extension.</p>

<p>ReactiveCocoa brings a healthy dose of functional and reactive programming influence to Objective-C, and was itself influenced by C#&#39;s <a href="http://msdn.microsoft.com/en-us/data/gg577609.aspx">Rx library</a>, <a href="http://en.wikipedia.org/wiki/Clojure">Clojure</a>, and <a href="http://en.wikipedia.org/wiki/Elm_(programming_language)">Elm</a>.</p>

<p>Good ideas are contagious. ReactiveCocoa is a reminder that good ideas can come from unlikely places, and that a fresh perspective can make all of the difference with familiar problems.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 18 Feb 2013 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:35:"http://nshipster.com/reactivecocoa/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:35:"http://nshipster.com/reactivecocoa/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:58;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:10:"NSURLCache";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:15426:"<p><code>NSURLCache</code> provides a composite in-memory and on-disk caching mechanism for URL requests to your application. As part of Foundation&#39;s <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html#//apple_ref/doc/uid/10000165i">URL Loading System</a>, any request loaded through <code>NSURLConnection</code> will be handled by <code>NSURLCache</code>.</p>

<p>Network caching reduces the number of requests that need to be made to the server, and improve the experience of using an application offline or under slow network conditions.</p>

<p>When a request has finished loading its response from the server, a cached response will be saved locally. The next time the same request is made, the locally-cached response will be returned immediately, without connecting to the server. <code>NSURLCache</code> returns the cached response <em>automatically</em> and <em>transparently</em>.</p>

<p>In order to take advantage of <code>NSURLCache</code>, a shared URL cache must be initialized and set. This should be done in <code>-application:didFinishLaunchingWithOptions:</code> on iOS, or  <code>–applicationDidFinishLaunching:</code> on Mac OS X:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span>
    <span class="nl">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">launchOptions</span>
<span class="p">{</span>
  <span class="n">NSURLCache</span> <span class="o">*</span><span class="n">URLCache</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSURLCache</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithMemoryCapacity</span><span class="o">:</span><span class="mi">4</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span>
                                                       <span class="nl">diskCapacity:</span><span class="mi">20</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">1024</span>
                                                           <span class="nl">diskPath:</span><span class="nb">nil</span><span class="p">];</span>
  <span class="p">[</span><span class="n">NSURLCache</span> <span class="n">setSharedURLCache</span><span class="o">:</span><span class="n">URLCache</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>Caching policies are specified in both the request (by the client) and in the response (by the server). Understanding these policies and how they relate to one another is essential to finding the optimal behavior for your application.</p>

<h2><code>NSURLRequestCachePolicy</code></h2>

<p><code>NSURLRequest</code> has a <code>cachePolicy</code> property, which specifies the caching behavior of the request according to the following constants:</p>

<ul>
<li><code>NSURLRequestUseProtocolCachePolicy</code>: Caching logic defined in the protocol implementation is used for a particular URL load request. This is the default policy.</li>
<li><code>NSURLRequestReloadIgnoringLocalCacheData</code>: Data should be loaded from the originating source. No existing cache data should be used.</li>
<li><code>NSURLRequestReloadIgnoringLocalAndRemoteCacheData</code>: Not only should the local cache data be ignored, but proxies and other intermediates should be instructed to disregard their caches so far as the protocol allows.</li>
<li><code>NSURLRequestReturnCacheDataElseLoad</code>: Existing cached data should be used, regardless of its age or expiration date. If there is no existing data in the cache corresponding to the request, the data is loaded from the originating source.</li>
<li><code>NSURLRequestReturnCacheDataDontLoad</code>: Existing cache data should be used, regardless of its age or expiration date. If there is no existing data in the cache corresponding to the request, no attempt is made to load the data from the originating source, and the load is considered to have failed, (i.e. &quot;offline&quot; mode).</li>
<li><code>NSURLRequestReloadRevalidatingCacheData</code>: Existing cache data may be used provided the origin source confirms its validity, otherwise the URL is loaded from the origin source.</li>
</ul>

<p>It may not surprise you that these values are poorly understood and often confused with one another.</p>

<p>Adding to the confusion is the fact that <code>NSURLRequestReloadIgnoringLocalAndRemoteCacheData</code> and <code>NSURLRequestReloadRevalidatingCacheData</code> <a href="https://gist.github.com/mattt/4753073#file-nsurlrequest-h-L95-L108"><em>aren&#39;t even implemented</em></a>! (<a href="http://openradar.appspot.com/radar?id=1755401">Link to Radar</a>).</p>

<p>So here&#39;s what you <em>actually</em> need to know about <code>NSURLRequestCachePolicy</code>:</p>

<table>
  <thead>
    <tr>
      <th>Constant</th>
      <th>Meaning</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><tt>UseProtocolCachePolicy</tt></td>
      <td>Default behavior</td>
    </tr>
    <tr>
      <td><tt>ReloadIgnoringLocalCacheData</tt></td>
      <td>Don't use the cache</td>
    </tr>
    <tr>
      <td><del><tt>ReloadIgnoringLocalAndRemoteCacheData</tt></del></td>
      <td><del>Seriously, don't use the cache</del></td>
    </tr>
    <tr>
      <td><tt>ReturnCacheDataElseLoad</tt></td>
      <td>Use the cache (no matter how out of date), or if no cached response exists, load from the network</td>
    </tr>
    <tr>
      <td><tt>ReturnCacheDataDontLoad</tt></td>
      <td>Offline mode: use the cache (no matter how out of date), but <em>don't</em> load from the network</td>
    </tr>
    <tr>
      <td><del><tt>ReloadRevalidatingCacheData</tt></del></td>
      <td><del>Validate cache against server before using</del></td>
    </tr>
  </tbody>
</table>

<h2>HTTP Cache Semantics</h2>

<p>Because <code>NSURLConnection</code> is designed to support multiple protocols—including both <code>FTP</code> and <code>HTTP</code>/<code>HTTPS</code>—the URL Loading System APIs specify caching in a protocol-agnostic fashion. For the purposes of this article, caching will be explained in terms of HTTP semantics.</p>

<p>HTTP requests and responses use <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html">headers</a> to communicate metadata such as character encoding, MIME type, and caching directives.</p>

<h3>Request Cache Headers</h3>

<p>By default, <code>NSURLRequest</code> will use the current time to determine whether a cached response should be returned. For more precise cache control, the following headers can be specified:</p>

<ul>
<li><code>If-Modified-Since</code> - This request header corresponds to the <code>Last-Modified</code> response header. Set the value of this to the <code>Last-Modified</code> value received from the last request to the same endpoint.</li>
<li><code>If-None-Match</code> - This request header corresponds to the <code>Etag</code> response header. Use the <code>Etag</code> value received previously for the last request to that endpoint.</li>
</ul>

<h3>Response Cache Headers</h3>

<p>An <code>NSHTTPURLResponse</code> contains a set of HTTP headers, which can include the following directives for how that response should be cached:</p>

<ul>
<li><code>Cache-Control</code> - This header must be present in the response from the server to enable HTTP caching by a client. The value of this header may include information like its <code>max-age</code> (how long to cache a response), and whether the response may be cached with <code>public</code> or <code>private</code> access, or <code>no-cache</code> (not at all). See the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9"><code>Cache-Control</code> section of RFC 2616</a> for full details.</li>
</ul>

<p>In addition to <code>Cache-Control</code>, a server may send additional headers that can be used to conditionally request information as needed (as mentioned in the previous section):</p>

<ul>
<li><code>Last-Modified</code> - The value of this header corresponds to the date and time when the requested resource was last changed. For example, if a client requests a timeline of recent photos, <code>/photos/timeline</code>, the <code>Last-Modified</code>
value could be set to when the most recent photo was taken.</li>
<li><code>Etag</code> - An abbreviation for &quot;entity tag&quot;, this is an identifier that represents the contents requested resource. In practice, an <code>Etag</code> header value could be something like the <a href="http://en.wikipedia.org/wiki/MD5"><code>MD5</code></a> digest of the resource properties. This is particularly useful for dynamically generated resources that may not have an obvious <code>Last-Modified</code> value.</li>
</ul>

<h2><code>NSURLConnectionDelegate</code></h2>

<p>Once the server response has been received, the <code>NSURLConnection</code> delegate has an opportunity to specify the cached response in <code>-connection:willCacheResponse:</code>.</p>

<p><code>NSCachedURLResponse</code> is a class that contains both an <code>NSURLResponse</code> with the cached <code>NSData</code> associated with the response.</p>

<p>In <code>-connection:willCacheResponse:</code>, the <code>cachedResponse</code> object has been automatically created from the result of the URL connection. Because there is no mutable counterpart to <code>NSCachedURLResponse</code>, in order to change anything about <code>cachedResponse</code>, a new object must be constructed, passing any modified values into <code>–initWithResponse:data:userInfo:storagePolicy:</code>, for instance:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="n">NSCachedURLResponse</span> <span class="o">*</span><span class="p">)</span><span class="nf">connection:</span><span class="p">(</span><span class="n">NSURLConnection</span> <span class="o">*</span><span class="p">)</span><span class="nv">connection</span>
                  <span class="nl">willCacheResponse:</span><span class="p">(</span><span class="n">NSCachedURLResponse</span> <span class="o">*</span><span class="p">)</span><span class="nv">cachedResponse</span>
<span class="p">{</span>
    <span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="n">mutableUserInfo</span> <span class="o">=</span> <span class="p">[[</span><span class="n">cachedResponse</span> <span class="n">userInfo</span><span class="p">]</span> <span class="n">mutableCopy</span><span class="p">];</span>
    <span class="n">NSMutableData</span> <span class="o">*</span><span class="n">mutableData</span> <span class="o">=</span> <span class="p">[[</span><span class="n">cachedResponse</span> <span class="n">data</span><span class="p">]</span> <span class="n">mutableCopy</span><span class="p">];</span>
    <span class="n">NSURLCacheStoragePolicy</span> <span class="n">storagePolicy</span> <span class="o">=</span> <span class="n">NSURLCacheStorageAllowedInMemoryOnly</span><span class="p">;</span>

    <span class="c1">// ...</span>

    <span class="k">return</span> <span class="p">[[</span><span class="n">NSCachedURLResponse</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithResponse</span><span class="o">:</span><span class="p">[</span><span class="n">cachedResponse</span> <span class="n">response</span><span class="p">]</span>
                                                    <span class="nl">data:</span><span class="n">mutableData</span>
                                                <span class="nl">userInfo:</span><span class="n">mutableUserInfo</span>
                                           <span class="nl">storagePolicy:</span><span class="n">storagePolicy</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<p>If <code>-connection:willCacheResponse:</code> returns <code>nil</code>, the response will not be cached.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="n">NSCachedURLResponse</span> <span class="o">*</span><span class="p">)</span><span class="nf">connection:</span><span class="p">(</span><span class="n">NSURLConnection</span> <span class="o">*</span><span class="p">)</span><span class="nv">connection</span>
                  <span class="nl">willCacheResponse:</span><span class="p">(</span><span class="n">NSCachedURLResponse</span> <span class="o">*</span><span class="p">)</span><span class="nv">cachedResponse</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nb">nil</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<p>When left unimplemented, <code>NSURLConnection</code> will simply use the cached response that would otherwise be passed into <code>-connection:willCacheResponse:</code>, so unless you need to change or prevent caching, this method does not need to be implemented in the delegate.</p>

<h2>Caveats</h2>

<p>Just like its unrelated-but-similarly-named cohort, <a href="http://nshipster.com/nscache/"><code>NSCache</code></a>, <code>NSURLCache</code> is not without some peculiarities.</p>

<p>As of iOS 5, disk caching is supported, but only for HTTP, not HTTPS, requests (though iOS 6 added support for this). Peter Steinberger <a href="http://petersteinberger.com/blog/2012/nsurlcache-uses-a-disk-cache-as-of-ios5/">wrote an excellent article on this subject</a>, after digging into the internals while implementing <a href="https://github.com/steipete/SDURLCache">his own NSURLCache subclass</a>.</p>

<p><a href="http://blackpixel.com/blog/2012/05/caching-and-nsurlconnection.html">Another article by Daniel Pasco at Black Pixel</a> describes some unexpected default behavior when communicating with servers that don&#39;t set cache headers.</p>

<hr>

<p><code>NSURLCache</code> reminds us of how important it is to be familiar with the systems we interact with. Chief among them when developing for iOS or Mac OS X is, of course, the <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html#//apple_ref/doc/uid/10000165i">URL Loading System</a>.</p>

<p>Untold numbers of developers have hacked together an awkward, fragile system for network caching functionality, all because they weren&#39;t aware that <code>NSURLCache</code> could be setup in two lines and do it 100× better. Even more developers have never known the benefits of network caching, and never attempted a solution, causing their apps to make untold numbers of unnecessary requests to the server.</p>

<p>So be the change you want to see in the world, and be sure to always start you app on the right foot, by setting a shared <code>NSURLCache</code> in <code>-application:didFinishLaunchingWithOptions:</code>.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 11 Feb 2013 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:32:"http://nshipster.com/nsurlcache/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:32:"http://nshipster.com/nsurlcache/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:59;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:14:"Type Encodings";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:14069:"<p>From <a href="http://en.wikipedia.org/wiki/Numbers_station">number stations</a> and <a href="http://en.wikipedia.org/wiki/Numerology">numerology</a> to <a href="http://en.wikipedia.org/wiki/Egyptian_hieroglyphs">hieroglyphs</a> and <a href="http://en.wikipedia.org/wiki/Hobo#Hobo_.28sign.29_code">hobo codes</a>, there is something truly fascinating about finding meaning that hides in plain sight. Though hidden messages in and of themselves are rarely useful or particularly interesting, it&#39;s the thrill of the hunt that piques our deepest curiosities.</p>

<p>It is in this spirit that we take a look at <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html">Objective-C Type Encodings</a> in this week&#39;s edition of NSHipster.</p>

<hr>

<p><a href="http://nshipster.com/nsvalue/">Last week</a>, in a discussion about <code>NSValue</code>, there was mention of <code>+valueWithBytes:objCType:</code>, whose second parameter should be created with the Objective-C <code>@encode()</code> compiler directive.</p>

<p><code>@encode</code>, one of the <a href="http://nshipster.com/at-compiler-directives/"><code>@</code> Compiler Directives</a>, returns a C string that encodes the internal representation of a given type (e.g., <code>@encode(int)</code> → <code>i</code>), similar to the ANSI C <code>typeof</code> operator. Apple&#39;s Objective-C runtime uses type encodings internally to help facilitate message dispatching.</p>

<p>Here&#39;s a rundown of all of the different Objective-C Type Encodings:</p>

<table id="type-encodings">
  <caption>Objective-C Type Encodings</caption>
  <thead>
    <tr>
      <th>Code</th>
      <th>Meaning</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><tt>c</tt></td>
      <td>A <tt>char</tt></td>
    </tr>
    <tr>
      <td><tt>i</tt></td>
      <td>An <tt>int</tt></td></tr>
    <tr>
      <td><tt>s</tt></td>
      <td>A <tt>short</tt></td></tr>
    <tr>
      <td><tt>l</tt></td>
      <td>A <tt>long</tt><tt>l</tt> is treated as a 32-bit quantity on 64-bit programs.</td></tr>
    <tr>
      <td><tt>q</tt></td>
      <td>A <tt>long long</tt></td></tr>
    <tr>
      <td><tt>C</tt></td>
      <td>An <tt>unsigned char</tt></td></tr>
    <tr>
      <td><tt>I</tt></td>
      <td>An <tt>unsigned int</tt></td></tr>
    <tr>
      <td><tt>S</tt></td>
      <td>An <tt>unsigned short</tt></td></tr>
    <tr>
      <td><tt>L</tt></td>
      <td>An <tt>unsigned long</tt></td></tr>
    <tr>
      <td><tt>Q</tt></td>
      <td>An <tt>unsigned long long</tt></td></tr>
    <tr>
      <td><tt>f</tt></td>
      <td>A <tt>float</tt></td></tr>
    <tr>
      <td><tt>d</tt></td>
      <td>A <tt>double</tt></td></tr>
    <tr>
      <td><tt>B</tt></td>
      <td>A C++ <tt>bool</tt> or a C99 <tt>_Bool</tt></td></tr>
    <tr>
      <td><tt>v</tt></td>
      <td>A <tt>void</tt></td></tr>
    <tr>
      <td><tt>*</tt></td>
      <td>A character string (<tt>char *</tt>)</td></tr>
    <tr>
      <td><tt>@</tt></td>
      <td>An object (whether statically typed or typed <tt>id</tt>)</td></tr>
    <tr>
      <td><tt>#</tt></td>
      <td>A class object (<tt>Class</tt>)</td></tr>
    <tr>
      <td><tt>:</tt></td>
      <td>A method selector (<tt>SEL</tt>)</td></tr>
    <tr>
      <td>[<em>array type</em>] </td>
      <td>An array</td></tr>
    <tr>
      <td>{<em>name=type...</em>}</td>
      <td>A structure</td></tr>
    <tr>
      <td>(<em>name</em>=<em>type...</em>)</td>
      <td>A union</td></tr>
    <tr>
      <td><tt>b</tt>num</td>
      <td>A bit field of <em>num</em> bits</td></tr>
    <tr>
      <td><tt>^</tt>type</td>
      <td>A pointer to <em>type</em></td></tr>
    <tr>
      <td><tt>?</tt></td>
      <td>An unknown type (among other things, this code is used for function pointers)</td>
    </tr>
  </tbody>
</table>

<p>Of course, charts are fine, but experimenting in code is even better:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;int        : %s&quot;</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;float      : %s&quot;</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="kt">float</span><span class="p">));</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;float *    : %s&quot;</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="kt">float</span><span class="o">*</span><span class="p">));</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;char       : %s&quot;</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;char *     : %s&quot;</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">));</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;BOOL       : %s&quot;</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">));</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;void       : %s&quot;</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="kt">void</span><span class="p">));</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;void *     : %s&quot;</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">));</span>

<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;NSObject * : %s&quot;</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">NSObject</span> <span class="o">*</span><span class="p">));</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;NSObject   : %s&quot;</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">NSObject</span><span class="p">));</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;[NSObject] : %s&quot;</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">typeof</span><span class="p">([</span><span class="n">NSObject</span> <span class="n">class</span><span class="p">])));</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;NSError ** : %s&quot;</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">typeof</span><span class="p">(</span><span class="n">NSError</span> <span class="o">**</span><span class="p">)));</span>

<span class="kt">int</span> <span class="n">intArray</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;int[]      : %s&quot;</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">typeof</span><span class="p">(</span><span class="n">intArray</span><span class="p">)));</span>

<span class="kt">float</span> <span class="n">floatArray</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mf">0.1f</span><span class="p">,</span> <span class="mf">0.2f</span><span class="p">,</span> <span class="mf">0.3f</span><span class="p">};</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;float[]    : %s&quot;</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">typeof</span><span class="p">(</span><span class="n">floatArray</span><span class="p">)));</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">_struct</span> <span class="p">{</span>
    <span class="kt">short</span> <span class="n">a</span><span class="p">;</span>
    <span class="kt">long</span> <span class="kt">long</span> <span class="n">b</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span> <span class="n">Struct</span><span class="p">;</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;struct     : %s&quot;</span><span class="p">,</span> <span class="k">@encode</span><span class="p">(</span><span class="n">typeof</span><span class="p">(</span><span class="n">Struct</span><span class="p">)));</span>
</code></pre></div>
<p>Result:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">int        : i
float      : f
float *    : ^f
char       : c
char *     : *
BOOL       : c
void       : v
void *     : ^v

NSObject * : @
NSObject   : #
[NSObject] : {NSObject=#}
NSError ** : ^@

int[]      : [5i]
float[]    : [3f]
struct     : {_struct=sqQ}
</code></pre></div>
<p>There are some interesting takeaways from this:</p>

<ul>
<li>Whereas the standard encoding for pointers is a preceding <code>^</code>, <code>char *</code> gets its own code: <code>*</code>. This makes sense conceptually, as C strings are thought to be entities in and of themselves, rather than a pointer to something else.</li>
<li><code>BOOL</code> is <code>c</code>, rather than <code>i</code>, as one might expect. Reason being, <code>char</code> is smaller than an <code>int</code>, and when Objective-C was originally designed in the 80&#39;s, bits (much like the dollar) were more valuable than they are today. <code>BOOL</code> is specifically a <code>signed char</code> (even if <code>-funsigned-char</code> is set), to ensure a consistent type between compilers, since <code>char</code> could be either <code>signed</code> or <code>unsigned</code>.</li>
<li>Passing <code>NSObject</code> directly yields <code>#</code>. However, passing <code>[NSObject class]</code> yields a struct named <code>NSObject</code> with a single class field. That is, of course, the <code>isa</code> field, which all <code>NSObject</code> instances have to signify their type.</li>
</ul>

<h2>Method Encodings</h2>

<p>As mentioned in Apple&#39;s <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html">&quot;Objective-C Runtime Programming Guide&quot;</a>, there are a handful of type encodings that are used internally, but cannot be returned with <code>@encode</code>.</p>

<p>These are the type qualifiers for methods declared in a protocol:</p>

<table id="method-encodings">
  <caption>Objective-C Method Encodings</caption>
  <thead>
    <tr>
      <th>Code</th>
      <th>Meaning</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><tt>r</tt></td>
      <td><tt>const</tt></td>
    </tr>
    <tr>
      <td><tt>n</tt></td>
      <td><tt>in</tt></td>
    </tr>
    <tr>
      <td><tt>N</tt></td>
      <td><tt>inout</tt></td>
    </tr>
    <tr>
      <td><tt>o</tt></td>
      <td><tt>out</tt></td>
    </tr>
    <tr>
      <td><tt>O</tt></td>
      <td><tt>bycopy</tt></td>
    </tr>
    <tr>
      <td><tt>R</tt></td>
      <td><tt>byref</tt></td>
    </tr>
    <tr>
      <td><tt>V</tt></td>
      <td><tt>oneway</tt></td>
    </tr>
  </tbody>
</table>

<p>For anyone familiar with <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSDistantObject_Class/Reference/Reference.html">NSDistantObject</a>, you&#39;ll doubtless recognize these as a vestige of <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/DistrObjects/DistrObjects.html#//apple_ref/doc/uid/10000102i">Distributed Objects</a>.</p>

<p>Although DO has fallen out of fashion in the age of iOS, it was an interprocess messaging protocol used between Cocoa applications--even running on different machines on the network. Under these constraints, there were benefits to be had from the additional context.</p>

<p>For example, parameters in distributed object messages were passed as proxies by default. In situations where proxying would be unnecessarily inefficient, the <code>bycopy</code> qualifier could be added to make sure a full copy of the object was sent. Also by default, parameters were <code>inout</code>, signifying that objects needed to be sent back and forth when sending the message. By specifying a parameter as <code>in</code> or <code>out</code> instead, the application could avoid the round-trip overhead.</p>

<hr>

<p>So what do we gain from our newfound understanding of Objective-C Type Encodings?
Honestly, not that much (unless you&#39;re doing any crazy metaprogramming).</p>

<p>But as we said from the very outset, there is wisdom in the pursuit of deciphering secret messages.</p>

<p>Looking at type encodings reveals details about Objective-C runtime internals, which is a noble pursuit in and of itself. Going further down the rabbit hole, and we come to the secret history of Distributed Objects, and the obscure parameter qualifiers that <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSNumberFormatter_Class/Reference/Reference.html%23jumpTo_22">still linger around to this day</a>.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 04 Feb 2013 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:36:"http://nshipster.com/type-encodings/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"http://nshipster.com/type-encodings/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:60;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:7:"NSValue";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:6351:"<p>As part of playing the role of Abraham Lincoln in the <a href="http://www.imdb.com/title/tt0443272/">eponymous 2012 biopic</a>, Daniel Day-Lewis would insist on walking through a refrigerator box marked &quot;TIME MACHINE&quot; anytime he entered or left the set. <del markdown="1"><a href="http://filmdrunk.uproxx.com/2012/10/daniel-day-lewis-method-acting-lincoln-ny-times-profile">True Story</a></del>.</p>

<p>While the ends certainly justify the means when it comes to Mr. Day-Lewis&#39; method acting, one can&#39;t help but marvel at the absurdity of a magical cardboard box used as a nexus between the modern and historical worlds.</p>

<p>Yet, this is <em>exactly</em> what we do as Objective-C programmers.</p>

<p>...well not <em>exactly</em>, but there is a box involved.</p>

<p>As mentioned <a href="http://nshipster.com/ns_enum-ns_options/">time</a> and <a href="http://nshipster.com/nil/">again</a> in NSHipster, what makes Objective-C such a curiosity is the way it merges the old, procedural world of C with the modern Object-Oriented influences of Smalltalk. When done correctly, this tension can be exploited to craft semantically rich software without sacrificing performance. But bridging that gap between old and new is a miasma of casts, bridges, and of course, boxes.</p>

<p>Boxing is the process of encapsulating scalars (<code>int</code>, <code>double</code>, <code>BOOL</code>, etc.) and value types (<code>struct</code>, <code>enum</code>) with an object container, and is primarily used to store those values in collection objects—namely arrays and dictionaries.</p>

<p><code>NSNumber</code> is often used to box scalars, but in Foundation, the reigning featherweight champion of boxing is <code>NSValue</code>.</p>

<hr>

<p><code>NSValue</code> is a simple container for a single C or Objective-C data value. It can hold scalars and value types, as well as pointers and object IDs.</p>

<p>While boxing is an admittedly dry subject matter, there are two methods in particular that are worth noting: <code>+valueWithBytes:objCType:</code>, which serves as a primer for working with <code>NSValue</code>, and
<code>+valueWithNonretainedObject:</code>, which is surprisingly useful for being relatively unknown.</p>

<h2><code>valueWithBytes:objCType:</code></h2>

<blockquote>
<p><code>+valueWithBytes:objCType:</code>
Creates and returns an NSValue object that contains a given value, which is interpreted as being of a given Objective-C type.</p>

<ul>
<li><code>value</code>: The value for the new <code>NSValue</code> object.</li>
<li><code>type</code>: The Objective-C type of value. <code>type</code> should be created with the Objective-C <code>@encode()</code> compiler directive; it should not be hard-coded as a C string.</li>
</ul>
</blockquote>

<p><code>@encode</code> was discussed in <a href="http://nshipster.com/at-compiler-directives/">our rundown of the myriad <code>@</code> Compiler Directives</a>:</p>

<blockquote>
<p><code>@encode()</code>: Returns the <a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html">type encoding</a> of a type. This type value can be used as the first argument encode in <code>NSCoder -encodeValueOfObjCType:at</code>.</p>
</blockquote>

<p>The subject of type encodings would make for <a href="http://nshipster.com/type-encodings/">a great article of its own</a>, but the main takeaway is that it serves as a terse, human-readable representation of the structure of a type. For example,</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">example</span> <span class="p">{</span>
  <span class="kt">id</span>   <span class="n">anObject</span><span class="p">;</span>
  <span class="kt">char</span> <span class="o">*</span><span class="n">aString</span><span class="p">;</span>
  <span class="kt">int</span>  <span class="n">anInt</span><span class="p">;</span>
<span class="p">}</span> <span class="n">Example</span><span class="p">;</span>
</code></pre></div>
<p>...has the encoding:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">{</span><span class="n">example</span><span class="o">=</span><span class="p">@</span><span class="o">*</span><span class="n">i</span><span class="p">}</span>
</code></pre></div>
<p><code>NSValue</code> uses this type encoding to create the necessary data structures to represent these values internally. Neat!</p>

<h2><code>valueWithNonretainedObject:</code></h2>

<blockquote>
<p><code>+valueWithNonretainedObject:</code>
Creates and returns an NSValue object that contains a given object.</p>

<p><code>anObject</code>: The value for the new object.</p>
</blockquote>

<p>If you already knew about <code>valueWithNonretainedObject</code>, you should be nodding with a knowing grin. If you didn&#39;t, you&#39;re likely staring incredulously with mouth agape. Or if not, you will be soon.</p>

<p>In short, <code>valueWithNonretainedObject:</code> allows objects to be added to a collection, without the need for satisfying <code>&lt;NSCopying&gt;</code>.</p>

<p>It&#39;s something that comes up occasionally, working with objects that can&#39;t be directly added to an <code>NSArray</code> or <code>NSDictionary</code>. Without knowing about <code>valueWithNonretainedObject:</code>, this would be something that would throw off your entire game—especially if you&#39;re just starting out in Objective-C.</p>

<p>But now you&#39;re in the know. You won&#39;t be stifled by such pedestrian concerns. You need not grope around for answers with <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSPointerArray_Class/Introduction/Introduction.html"><code>NSPointerArray</code></a> or <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/NSMapTable_class/Reference/NSMapTable.html#//apple_ref/occ/cl/NSMapTable"><code>NSMapTable</code></a>. Today is a new day.</p>

<hr>

<p>Having unpacked all of this wisdom about <code>NSValue</code>, you can now face that cruel divide between procedural and object-oriented; C and Smalltalk. Because everything is easy with a magic box.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 28 Jan 2013 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:29:"http://nshipster.com/nsvalue/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:29:"http://nshipster.com/nsvalue/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:61;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:17:"NSLocalizedString";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:9869:"<p>Strings are perhaps the most versatile data type in computing. They&#39;re passed around as symbols, used to encode numeric values, associate values to keys, represent resource paths, store linguistic content, and format information. Having a strong handle on user-facing strings is essential to making a great user experience.</p>

<p>In Foundation, there is a convenient macro for denoting strings as user-facing: <code>NSLocalizedString</code>.</p>

<p><code>NSLocalizedString</code> provides string localization in &quot;compile-once / run everywhere&quot; fashion, replacing all localized strings with their respective translation according to the string tables of the user settings. But even if you&#39;re not going to localize your app to any other markets, <code>NSLocalizedString</code> does wonders with respect to copy writing &amp; editing.</p>

<blockquote>
<p>For more information about Localization (l10n) and Internationalization (i18n) <a href="http://nshipster.com/nslocale/">see the NSHipster article about NSLocale</a>.</p>
</blockquote>

<hr>

<p><code>NSLocalizedString</code> is a Foundation macro that returns a localized version of a string. It has two arguments: <code>key</code>, which uniquely identifies the string to be localized, and <code>comment</code>, a string that is used to provide sufficient context for accurate translation.</p>

<p>In practice, the <code>key</code> is often just the base translation string to be used, while <code>comment</code> is usually <code>nil</code>, unless there is an ambiguous context:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">textField</span><span class="p">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;Username&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</code></pre></div>
<p><code>NSLocalizedString</code> can also be used as a format string in <code>NSString +stringWithFormat:</code>. In these cases, it&#39;s important to use the <code>comment</code> argument to provide enough context to be properly translated.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">self</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="n">stringWithFormat</span><span class="o">:</span><span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;%@&#39;s Profile&quot;</span><span class="p">,</span> <span class="s">@&quot;{User First Name}&#39;s Profile&quot;</span><span class="p">),</span> <span class="n">user</span><span class="p">.</span><span class="n">name</span><span class="p">];</span>
</code></pre></div><div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="n">stringWithFormat</span><span class="o">:</span><span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;Showing %lu of %lu items&quot;</span><span class="p">,</span> <span class="s">@&quot;Showing {number} of {total number} items&quot;</span><span class="p">),</span> <span class="p">[</span><span class="n">page</span> <span class="n">count</span><span class="p">],</span> <span class="p">[</span><span class="n">items</span> <span class="n">count</span><span class="p">]];</span>
</code></pre></div>
<h2><code>NSLocalizedString</code> &amp; Co.</h2>

<p>There are four varieties of <code>NSLocalizedString</code>, with increasing levels of control (and obscurity):</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span> <span class="n">NSLocalizedString</span><span class="p">(</span>
  <span class="n">NSString</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span>
  <span class="n">NSString</span> <span class="o">*</span><span class="n">comment</span>
<span class="p">)</span>
</code></pre></div><div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span> <span class="n">NSLocalizedStringFromTable</span><span class="p">(</span>
  <span class="n">NSString</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span>
  <span class="n">NSString</span> <span class="o">*</span><span class="n">tableName</span><span class="p">,</span>
  <span class="n">NSString</span> <span class="o">*</span><span class="n">comment</span>
<span class="p">)</span>
</code></pre></div><div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span> <span class="n">NSLocalizedStringFromTableInBundle</span><span class="p">(</span>
  <span class="n">NSString</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span>
  <span class="n">NSString</span> <span class="o">*</span><span class="n">tableName</span><span class="p">,</span>
  <span class="n">NSBundle</span> <span class="o">*</span><span class="n">bundle</span><span class="p">,</span>
  <span class="n">NSString</span> <span class="o">*</span><span class="n">comment</span>
<span class="p">)</span>
</code></pre></div><div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span> <span class="n">NSLocalizedStringWithDefaultValue</span><span class="p">(</span>
  <span class="n">NSString</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span>
  <span class="n">NSString</span> <span class="o">*</span><span class="n">tableName</span><span class="p">,</span>
  <span class="n">NSBundle</span> <span class="o">*</span><span class="n">bundle</span><span class="p">,</span>
  <span class="n">NSString</span> <span class="o">*</span><span class="n">value</span><span class="p">,</span>
  <span class="n">NSString</span> <span class="o">*</span><span class="n">comment</span>
<span class="p">)</span>
</code></pre></div>
<p>99% of the time, <code>NSLocalizedString</code> will suffice. If you&#39;re working in a library or shared component, <code>NSLocalizedStringFromTable</code> should be used instead.</p>

<h2>Localizable.strings</h2>

<p>At runtime, <code>NSLocalizedString</code> determines the preferred language, and finds a corresponding <code>Localizable.strings</code> file in the app bundle. For example, if the user prefers French, the file <code>fr.lproj/Localizable.strings</code> will be consulted.</p>

<p>Here&#39;s what that looks like:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">/* No comment provided by engineer. */
&quot;Username&quot;=&quot;nom d&#39;utilisateur&quot;;
/* {User First Name}&#39;s Profile */
&quot;%@&#39;s Profile&quot;=&quot;profil de %1$@&quot;;
</code></pre></div>
<p><code>Localizable.strings</code> files are initially generated with <code>genstrings</code>.</p>

<blockquote>
<p>The <code>genstrings</code> utility generates a .strings file(s) from the C or Objective-C (.c or .m) source code file(s) given as the argument(s).  A .strings file is used for localizing an application for different languages, as described under &quot;Internationalization&quot; in the Cocoa Developer Documentation.</p>
</blockquote>

<p><code>genstrings</code> goes through each of the selected source files, and for each use of <code>NSLocalizedString</code>, appends the key and comment into a target file. It&#39;s up to the developer to then create a copy of that file for each targeted locale and have a localizer translate it.</p>

<h2>No Madlibs</h2>

<p>After reading that part about localized format strings, you may be tempted to take a clever, DRY approach by creating reusable grammar templates like `@&quot;{Noun} {Verb} {Noun}&quot;, and localizing each word individually...</p>

<p><strong>DON&#39;T.</strong> This cannot be stressed enough: <em>don&#39;t subdivide localized strings</em>. Context will be lost, grammatical constructions will be awkward and unidiomatic, verbs will be incorrectly conjugated, and you&#39;ll have missed the point entirely—taking great effort to make something worse than if you hadn&#39;t bothered in the first place.</p>

<p>Numbers, dates, and similar values are almost always safe replacements. Nouns are subject to pluralization and verb conjugation, but usually safe as direct or indirect objects.</p>

<p>For additional guidelines, see <a href="https://developer.apple.com/library/mac/#documentation/MacOSX/Conceptual/BPInternational/Articles/StringsFiles.html#//apple_ref/doc/uid/20000005">Localizing String Resources from Apple&#39;s Internationalization Programming guide</a>.</p>

<hr>

<p><code>NSLocalizedString</code> is a remarkably reliable indicator of code quality. Those who care enough to take a few extra seconds to internationalize are very likely to be just as thoughtful when it comes to design and implementation.</p>

<p><strong>Always wrap user-facing strings with <code>NSLocalizedString</code>.</strong></p>

<p>Even if you don&#39;t plan to localize your app into any other languages, there is <em>immense</em> utility in being able to easily review all of the strings that a user will see. And if localization is in the cards, it&#39;s significantly easier to <code>NSLocalize</code> your strings as you go along the first time, then try to find all of them after-the-fact.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 21 Jan 2013 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:39:"http://nshipster.com/nslocalizedstring/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:39:"http://nshipster.com/nslocalizedstring/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:62;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:13:"__attribute__";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:16534:"<p>A recurring theme of this publication has been the importance of a healthy relationship with the compiler. Like any craft, one&#39;s effectiveness as a practitioner is contingent on how they treat their tools. Take good care of them, and they&#39;ll take good care of you.</p>

<p><code>__attribute__</code> is a compiler directive that specifies characteristics on declarations, which allows for more error checking and advanced optimizations.</p>

<p>The syntax for this keyword is <code>__attribute__</code> followed by two sets of parentheses (the double parentheses makes it easy to &quot;macro out&quot;, especially with multiple attributes). Inside the parentheses is a comma-delimited list of attributes. <code>__attribute__</code> directives are placed after function, variable, and type declarations.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="c1">// Return the square of a number</span>
<span class="kt">int</span> <span class="nf">square</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="n">__attribute__</span><span class="p">((</span><span class="k">const</span><span class="p">));</span>

<span class="c1">// Declare the availability of a particular API</span>
<span class="kt">void</span> <span class="nf">f</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
  <span class="n">__attribute__</span><span class="p">((</span><span class="n">availability</span><span class="p">(</span><span class="n">macosx</span><span class="p">,</span><span class="n">introduced</span><span class="o">=</span><span class="mf">10.4</span><span class="p">,</span><span class="n">deprecated</span><span class="o">=</span><span class="mf">10.6</span><span class="p">)));</span>

<span class="c1">// Send printf-like message to stderr and exit</span>
<span class="k">extern</span> <span class="kt">void</span> <span class="nf">die</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">format</span><span class="p">,</span> <span class="p">...)</span>
  <span class="n">__attribute__</span><span class="p">((</span><span class="n">noreturn</span><span class="p">,</span> <span class="n">format</span><span class="p">(</span><span class="n">printf</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)));</span>
</code></pre></div>
<p>If this is starting to remind you of ISO C&#39;s <a href="http://nshipster.com/pragma"><code>#pragma</code></a>, you&#39;re not alone.</p>

<p>In fact, when <code>__attribute__</code> was first introduced to GCC, it was faced with some resistance by some who suggested that <code>#pragma</code> be used exclusively for the same purposes.</p>

<p>There were, however, two very good reasons why <code>__attribute__</code> was added:</p>

<blockquote>
<ol>
<li>It was impossible to generate <code>#pragma</code> commands from a macro (before the C99 <code>_Pragma</code> operator).</li>
<li>There is no telling what the same <code>#pragma</code> might mean in another compiler.</li>
</ol>
</blockquote>

<p>Quoth the <a href="http://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html">GCC Documentation for Function Attributes</a>:</p>

<blockquote>
<p>These two reasons applied to almost any application that might have been proposed for <code>#pragma</code>. It was basically a mistake to use <code>#pragma</code> for anything.</p>
</blockquote>

<p>Indeed, if you look at modern Objective-C--in the headers of Apple frameworks and well-engineered open-source projects--<code>__attribute__</code> is used for myriad purposes. (By contrast, <code>#pragma</code>&#39;s main claim to fame these days is decoration: <code>#pragma mark</code>)</p>

<p>So without further ado, let&#39;s take a look at the most important attributes:</p>

<hr>

<h2>GCC</h2>

<h3><code>format</code></h3>

<blockquote>
<p>The <code>format</code> attribute specifies that a function takes <code>printf</code>, <code>scanf</code>, <code>strftime</code> or <code>strfmon</code> style arguments which should be type-checked against a format string.</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">extern</span> <span class="kt">int</span>
<span class="nf">my_printf</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">my_object</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">my_format</span><span class="p">,</span> <span class="p">...)</span>
  <span class="n">__attribute__</span><span class="p">((</span><span class="n">format</span><span class="p">(</span><span class="n">printf</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)));</span>
</code></pre></div>
<p>Objective-C programmers can also use the <code>__NSString__</code> format to enforce the same rules as format strings in <code>NSString +stringWithFormat:</code> and <code>NSLog()</code>.</p>

<h3><code>nonnull</code></h3>

<blockquote>
<p>The <code>nonnull</code> attribute specifies that some function parameters should be non-null pointers.</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">extern</span> <span class="kt">void</span> <span class="o">*</span>
<span class="nf">my_memcpy</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">dest</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">src</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">len</span><span class="p">)</span>
  <span class="n">__attribute__</span><span class="p">((</span><span class="n">nonnull</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)));</span>
</code></pre></div>
<p>Using <code>nonnull</code> encodes expectations about values into an explicit contract, which can help catch any <code>NULL</code> pointer bugs lurking in any calling code. Remember: compile-time errors ≫ run-time errors.</p>

<h3><code>noreturn</code></h3>

<blockquote>
<p>A few standard library functions, such as <code>abort</code> and <code>exit</code>, cannot return. GCC knows this automatically. The <code>noreturn</code> attribute specifies this for any other function that never returns.</p>
</blockquote>

<p>For example, AFNetworking <a href="https://github.com/AFNetworking/AFNetworking/blob/1.1.0/AFNetworking/AFURLConnectionOperation.m#L157">uses the <code>noreturn</code> attribute for its network request thread entry point method</a>. This method is used when spawning the dedicated network <code>NSThread</code> to ensure that the detached thread continues execution for the lifetime of the application.</p>

<h3><code>pure</code> / <code>const</code></h3>

<blockquote>
<p>The <code>pure</code> attribute specifies that a function has no effects except the return value, such that their return value depends only on the parameters and/or global variables. Such a function can be subject to common subexpression elimination and loop optimization just as an arithmetic operator would be.</p>

<p>The <code>const</code> attribute specifies that a function does not examine any values except their arguments, and have no effects except the return value. Note that a function that has pointer arguments and examines the data pointed to must not be declared const. Likewise, a function that calls a non-<code>const</code> function usually must not be <code>const</code>. It does not make sense for a <code>const</code> function to return <code>void</code>.</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="kt">int</span> <span class="nf">square</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="n">__attribute__</span><span class="p">((</span><span class="k">const</span><span class="p">));</span>
</code></pre></div>
<p><code>pure</code> and <code>const</code> are both attributes that invoke a functional programming paradigm in order to allow for significant performance optimizations. <code>const</code> can be thought as a stricter form of <code>pure</code> since it doesn&#39;t depend on global values or pointers.</p>

<p>For example, because the result of a function declared <code>const</code> does not depend on anything other than the arguments passed in, the result of the function can cache that result and return any time the function is called with that same combination of arguments. (i.e. we know that the square of a number is constant, so we only need to compute it once).</p>

<h3><code>unused</code></h3>

<blockquote>
<p>This attribute, attached to a function, means that the function is meant to be possibly unused. GCC will not produce a warning for this function.</p>
</blockquote>

<p>The same effect can be accomplished with the <code>__unused</code> keyword. Declare this on parameters that are not used in the method implementation. Knowing that little bit of context allows the compiler to make optimizations accordingly. You&#39;re most likely to use <code>__unused</code> in delegate method implementations, since protocols frequently provide more context than is often necessary, in order to satisfy a large number of potential use cases.</p>

<h2>LLVM</h2>

<p>Like many features of GCC, Clang supports <code>__attribute__</code>, adding its own small set of extensions.</p>

<p>To check the availability of a particular attribute, you can use the <code>__has_attribute</code> directive.</p>

<h3><code>availability</code></h3>

<blockquote>
<p>Clang introduces the availability attribute, which can be placed on declarations to describe the lifecycle of that declaration relative to operating system versions. Consider the function declaration for a hypothetical function f:</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="kt">void</span> <span class="nf">f</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">__attribute__</span><span class="p">((</span><span class="n">availability</span><span class="p">(</span><span class="n">macosx</span><span class="p">,</span><span class="n">introduced</span><span class="o">=</span><span class="mf">10.4</span><span class="p">,</span><span class="n">deprecated</span><span class="o">=</span><span class="mf">10.6</span><span class="p">,</span><span class="n">obsoleted</span><span class="o">=</span><span class="mf">10.7</span><span class="p">)));</span>
</code></pre></div>
<blockquote>
<p>The <code>availability</code> attribute states that <code>f</code> was introduced in Mac OS X 10.4, deprecated in Mac OS X 10.6, and obsoleted in Mac OS X 10.7.</p>

<p>This information is used by Clang to determine when it is safe to use <code>f</code>: for example, if Clang is instructed to compile code for Mac OS X 10.5, a call to f() succeeds. If Clang is instructed to compile code for Mac OS X 10.6, the call succeeds but Clang emits a warning specifying that the function is deprecated. Finally, if Clang is instructed to compile code for Mac OS X 10.7, the call fails because <code>f()</code> is no longer available.</p>

<p>The <code>availability</code> attribute is a comma-separated list starting with the platform name and then including clauses specifying important milestones in the declaration&#39;s lifetime (in any order) along with additional information.</p>
</blockquote>

<ul>
<li><code>introduced</code>: The first version in which this declaration was introduced.</li>
<li><code>deprecated</code>: The first version in which this declaration was deprecated, meaning that users should migrate away from this API.</li>
<li><code>obsoleted</code>: The first version in which this declaration was obsoleted, meaning that it was removed completely and can no longer be used.</li>
<li><code>unavailable</code>: This declaration is never available on this platform.</li>
<li><code>message</code> Additional message text that Clang will provide when emitting a warning or error about use of a deprecated or obsoleted declaration. Useful to direct users to replacement APIs.</li>
</ul>

<blockquote>
<p>Multiple availability attributes can be placed on a declaration, which may correspond to different platforms. Only the availability attribute with the platform corresponding to the target platform will be used; any others will be ignored. If no availability attribute specifies availability for the current target platform, the availability attributes are ignored.</p>
</blockquote>

<p>Supported Platforms:</p>

<ul>
<li><code>ios</code>: Apple’s iOS operating system. The minimum deployment target is specified by the <code>-mios-version-min=*version*</code> or <code>-miphoneos-version-min=*version*</code> command-line arguments.</li>
<li><code>macosx</code>: Apple’s Mac OS X operating system. The minimum deployment target is specified by the <code>-mmacosx-version-min=*version*</code> command-line argument.</li>
</ul>

<h3><code>overloadable</code></h3>

<blockquote>
<p>Clang provides support for C++ function overloading in C. Function overloading in C is introduced using the <code>overloadable</code> attribute. For example, one might provide several overloaded versions of a <code>tgsin</code> function that invokes the appropriate standard function computing the <code>sine</code> of a value with <code>float</code>, <code>double</code>, or <code>long double</code> precision:</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#include &lt;math.h&gt;</span>
<span class="kt">float</span> <span class="nf">__attribute__</span><span class="p">((</span><span class="n">overloadable</span><span class="p">))</span> <span class="n">tgsin</span><span class="p">(</span><span class="kt">float</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">sinf</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="p">}</span>
<span class="kt">double</span> <span class="nf">__attribute__</span><span class="p">((</span><span class="n">overloadable</span><span class="p">))</span> <span class="n">tgsin</span><span class="p">(</span><span class="kt">double</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="p">}</span>
<span class="kt">long</span> <span class="kt">double</span> <span class="nf">__attribute__</span><span class="p">((</span><span class="n">overloadable</span><span class="p">))</span> <span class="n">tgsin</span><span class="p">(</span><span class="kt">long</span> <span class="kt">double</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">sinl</span><span class="p">(</span><span class="n">x</span><span class="p">);</span> <span class="p">}</span>
</code></pre></div>
<p>Note that <code>overloadable</code> only works for functions. You can overload method declarations to some extent by using generic return and parameter types, like <code>id</code> and <code>void *</code>.</p>

<hr>

<p>Context is king when it comes to compiler optimizations. By providing constraints on how to interpret your code, you&#39;re increases the chance that the generated code is as efficient as possible. Meet your compiler half-way, and you&#39;ll always be rewarded.</p>

<p>And <code>__attribute__</code> isn&#39;t just for the compiler either: The next person to see the code will appreciate the extra context, too. So go the extra mile for the benefit of your collaborator, successor, or just 2-years-from-now-(and-you&#39;ve-forgotten-everything-about–this-code) you.</p>

<p>Because in the end, the love you take is equal to the love you make.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 14 Jan 2013 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:35:"http://nshipster.com/__attribute__/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:35:"http://nshipster.com/__attribute__/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:63;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:25:"nil / Nil / NULL / NSNull";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:6327:"<p>Understanding the concept of nothingness is as much a philosophical issue as it is a pragmatic one. We are inhabitants of a universe of <em>somethings</em>, yet reason in a logical universe of existential uncertainties. As a physical manifestation of a logical system, computers are faced with the intractable problem of how to represent <em>nothing</em> with <em>something</em>.</p>

<p>In Objective-C, there are several different varieties of <em>nothing</em>. The reason for this goes back to <a href="http://nshipster.com/ns_enum-ns_options/">a common NSHipster refrain</a>, of how Objective-C bridges the procedural paradigm of C with Smalltalk-inspired object-oriented paradigm.</p>

<p>C represents <em>nothing</em> as <code>0</code> for primitive values, and <code>NULL</code> for pointers (<a href="http://c-faq.com/null/nullor0.html">which is equivalent to <code>0</code> in a pointer context</a>).</p>

<p>Objective-C builds on C&#39;s representation of <em>nothing</em> by adding <code>nil</code>. <code>nil</code> is an <em>object</em> pointer to nothing. Although semantically distinct from <code>NULL</code>, they are technically equivalent to one another.</p>

<p>On the framework level, Foundation defines <code>NSNull</code>, which defines a class method, <code>+null</code>, which returns the singleton <code>NSNull</code> object. <code>NSNull</code> is different from <code>nil</code> or <code>NULL</code>, in that it is an actual object, rather than a zero value.</p>

<p>Additionally, in <a href="https://gist.github.com/4469665">Foundation/NSObjCRuntime.h</a>, <code>Nil</code> is defined as a <em>class</em> pointer to nothing. This lesser-known title-case cousin of <code>nil</code> doesn&#39;t show up much very often, but it&#39;s at least worth noting.</p>

<h2>There&#39;s Something About <code>nil</code></h2>

<p>Newly-<code>alloc</code>&#39;d <code>NSObject</code>s start life with <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/Reference/Reference.html">their contents set to <code>0</code></a>. This means that all pointers that object has to other objects begin as <code>nil</code>, so it&#39;s unnecessary to, for instance, set <code>self.(association) = nil</code> in <code>init</code> methods.</p>

<p>Perhaps the most notable behavior of <code>nil</code>, though, is that it can have messages sent to it.</p>

<p>In other languages, like C++, this would crash your program, but in Objective-C, invoking a method on <code>nil</code> returns a zero value. This greatly simplifies expressions, as it obviates the need to check for <code>nil</code> before doing anything:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="c1">// For example, this expression...</span>
<span class="k">if</span> <span class="p">(</span><span class="n">name</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">name</span> <span class="n">isEqualToString</span><span class="o">:</span><span class="s">@&quot;Steve&quot;</span><span class="p">])</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>

<span class="c1">// ...can be simplified to:</span>
<span class="k">if</span> <span class="p">([</span><span class="n">name</span> <span class="n">isEqualToString</span><span class="o">:</span><span class="s">@&quot;steve&quot;</span><span class="p">])</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</code></pre></div>
<p>Being aware of how <code>nil</code> works in Objective-C allows this convenience to be a feature, and not a lurking bug in your application. Make sure to guard against cases where <code>nil</code> values are unwanted, either by checking and returning early to fail silently, or adding a <code>NSParameterAssert</code> to throw an exception.</p>

<h2><code>NSNull</code>: Something for Nothing</h2>

<p><code>NSNull</code> is used throughout Foundation and other frameworks to skirt around the limitations of collections like <code>NSArray</code> and <code>NSDictionary</code> not being able to contain <code>nil</code> values. You can think of <code>NSNull</code> as effectively <a href="http://en.wikipedia.org/wiki/Object_type_(object-oriented_programming)#Boxing">boxing</a> the <code>NULL</code> or <code>nil</code> value so that it can be used in collections:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="n">mutableDictionary</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableDictionary</span> <span class="n">dictionary</span><span class="p">];</span>
<span class="n">mutableDictionary</span><span class="p">[</span><span class="s">@&quot;someKey&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNull</span> <span class="n">null</span><span class="p">];</span> <span class="c1">// Sets value of NSNull singleton for `someKey`</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Keys: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">mutableDictionary</span> <span class="n">allKeys</span><span class="p">]);</span> <span class="c1">// @[@&quot;someKey&quot;]</span>
</code></pre></div>
<hr>

<p>So to recap, here are the four values representing <em>nothing</em> that every Objective-C programmer should know about:</p>

<table>
  <thead>
    <tr>
      <th>Symbol</th>
      <th>Value</th>
      <th>Meaning</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><tt>NULL</tt></td>
      <td><tt>(void *)0</tt></td>
      <td>literal null value for C pointers</td>
    </tr>
    <tr>
      <td><tt>nil</tt></td>
      <td><tt>(id)0</tt></td>
      <td>literal null value for Objective-C objects</td>
    </tr>
    <tr>
      <td><tt>Nil</tt></td>
      <td><tt>(Class)0</tt></td>
      <td>literal null value for Objective-C classes</td>
    </tr>
    <tr>
      <td><tt>NSNull</tt></td>
      <td><tt>[NSNull null]</tt></td>
      <td>singleton object used to represent null</td>
    </tr>
  </tbody>
</table>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 07 Jan 2013 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:25:"http://nshipster.com/nil/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:25:"http://nshipster.com/nil/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:64;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:51:"Reader Submissions -&lt;br/&gt;New Year&#039;s 2013";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:15341:"<p>In celebration of the forthcoming <code>year++</code>, I thought it&#39;d be fun to compile a list of some of <em>your</em> favorite tips and tricks of the trade--to give y&#39;all a chance to show off some of your NSHipster cred.</p>

<p>Thanks to <a href="https://github.com/0xced">Cédric Luthi</a>, <a href="https://github.com/jaykz52">Jason Kozemczak</a>, <a href="https://github.com/SlaunchaMan">Jeff Kelley</a>, <a href="https://github.com/joelparsons">Joel Parsons</a>, <a href="https://github.com/MaxGabriel">Maximilian Tagher</a>, <a href="https://github.com/mayoff">Rob Mayoff</a>, <a href="https://github.com/shpakovski">Vadim Shpakovski</a>, &amp; <a href="https://github.com/alextud">@alextud</a> for <a href="https://gist.github.com/4148342">answering the call</a> with <em>excellent</em> submissions.</p>

<h2>Associated Objects in Categories</h2>

<p>This first tip is so nice it was mentioned twice, both by <a href="https://github.com/jaykz52">Jason Kozemczak</a> &amp; <a href="https://github.com/SlaunchaMan">Jeff Kelley</a>.</p>

<p>Categories are a well-known feature of Objective-C, allowing new methods to be added to existing classes. Much less well known is that with some <code>objc</code> runtime hacking, you can add new <em>properties</em> as well. Observe!</p>

<h3>NSObject+IndieBandName.h</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">NSObject</span> <span class="nl">(IndieBandName)</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">indieBandName</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div>
<h3>NSObject+IndieBandName.m</h3>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#import &quot;NSObject+Extension.h&quot;</span>
<span class="cp">#import &lt;objc/runtime.h&gt;</span>

<span class="k">static</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">IndieBandNameKey</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">IndieBandNameKey</span><span class="p">;</span>

<span class="k">@implementation</span> <span class="nc">NSObject</span> <span class="nl">(IndieBandName)</span>
<span class="k">@dynamic</span> <span class="n">indieBandName</span><span class="p">;</span>

<span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">indieBandName</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">objc_getAssociatedObject</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">IndieBandNameKey</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setIndieBandName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">indieBandName</span> <span class="p">{</span>
    <span class="n">objc_setAssociatedObject</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">IndieBandNameKey</span><span class="p">,</span> <span class="n">indieBandName</span><span class="p">,</span> <span class="n">OBJC_ASSOCIATION_RETAIN_NONATOMIC</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">@end</span>
</code></pre></div>
<p>This way, all of your objects can store and retrieve the name of their band, which--by the way--is performing this Wednesday night, and you should totally come.</p>

<p>While this is a cool trick and all, it should only be used as a method of last resort. Before you go this route, ask yourself if a particular property can&#39;t either be derived from existing values, or should be managed by another class.</p>

<p>A good example of an associated object is how <a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> adds a property for an image request operation in its <a href="https://github.com/AFNetworking/AFNetworking/blob/master/AFNetworking/UIImageView%2BAFNetworking.m#L39"><code>UIImageView</code> category</a>.</p>

<h2>LLDB View Hierarchy Dump</h2>

<p><a href="https://github.com/mayoff">Rob Mayoff</a> responded with an obscure and powerful incantation to make debugging views a delight. Create <code>.lldbinit</code> in your home directory, if it doesn&#39;t already exist, and add the following:</p>

<h3>~/.lldbinit</h3>
<div class="highlight"><pre><code class="text language-text" data-lang="text">command regex rd &#39;s/^[[:space:]]*$/po [[[UIApplication sharedApplication] keyWindow] recursiveDescription]/&#39; &#39;s/^(.+)$/po [%1 recursiveDescription]/&#39;
</code></pre></div>
<p>Now you can get a recursive hierarchy of any view in your iOS application with the LLDB debugger. You can try this for yourself by setting a breakpoint in a view controller, and type <code>rd self.view</code>. You may be surprised by what&#39;s under the hood with some of the built-in UI controls!</p>

<h2>LLDB Print Contents of a <code>CGPathRef</code></h2>

<p>While we&#39;re on the subject of LLDB, <a href="https://github.com/mayoff">Rob Mayoff</a> sent in a useful incantation for printing out the contents of a <code>CGPathRef</code> from the debugger:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">p (void)CGPathPrint(pathRef, 0)
</code></pre></div>
<p>If you&#39;re doing any kind of complex Core Graphics drawing, be sure to keep this one handy.</p>

<h2>Use <code>+initialize</code>, Not <code>+load</code></h2>

<p><a href="https://github.com/shpakovski">Vadim Shpakovski</a> wrote in with some advice about class loading and initialization. There are two magical class methods in Objective-C: <code>+load</code> and <code>+initialize</code>, which are automatically called by virtue of the class being used. The difference between the two methods, however, has significant performance implications for your application.</p>

<p><a href="http://www.mikeash.com/">Mike Ash</a> has a <a href="http://www.mikeash.com/pyblog/friday-qa-2009-05-22-objective-c-class-loading-and-initialization.html">great explanation of this</a>:</p>

<blockquote>
<p><code>+load</code> is invoked as the class is actually loaded, if it implements the method. This happens very early on. If you implement <code>+load</code> in an application or in a framework that an application links to, <code>+load</code> will run before <code>main()</code>. If you implement <code>+load</code> in a loadable bundle, then it runs during the bundle loading process.</p>

<p>The <code>+initialize</code> method is invoked in a more sane environment and is usually a better place to put code than <code>+load</code>. <code>+initialize</code> is interesting because it&#39;s invoked lazily and may not be invoked at all. When a class first loads, <code>+initialize</code> is not called. When a message is sent to a class, the runtime first checks to see if <code>+initialize</code> has been called yet. If not, it calls it before proceeding with the message send.</p>
</blockquote>

<p><strong>tl;dr: Implement <code>+initialize</code>, not <code>+load</code>, if you need this automatic behavior.</strong></p>

<h2>Xcode Snippets</h2>

<p><a href="https://github.com/MaxGabriel">Maximilian Tagher</a> gave a shout-out to the benefits of Xcode Snippets.</p>

<p>Great developers take pride in knowing their tools, and being able to use them to maximum effect. <a href="https://twitter.com/javisoto/status/285531250373046272">For better</a> or <a href="http://www.textfromxcode.com">for worse</a>, this means knowing Xcode like the back of our hand. Verbose as Objective-C is, &quot;do more by typing less&quot; rings especially true as a productivity mantra, and <a href="http://developer.apple.com/library/mac/#recipes/xcode_help-source_editor/CreatingaCustomCodeSnippet/CreatingaCustomCodeSnippet.html#//apple_ref/doc/uid/TP40009975-CH14-SW1">Xcode Snippets</a> are one of the best ways to do this.</p>

<p>If you&#39;re looking for a place to start, try downloading and forking <a href="https://github.com/mattt/Xcode-Snippets">these Xcode Snippets</a>.</p>

<h2>Macro for Measuring Execution Time</h2>

<p>Here&#39;s a helpful macro for easily measuring the elapsed time for executing a particular block of code, sent in from <a href="https://github.com/alextud">@alextud</a>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NS_INLINE</span> <span class="kt">void</span> <span class="nf">MVComputeTimeWithNameAndBlock</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">caller</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">block</span><span class="p">)())</span> <span class="p">{</span>
    <span class="n">CFTimeInterval</span> <span class="n">startTimeInterval</span> <span class="o">=</span> <span class="n">CACurrentMediaTime</span><span class="p">();</span>
    <span class="n">block</span><span class="p">();</span>
    <span class="n">CFTimeInterval</span> <span class="n">nowTimeInterval</span> <span class="o">=</span> <span class="n">CACurrentMediaTime</span><span class="p">();</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%s - Time Running is: %f&quot;</span><span class="p">,</span> <span class="n">caller</span><span class="p">,</span> <span class="n">nowTimeInterval</span> <span class="o">-</span> <span class="n">startTimeInterval</span><span class="p">);</span>
<span class="p">}</span>

<span class="cp">#define MVComputeTime(...) MVComputeTimeWithNameAndBlock(__PRETTY_FUNCTION__, (__VA_ARGS__))</span>
</code></pre></div>
<h2>Block Enumeration Methods</h2>

<p><a href="https://github.com/joelparsons">Joel Parsons</a> submitted a great tip about using <code>-enumerateObjectsWithOptions:usingBlock:</code> in <code>NSArray</code> and other collection classes. By passing the <code>NSEnumerationConcurrent</code> option, you can get significant performance benefits over <code>NSFastEnumeration</code>&#39;s <code>for...in</code>-style enumeration by executing the block concurrently.</p>

<p>However, be warned! Not all enumerations lend themselves to concurrent execution, so don&#39;t go around replacing all of your <code>for...in</code> blocks with <code>NSEnumerationConcurrent</code> willy-nilly, unless random crashing is something you like in an app.</p>

<h2>Reverse-Engineered Implementation of <code>NSString</code> Equality Methods</h2>

<p>Displaying his characteristic brilliance and familiarity of Cocoa internals <a href="https://github.com/0xced">Cédric Luthi</a> submitted <a href="https://gist.github.com/2275014">a reverse-engineered implementation of the <code>NString</code> equality methods</a>. Fascinating!</p>

<h2>Animate <code>NSLayoutConstraint.constant</code></h2>

<p>This one goes out to all you fans of <a href="https://developer.apple.com/library/mac/#documentation/UserExperience/Conceptual/AutolayoutPG/Articles/Introduction.html#//apple_ref/doc/uid/TP40010853">Cocoa Auto Layout</a>, from <a href="https://github.com/shpakovski">Vadim Shpakovski</a>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">viewConstraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="o">&lt;</span><span class="err">#</span><span class="n">Constant</span> <span class="n">Value</span> <span class="n">From</span><span class="err">#</span><span class="o">&gt;</span><span class="p">;</span>
<span class="p">[</span><span class="n">view</span> <span class="n">layoutIfNeeded</span><span class="p">];</span>

<span class="n">viewConstraint</span><span class="p">.</span><span class="n">constant</span> <span class="o">=</span> <span class="o">&lt;</span><span class="err">#</span><span class="n">Constant</span> <span class="n">Value</span> <span class="n">To</span><span class="err">#</span><span class="o">&gt;</span><span class="p">;</span>
<span class="p">[</span><span class="n">view</span> <span class="n">setNeedsUpdateConstraints</span><span class="p">];</span>

<span class="p">[</span><span class="n">UIView</span> <span class="n">animateWithDuration</span><span class="o">:</span><span class="n">ConstantAnimationDuration</span> <span class="n">animations</span><span class="o">:^</span><span class="p">{</span>
     <span class="p">[</span><span class="n">view</span> <span class="n">layoutIfNeeded</span><span class="p">];</span>
<span class="p">}];</span>
</code></pre></div>
<p>Attentive readers may have already noted this, but the code above would make an <em>excellent</em> Xcode Snippet, by the way.</p>

<h2>Printing <code>NSCache</code> Usage</h2>

<p>Finishing up this batch of tips and tricks is <a href="https://github.com/0xced">Cédric Luthi</a> again, this time unearthing the private method <code>cache_print</code> as a way to get some visibility into <a href="http://nshipster.com/nscache/"><code>NSCache</code></a>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">extern</span> <span class="kt">void</span> <span class="nf">cache_print</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">cache</span><span class="p">);</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">printCache:</span><span class="p">(</span><span class="n">NSCache</span> <span class="o">*</span><span class="p">)</span><span class="nv">cache</span> <span class="p">{</span>
    <span class="n">cache_print</span><span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="kt">void</span> <span class="o">**</span><span class="p">)(</span><span class="n">__bridge</span> <span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">cache</span> <span class="o">+</span> <span class="mi">3</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div>
<p>This code sample has only been tested on iOS, and should only be used for debugging (i.e. take this out before submitting to Apple!).</p>

<hr>

<p>Thanks again to everyone for their submissions this time around. We&#39;ll definitely be doing this again, so feel free to send your favorite piece of Objective-C trivia, framework arcana, hidden Xcode feature, or anything else you think is cool to <a href="https://twitter.com/nshipster">@NSHipster</a>!</p>

<p>And thank you, dear reader, for your support of NSHipster over these last wonderful months. We have a lot of insanely great things planned for NSHipster in 2013, and we look forward to being able to share it all with all of you.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 31 Dec 2012 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:55:"http://nshipster.com/reader-submissions-new-years-2013/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:55:"http://nshipster.com/reader-submissions-new-years-2013/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:65;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:10:"CGGeometry";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:13169:"<p>Unless you were a Math Geek or an Ancient Greek, Geometry was probably not your favorite subject in high school. No, chances are that you were that kid in class who dutifully programmed all of the necessary formulæ into your TI-8X calculator.</p>

<p>So for those of you who spent more time learning TI-BASIC than Euclidean geometry, here&#39;s the cheat-sheet for how geometry works in <a href="https://developer.apple.com/library/mac/#documentation/graphicsimaging/Conceptual/drawingwithquartz2d/Introduction/Introduction.html#//apple_ref/doc/uid/TP30001066">Quartz 2D</a>, the drawing system used in iOS and Mac OS X:</p>

<ul>
<li><p>A <code>CGPoint</code> is a struct that represents a point in a two-dimensional coordinate system. For iOS, the origin is at the top-left, so points move right and down as their <code>x</code> and <code>y</code> values, respectively, increase. OS X, by contrast, is oriented with <code>(0, 0)</code> in the bottom left, with <code>y</code> moving up as it increases.</p></li>
<li><p>A <code>CGSize</code> is a struct that represents the dimensions of <code>width</code> and <code>height</code>.</p></li>
<li><p>A <code>CGRect</code> is a struct with both a <code>CGPoint</code> (<code>origin</code>) and a <code>CGSize</code> (<code>size</code>), representing a rectangle drawn from its <code>origin</code> point with the <code>width</code> and <code>height</code> of its <code>size</code>.</p></li>
</ul>

<p>Because <code>CGRect</code> is used to represent the <code>frame</code> of every view drawn on screen, a programmer&#39;s success in graphical programming is contingent on their ability to effectively manipulate rectangle geometry.</p>

<p>Fortunately for us, Quartz comes with a slew of useful functions to reduce the amount of floating point math we have to do ourselves. As central as view programming is to Cocoa, and as useful as these functions are, however, they remain relatively unknown to most iOS developers.</p>

<p>This will not stand! Let&#39;s shine some light on the most useful functions and save y&#39;all some typing!</p>

<hr>

<h2>Transformations</h2>

<p>First on our list are the geometric transformations. These functions return a <code>CGRect</code>, which is the result of performing a particular set of operations on the passed rectangle.</p>

<h3><code>CGRectOffset</code></h3>

<blockquote>
<p><code>CGRectOffset</code>: Returns a rectangle with an origin that is offset from that of the source rectangle.</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">CGRect</span> <span class="n">CGRectOffset</span><span class="p">(</span>
  <span class="n">CGRect</span> <span class="n">rect</span><span class="p">,</span>
  <span class="n">CGFloat</span> <span class="n">dx</span><span class="p">,</span>
  <span class="n">CGFloat</span> <span class="n">dy</span>
<span class="p">)</span>
</code></pre></div>
<p>Consider using this anytime you&#39;re changing the origin of a rectangle. Not only can it save a line of code when changing both the horizontal and vertical position, but more importantly, it represents the translation more semantically than manipulating the origin values individually.</p>

<h3><code>CGRectInset</code></h3>

<blockquote>
<p><code>CGRectInset</code>: Returns a rectangle that is smaller or larger than the source rectangle, with the same center point.</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">CGRect</span> <span class="n">CGRectInset</span><span class="p">(</span>
  <span class="n">CGRect</span> <span class="n">rect</span><span class="p">,</span>
  <span class="n">CGFloat</span> <span class="n">dx</span><span class="p">,</span>
  <span class="n">CGFloat</span> <span class="n">dy</span>
<span class="p">)</span>
</code></pre></div>
<p>Want to make a view-within-a-view look good? Give it a nice 10pt padding with <code>CGRectInset</code>. Keep in mind that the rectangle will be resized around its center by ± <code>dx</code> on its left and right edge (for a total of <code>2 × dx</code>), and ± <code>dy</code> on its top and bottom edge (for a total of <code>2 × dy</code>).</p>

<p>If you&#39;re using <code>CGRectInset</code> as a convenience function for resizing a rectangle, it is common to chain this with <code>CGRectOffset</code> by passing the result of <code>CGRectInset</code> as the <code>rect</code> argument in <code>CGRectOffset</code>.</p>

<h3><code>CGRectIntegral</code></h3>

<blockquote>
<p><code>CGRectIntegral</code>: Returns the smallest rectangle that results from converting the source rectangle values to integers.</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">CGRect</span> <span class="n">CGRectIntegral</span> <span class="p">(</span>
  <span class="n">CGRect</span> <span class="n">rect</span>
<span class="p">)</span>
</code></pre></div>
<p>It&#39;s important that <code>CGRect</code> values all are rounded to the nearest whole point. Fractional values cause the frame to be drawn on a <em>pixel boundary</em>. Because pixels are atomic units (cannot be subdivided†) a fractional value will cause the drawing to be averaged over the neighboring pixels, which looks blurry.</p>

<p><code>CGRectIntegral</code> will <code>floor</code> each origin value, and <code>ceil</code> each size value, which will ensure that your drawing code will crisply align on pixel boundaries.</p>

<p>As a rule of thumb, if you are performing any operations that could result in fractional point values (e.g. division, <code>CGGetMid[X|Y]</code>, or <code>CGRectDivide</code>), use <code>CGRectIntegral</code> to normalize rectangles to be set as a view frame.</p>

<blockquote>
<p>† Technically, since the coordinate system operates in terms of points, Retina screens, which have 4 pixels for every point, can draw <code>± 0.5f</code> point values on odd pixels without blurriness.</p>
</blockquote>

<h2>Value Helper Functions</h2>

<p>These functions provide a shorthand way to calculate interesting dimensional values about a particular <code>CGRect</code>.</p>

<h3><code>CGRectGet[Min|Mid|Max][X|Y]</code></h3>

<ul>
<li><code>CGRectGetMinX</code></li>
<li><code>CGRectGetMinY</code></li>
<li><code>CGRectGetMidX</code></li>
<li><code>CGRectGetMidY</code></li>
<li><code>CGRectGetMaxX</code></li>
<li><code>CGRectGetMaxY</code></li>
</ul>

<p>These six functions return the minimum, middle, or maximum <code>x</code> or <code>y</code> value for a rectangle, taking the form:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">CGFloat</span> <span class="n">CGRectGet</span><span class="p">[</span><span class="n">Min</span><span class="o">|</span><span class="n">Mid</span><span class="o">|</span><span class="n">Max</span><span class="p">][</span><span class="n">X</span><span class="o">|</span><span class="n">Y</span><span class="p">]</span> <span class="p">(</span>
  <span class="n">CGRect</span> <span class="n">rect</span>
<span class="p">)</span>
</code></pre></div>
<p>These functions will replace code like <code>frame.origin.x + frame.size.width</code> with cleaner, more semantically expressive equivalents (especially with the mid and max functions).</p>

<h3><code>CGRectGet[Width|Height]</code></h3>

<blockquote>
<p><code>CGRectGetHeight</code>: Returns the height of a rectangle.</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">CGFloat</span> <span class="n">CGRectGetHeight</span> <span class="p">(</span>
   <span class="n">CGRect</span> <span class="n">rect</span>
<span class="p">)</span>
</code></pre></div>
<blockquote>
<p><code>CGRectGetWidth</code>: Returns the width of a rectangle.</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">CGFloat</span> <span class="n">CGRectGetWidth</span> <span class="p">(</span>
   <span class="n">CGRect</span> <span class="n">rect</span>
<span class="p">)</span>
</code></pre></div>
<p>Much like the previous functions, <code>CGRectGetWidth</code> &amp; <code>CGRectGetHeight</code> are often preferable to returning the corresponding member of a <code>CGRect</code>&#39;s <code>size</code>. While it&#39;s not extremely competitive in terms of character savings, remember that semantic clarity trumps brevity every time.</p>

<h2>Identities</h2>

<p>There are three special rectangle values, each of which have unique properties that are important to know about:</p>

<h3><code>CGRectZero</code>, <code>CGRectNull</code>, &amp; <code>CGRectInfinite</code></h3>

<blockquote>
<ul>
<li><code>const CGRect CGRectZero</code>: A rectangle constant with location (0,0), and width and height of 0. The zero rectangle is equivalent to CGRectMake(0.0f, 0.0f, 0.0f, 0.0f).</li>
<li><code>const CGRect CGRectNull</code>: The null rectangle. This is the rectangle returned when, for example, you intersect two disjoint rectangles. <strong>Note that the null rectangle is not the same as the zero rectangle</strong>.</li>
<li><code>const CGRect CGRectInfinite</code>: A rectangle that has infinite extent.</li>
</ul>
</blockquote>

<p><code>CGRectZero</code> is perhaps the most useful of all of the special rectangle values. When initializing subviews, their frames are often initialized to <code>CGRectZero</code>, deferring their layout to <code>-layoutSubviews</code>.</p>

<p><code>CGRectNull</code> is distinct from <code>CGRectZero</code>, despite any implied correspondence to <code>NULL</code> == <code>0</code>. This value is conceptually similar to <code>NSNotFound</code>, in that it represents the absence of an expected value. Be aware of what functions can return <code>CGRectNull</code>, and be prepared to handle it accordingly, by testing with <code>CGRectIsNull</code>.</p>

<p><code>CGRectInfinite</code> is the most exotic of all, and has some of the most interesting properties. It intersects with all points and rectangles, contains all rectangles, and its union with any rectangle is itself. Use <code>CGRectIsInfinite</code> to check to see if a rectangle is infinite.</p>

<h2>And Finally...</h2>

<p>Behold, the most obscure, misunderstood, and useful of the <code>CGGeometry</code> functions: <code>CGRectDivide</code>.</p>

<h2><code>CGRectDivide</code></h2>

<blockquote>
<p><code>CGRectDivide</code>: Divides a source rectangle into two component rectangles.</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="kt">void</span> <span class="n">CGRectDivide</span><span class="p">(</span>
  <span class="n">CGRect</span> <span class="n">rect</span><span class="p">,</span>
  <span class="n">CGRect</span> <span class="o">*</span><span class="n">slice</span><span class="p">,</span>
  <span class="n">CGRect</span> <span class="o">*</span><span class="n">remainder</span><span class="p">,</span>
  <span class="n">CGFloat</span> <span class="n">amount</span><span class="p">,</span>
  <span class="n">CGRectEdge</span> <span class="n">edge</span>
<span class="p">)</span>
</code></pre></div>
<p><code>CGRectDivide</code> divides a rectangle into two components in the following way:</p>

<ul>
<li>Take a rectangle and choose an <code>edge</code> (left, right, top, or bottom).</li>
<li>Measure out an <code>amount</code> from that edge.</li>
<li>Everything from the <code>edge</code> to the measured <code>amount</code> is stored in the rectangle referenced in the <code>slice</code> argument.</li>
<li>The rest of the original rectangle is stored in the <code>remainder</code> out argument.</li>
</ul>

<p>That <code>edge</code> argument takes a value from the <code>CGRectEdge</code> enum:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">enum</span> <span class="n">CGRectEdge</span> <span class="p">{</span>
   <span class="n">CGRectMinXEdge</span><span class="p">,</span>
   <span class="n">CGRectMinYEdge</span><span class="p">,</span>
   <span class="n">CGRectMaxXEdge</span><span class="p">,</span>
   <span class="n">CGRectMaxYEdge</span>
<span class="p">}</span>
</code></pre></div>
<p><code>CGRectDivide</code> is perfect for dividing up available space among several views (call it on subsequent <code>remainder</code> amounts to accommodate more than two views). Give it a try next time you&#39;re manually laying-out a <code>UITableViewCell</code>.</p>

<hr>

<p>So what if you didn&#39;t pay attention in Geometry class--this is the real world, and in the real world, you have <code>CGGeometry.h</code></p>

<p>Know it well, and you&#39;ll be on your way to discovering great new user interfaces in your apps. Do good enough of a job with that, and you may run into the greatest arithmetic problem of all: adding up all of the money you&#39;ll make with your awesome new app. Mathematical!</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 17 Dec 2012 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:32:"http://nshipster.com/cggeometry/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:32:"http://nshipster.com/cggeometry/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:66;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:12:"instancetype";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:7995:"<p>Want to know what&#39;s coming next in Objective-C? <a href="http://clang.llvm.org/docs/LanguageExtensions.html">Keep your ear to the ground</a>.</p>

<p>Objective-C is a rapidly evolving language, in a way that you just don&#39;t see in established programming languages. ARC, object literals, subscripting, blocks: in the span of just three years, so much of how we program in Objective-C has been changed (for the better).</p>

<p>All of this innovation is a result of Apple&#39;s philosophy of vertical integration. Just as Apple&#39;s investment in designing <a href="http://en.wikipedia.org/wiki/Apple_A4">its own chipsets</a> gave them leverage to compete aggressively with their mobile hardware, so too has their investment in <a href="http://llvm.org">LLVM</a> allowed their software to keep pace.</p>

<p>Clang developments range from the mundane to paradigm-changing, but telling the difference takes practice. Because we&#39;re talking about low-level language features, it&#39;s difficult to understand what implications they may have higher up with API design.</p>

<p>One such example is <code>instancetype</code>, the subject of this week&#39;s article.</p>

<hr>

<p>In Objective-C, conventions aren&#39;t just a matter of coding best-practices, they are implicit instructions to the compiler.</p>

<p>For example, <code>alloc</code> and <code>init</code> both have return types of <code>id</code>, yet in Xcode, the compiler makes all of the correct type checks. How is this possible?</p>

<p>In Cocoa, there is a convention that methods with names like <code>alloc</code>, or <code>init</code> always return objects that are an instance of the receiver class. These methods are said to have a <strong>related result type</strong>.</p>

<p>Class constructor methods, although they similarly return <code>id</code>, don&#39;t get the same type-checking benefit, because they don&#39;t follow that naming convention.</p>

<p>You can try this out for yourself:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[[[</span><span class="n">NSArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">mediaPlaybackAllowsAirPlay</span><span class="p">];</span> <span class="c1">// ❗ &quot;No visible @interface for `NSArray` declares the selector `mediaPlaybackAllowsAirPlay`&quot;</span>

<span class="p">[[</span><span class="n">NSArray</span> <span class="n">array</span><span class="p">]</span> <span class="n">mediaPlaybackAllowsAirPlay</span><span class="p">];</span> <span class="c1">// (No error)</span>
</code></pre></div>
<p>Because <code>alloc</code> and <code>init</code> follow the naming convention for being a related result type, the correct type check against <code>NSArray</code> is performed. However, the equivalent class constructor <code>array</code> does not follow that convention, and is interpreted as <code>id</code>.</p>

<p><code>id</code> is useful for opting-out of type safety, but losing it when you <em>do</em> want it sucks.</p>

<p>The alternative, of explicitly declaring the return type (<code>(NSArray *)</code> in the previous example) is a slight improvement, but is annoying to write, and doesn&#39;t play nicely with subclasses.</p>

<p>This is where the compiler steps in to resolve this timeless edge case to the Objective-C type system:</p>

<p><code>instancetype</code> is a contextual keyword that can be used as a result type to signal that a method returns a related result type. For example:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">Person</span>
<span class="k">+</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">personWithName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div>
<blockquote>
<p><code>instancetype</code>, unlike <code>id</code>, can only be used as the result type in a method declaration.</p>
</blockquote>

<p>With <code>instancetype</code>, the compiler will correctly infer that the result of <code>+personWithName:</code> is an instance of a <code>Person</code>.</p>

<p>Look for class constructors in Foundation to start using <code>instancetype</code> in the near future. New APIs, such as <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UICollectionViewLayoutAttributes_class/Reference/Reference.html">UICollectionViewLayoutAttributes</a> are using <code>instancetype</code> already.</p>

<h2>Further Implications</h2>

<p>Language features are particularly interesting because, again, it&#39;s often unclear of what impact they&#39;ll have on higher-level aspects of software design.</p>

<p>While <code>instancetype</code> may seem to be a rather mundane, albeit welcome addition to the compiler, it can be used to some rather clever ends.</p>

<p><a href="https://twitter.com/jonsterling">Jonathan Sterling</a> wrote <a href="http://www.jonmsterling.com/posts/2012-02-05-typed-collections-with-self-types-in-objective-c.html">this quite interesting article</a>, detailing how <code>instancetype</code> could be used to encode statically-typed collections, without <a href="http://en.wikipedia.org/wiki/Generic_programming">generics</a>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSURL</span> <span class="o">&lt;</span><span class="n">MapCollection</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">sites</span> <span class="o">=</span> <span class="p">(</span><span class="kt">id</span><span class="p">)[</span><span class="n">NSURL</span> <span class="n">mapCollection</span><span class="p">];</span>
<span class="p">[</span><span class="n">sites</span> <span class="n">put</span><span class="o">:</span><span class="p">[</span><span class="n">NSURL</span> <span class="n">URLWithString</span><span class="o">:</span><span class="s">@&quot;http://www.jonmsterling.com/&quot;</span><span class="p">]</span>
        <span class="nl">at:</span><span class="s">@&quot;jon&quot;</span><span class="p">];</span>
<span class="p">[</span><span class="n">sites</span> <span class="n">put</span><span class="o">:</span><span class="p">[</span><span class="n">NSURL</span> <span class="n">URLWithString</span><span class="o">:</span><span class="s">@&quot;http://www.nshipster.com/&quot;</span><span class="p">]</span>
        <span class="nl">at:</span><span class="s">@&quot;nshipster&quot;</span><span class="p">];</span>

<span class="n">NSURL</span> <span class="o">*</span><span class="n">jonsSite</span> <span class="o">=</span> <span class="p">[</span><span class="n">sites</span> <span class="n">at</span><span class="o">:</span><span class="s">@&quot;jon&quot;</span><span class="p">];</span> <span class="c1">// =&gt; http://www.jonmsterling.com/</span>
</code></pre></div>
<p>Statically-typed collections would make APIs more expressive--no longer would a developer be unsure about what kinds of objects are allowed in a collection parameter.</p>

<p>Whether or not this becomes an accepted convention in Objective-C, it&#39;s fascinating to how a low-level feature like <code>instancetype</code> can be used to change shape of the language (in this case, making it look more like <a href="http://en.wikipedia.org/wiki/C_Sharp_(programming_language)">C#</a>.</p>

<hr>

<p><code>instancetype</code> is just one of the many language extensions to Objective-C, with more being added with each new release.</p>

<p>Know it, love it.</p>

<p>And take it as an example of how paying attention to the low-level details can give you insights into powerful new ways to transform Objective-C.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 10 Dec 2012 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:34:"http://nshipster.com/instancetype/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:34:"http://nshipster.com/instancetype/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:67;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:24:"KVC Collection Operators";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:14151:"<p>Rubyists laugh at Objective-C&#39;s bloated syntax.</p>

<p>Although we lost a few pounds over the summer with our <a href="http://nshipster.com/at-compiler-directives/">sleek new object literals</a>, those Red-headed bullies still taunt us with their <code>map</code> one-liners and their fancy <a href="http://pragdave.pragprog.com/pragdave/2005/11/symbolto_proc.html"><code>Symbol#to_proc</code></a>.</p>

<p>Really, a lot of how elegant (or clever) a language is comes down to how well it avoids loops. <code>for</code>, <code>while</code>; even <a href="http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/objectivec/Chapters/ocFastEnumeration.html">fast enumeration expressions</a> are a drag. No matter how you sugar-coat them, loops will be a block of code that does something that is much simpler to describe in natural language.</p>

<p>&quot;get me the average salary of all of the employees in this array&quot;, versus...</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="kt">double</span> <span class="n">totalSalary</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
<span class="k">for</span> <span class="p">(</span><span class="n">Employee</span> <span class="o">*</span><span class="n">employee</span> <span class="k">in</span> <span class="n">employees</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">totalSalary</span> <span class="o">+=</span> <span class="p">[</span><span class="n">employee</span><span class="p">.</span><span class="n">salary</span> <span class="n">doubleValue</span><span class="p">];</span>
<span class="p">}</span>
<span class="kt">double</span> <span class="n">averageSalary</span> <span class="o">=</span> <span class="n">totalSalary</span> <span class="o">/</span> <span class="p">[</span><span class="n">employees</span> <span class="n">count</span><span class="p">];</span>
</code></pre></div>
<p>Meh.</p>

<p>Fortunately, <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/KeyValueCoding/Articles/KeyValueCoding.html">Key-Value Coding</a> gives us a much more concise--almost Ruby-like--way to do this:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[</span><span class="n">employees</span> <span class="n">valueForKeyPath</span><span class="o">:</span><span class="s">@&quot;@avg.salary&quot;</span><span class="p">];</span>
</code></pre></div>
<p><a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/KeyValueCoding/Articles/CollectionOperators.html#//apple_ref/doc/uid/20002176-BAJEAIEE">KVC Collection Operators</a> allows actions to be performed on a collection using key path notation in <code>valueForKeyPath:</code>. Any time you see <code>@</code> in a key path, it denotes a particular aggregate function whose result can be returned or chained, just like any other key path.</p>

<p>Collection Operators fall into one of three different categories, according to the kind of value they return:</p>

<ul>
<li><strong>Simple Collection Operators</strong> return strings, numbers, or dates, depending on the operator.</li>
<li><strong>Object Operators</strong> return an array.</li>
<li><strong>Array and Set Operators</strong> return an array or set, depending on the operator.</li>
</ul>

<p>The best way to understand how these work is to see them in action. Consider a <code>Product</code> class, and a <code>products</code> array with the following data:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">Product</span> : <span class="nc">NSObject</span>
<span class="k">@property</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
<span class="k">@property</span> <span class="kt">double</span> <span class="n">price</span><span class="p">;</span>
<span class="k">@property</span> <span class="n">NSDate</span> <span class="o">*</span><span class="n">launchedOn</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div>
<blockquote>
<p>Key-Value Coding automatically boxes and un-boxes scalars into <code>NSNumber</code> or <code>NSValue</code> as necessary to make everything work.</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Price</th>
      <th>Launch Date</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>iPhone 5</td>
      <td>$199</td>
      <td>September 21, 2012</td>
    </tr>
    <tr>
      <td>iPad Mini</td>
      <td>$329</td>
      <td>November 2, 2012</td>
    </tr>
    <tr>
      <td>MacBook Pro</td>
      <td>$1699</td>
      <td>June 11, 2012</td>
    </tr>
    <tr>
      <td>iMac</td>
      <td>$1299</td>
      <td>November 2, 2012</td>
    </tr>
  </tbody>
</table>

<h3>Simple Collection Operators</h3>

<ul>
<li><code>@count</code>: Returns the number of objects in the collection as an <code>NSNumber</code>.</li>
<li><code>@sum</code>: Converts each object in the collection to a <code>double</code>, computes the sum, and returns the sum as an <code>NSNumber</code>.</li>
<li><code>@avg</code>: Takes the <code>double</code> value of each object in the collection, and returns the average value as an <code>NSNumber</code>.</li>
<li><code>@max</code>: Determines the maximum value using <code>compare:</code>. Objects must support comparison with one another for this to work.</li>
<li><code>@min</code>: Same as <code>@max</code>, but returns the minimum value in the collection.</li>
</ul>

<p><em>Example</em>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[</span><span class="n">products</span> <span class="n">valueForKeyPath</span><span class="o">:</span><span class="s">@&quot;@count&quot;</span><span class="p">];</span> <span class="c1">// 4</span>
<span class="p">[</span><span class="n">products</span> <span class="n">valueForKeyPath</span><span class="o">:</span><span class="s">@&quot;@sum.price&quot;</span><span class="p">];</span> <span class="c1">// 3526.00</span>
<span class="p">[</span><span class="n">products</span> <span class="n">valueForKeyPath</span><span class="o">:</span><span class="s">@&quot;@avg.price&quot;</span><span class="p">];</span> <span class="c1">// 881.50</span>
<span class="p">[</span><span class="n">products</span> <span class="n">valueForKeyPath</span><span class="o">:</span><span class="s">@&quot;@max.price&quot;</span><span class="p">];</span> <span class="c1">// 1699.00</span>
<span class="p">[</span><span class="n">products</span> <span class="n">valueForKeyPath</span><span class="o">:</span><span class="s">@&quot;@min.launchedOn&quot;</span><span class="p">];</span> <span class="c1">// June 11, 2012</span>
</code></pre></div>
<blockquote>
<p>Pro Tip: To get the aggregate value of an array or set of <code>NSNumber</code>s, you can simply pass <code>self</code> as the key path after the operator, e.g. <code>[@[@(1), @(2), @(3)] valueForKeyPath:@&quot;@max.self&quot;]</code> (/via <a href="http://twitter.com/davandermobile">@davandermobile</a>, citing <a href="http://objectivesea.tumblr.com/post/34552840247/max-value-nsset-kvc">Objective Sea</a>)</p>
</blockquote>

<h3>Object Operators</h3>

<p>Let&#39;s say we have an <code>inventory</code> array, representing the current stock of our local Apple store (which is running low on iPad Mini, and doesn&#39;t have the new iMac, which hasn&#39;t shipped yet):</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSArray</span> <span class="o">*</span><span class="n">inventory</span> <span class="o">=</span> <span class="p">@[</span><span class="n">iPhone5</span><span class="p">,</span> <span class="n">iPhone5</span><span class="p">,</span> <span class="n">iPhone5</span><span class="p">,</span> <span class="n">iPadMini</span><span class="p">,</span> <span class="n">macBookPro</span><span class="p">,</span> <span class="n">macBookPro</span><span class="p">];</span>
</code></pre></div>
<ul>
<li><code>@unionOfObjects</code> / <code>@distinctUnionOfObjects</code>: Returns an array of the objects in the property specified in the key path to the right of the operator. <code>@distinctUnionOfObjects</code> removes duplicates, whereas <code>@unionOfObjects</code> does not.</li>
</ul>

<p><em>Example</em>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[</span><span class="n">inventory</span> <span class="n">valueForKeyPath</span><span class="o">:</span><span class="s">@&quot;@unionOfObjects.name&quot;</span><span class="p">];</span> <span class="c1">// &quot;iPhone 5&quot;, &quot;iPhone 5&quot;, &quot;iPhone 5&quot;, &quot;iPad Mini&quot;, &quot;MacBook Pro&quot;, &quot;MacBook Pro&quot;</span>
<span class="p">[</span><span class="n">inventory</span> <span class="n">valueForKeyPath</span><span class="o">:</span><span class="s">@&quot;@distinctUnionOfObjects.name&quot;</span><span class="p">];</span> <span class="c1">// &quot;iPhone 5&quot;, &quot;iPad Mini&quot;, &quot;MacBook Pro&quot;</span>
</code></pre></div>
<h3>Array and Set Operators</h3>

<p>Array and Set Operators are similar to Object Operators, but they work on collections of <code>NSArray</code> and <code>NSSet</code>.</p>

<p>This would be useful if we were to, for example, compare the inventory of several stores, say <code>appleStoreInventory</code>, (same as in the previous example) and <code>verizonStoreInventory</code> (which sells iPhone 5 and iPad Mini, and has both in stock).</p>

<ul>
<li><code>@distinctUnionOfArrays</code> / <code>@unionOfArrays</code>: Returns an array containing the combined values of each array in the collection, as specified by the key path to the right of the operator. As you&#39;d expect, the <code>distinct</code> version removes duplicate values.</li>
<li><code>@distinctUnionOfSets</code>: Similar to <code>@distinctUnionOfArrays</code>, but it expects an <code>NSSet</code> containing <code>NSSet</code> objects, and returns an <code>NSSet</code>. Because sets can&#39;t contain duplicate values anyway, there is only the <code>distinct</code> operator.</li>
</ul>

<p><em>Example</em>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[@[</span><span class="n">appleStoreInventory</span><span class="p">,</span> <span class="n">verizonStoreInventory</span><span class="p">]</span> <span class="n">valueForKeyPath</span><span class="o">:</span><span class="s">@&quot;@distinctUnionOfArrays.name&quot;</span><span class="p">];</span> <span class="c1">// &quot;iPhone 5&quot;, &quot;iPad Mini&quot;, &quot;MacBook Pro&quot;</span>
</code></pre></div>
<hr>

<h2>This is Probably a Terrible Idea</h2>

<p>Curiously, <a href="http://developer.apple.com/library/ios/#documentation/cocoa/conceptual/KeyValueCoding/Articles/CollectionOperators.html">Apple&#39;s documentation on KVC collection operators</a> goes out of its way to make the following point:</p>

<blockquote>
<p><strong>Note</strong>: It is not currently possible to define your own collection operators.</p>
</blockquote>

<p>This makes sense to spell out, since that&#39;s what most people are thinking about once they see collection operators for the first time.</p>

<p>However, as it turns out, it <em>is</em> actually possible, with a little help from our friend, <code>objc/runtime</code>.</p>

<p><a href="https://twitter.com/gte">Guy English</a> has a <a href="http://kickingbear.com/blog/archives/9">pretty amazing post</a> wherein he <a href="https://gist.github.com/4196641#file_kb_collection_extensions.m">swizzles <code>valueForKeyPath:</code></a> to parse a custom-defined <a href="http://en.wikipedia.org/wiki/Domain-specific_language">DSL</a>, which extends the existing offerings to interesting effect:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSArray</span> <span class="o">*</span><span class="n">names</span> <span class="o">=</span> <span class="p">[</span><span class="n">allEmployees</span> <span class="n">valueForKeyPath</span><span class="o">:</span> <span class="s">@&quot;[collect].{daysOff&lt;10}.name&quot;</span><span class="p">];</span>
</code></pre></div>
<p>This code would get the names of anyone who has taken fewer than 10 days off (to remind them to take a vacation, no doubt!).</p>

<p>Or, taken to a ridiculous extreme:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSArray</span> <span class="o">*</span><span class="n">albumCovers</span> <span class="o">=</span> <span class="p">[</span><span class="n">records</span> <span class="n">valueForKeyPath</span><span class="o">:</span><span class="s">@&quot;[collect].{artist like &#39;Bon Iver&#39;}.&lt;NSUnarchiveFromDataTransformerName&gt;.albumCoverImageData&quot;</span><span class="p">];</span>
</code></pre></div>
<p>Eat your heart out, Ruby. This one-liner filters a record collection for artists whose name matches &quot;Bon Iver&quot;, and initializes an <code>NSImage</code> from the album cover image data of the matching albums.</p>

<p>Is this a good idea? Probably not. (<code>NSPredicate</code> is rad, and breaking complicated logic up is under-rated)</p>

<p>Is this insanely cool? You bet! This clever example has shown a possible direction for future Objective-C DSLs and meta-programming.</p>

<hr>

<p>KVC Collection Operators are a must-know for anyone who wants to save a few extra lines of code and look cool in the process.</p>

<p>While scripting languages like Ruby boast considerably more flexibility in its one-liner capability, perhaps we should take a moment to celebrate the restraint built into Objective-C and Collection Operators. After all, Ruby is hella slow, amiright? &lt;/troll&gt;</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 03 Dec 2012 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:46:"http://nshipster.com/kvc-collection-operators/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:46:"http://nshipster.com/kvc-collection-operators/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:68;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:12:"NSOrderedSet";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:10553:"<p>Here&#39;s a question: why isn&#39;t <code>NSOrderedSet</code> a subclass of <code>NSSet</code>?</p>

<p>It seems perfectly logical, after all, for <code>NSOrderedSet</code>--a class that enforces the same uniqueness constraint of <code>NSSet</code>--to be a <em>subclass</em> of <code>NSSet</code>. It has the same methods as <code>NSSet</code>, with the addition of some <code>NSArray</code>-style methods like <code>objectAtIndex:</code>. By all accounts, it would seem to perfectly satisfy the requirements of the <a href="http://en.wikipedia.org/wiki/Liskov_substitution_principle">Liskov substitution principle</a>, that:</p>

<blockquote>
<p>If <code>S</code> is a subtype of <code>T</code>, then objects of type <code>T</code> in a program may be replaced with objects of type <code>S</code> without altering any of the desirable properties of that program.</p>
</blockquote>

<p>So why is <code>NSOrderedSet</code> a subclass of <code>NSObject</code> and not <code>NSSet</code> or even <code>NSArray</code>?</p>

<p><em>Mutable / Immutable Class Clusters</em></p>

<p><a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CocoaFundamentals/CocoaObjects/CocoaObjects.html%23//apple_ref/doc/uid/TP40002974-CH4-SW34">Class Clusters</a> are a design pattern at the heart of the Foundation framework; the essence of Objective-C&#39;s simplicity in everyday use.</p>

<p>But class clusters offer simplicity at the expense of extensibility, which becomes especially tricky when it comes to mutable / immutable class pairs like <code>NSSet</code> / <code>NSMutableSet</code>.</p>

<p>As expertly demonstrated by <a href="http://tomdalling.com">Tom Dalling</a> in <a href="http://stackoverflow.com/questions/11278995/why-doesnt-nsorderedset-inherit-from-nsset">this Stack Overflow question</a>, the method <code>-mutableCopy</code> creates an inconsistency that is inherent to Objective-C&#39;s constraint on single inheritance.</p>

<p>To start, let&#39;s look at how <code>-mutableCopy</code> is supposed to work in a class cluster:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSSet</span><span class="o">*</span> <span class="n">immutable</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSet</span> <span class="n">set</span><span class="p">];</span>
<span class="n">NSMutableSet</span><span class="o">*</span> <span class="n">mutable</span> <span class="o">=</span> <span class="p">[</span><span class="n">immutable</span> <span class="n">mutableCopy</span><span class="p">];</span>

<span class="p">[</span><span class="n">mutable</span> <span class="n">isKindOfClass</span><span class="o">:</span><span class="p">[</span><span class="n">NSSet</span> <span class="n">class</span><span class="p">]];</span> <span class="c1">// YES</span>
<span class="p">[</span><span class="n">mutable</span> <span class="n">isKindOfClass</span><span class="o">:</span><span class="p">[</span><span class="n">NSMutableSet</span> <span class="n">class</span><span class="p">]];</span> <span class="c1">// YES</span>
</code></pre></div>
<p>Now let&#39;s suppose that <code>NSOrderedSet</code> was indeed a subclass of <code>NSSet</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="c1">// @interface NSOrderedSet : NSSet</span>

<span class="n">NSOrderedSet</span><span class="o">*</span> <span class="n">immutable</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSOrderedSet</span> <span class="n">orderedSet</span><span class="p">];</span>
<span class="n">NSMutableOrderedSet</span><span class="o">*</span> <span class="n">mutable</span> <span class="o">=</span> <span class="p">[</span><span class="n">immutable</span> <span class="n">mutableCopy</span><span class="p">];</span>

<span class="p">[</span><span class="n">mutable</span> <span class="n">isKindOfClass</span><span class="o">:</span><span class="p">[</span><span class="n">NSSet</span> <span class="n">class</span><span class="p">]];</span> <span class="c1">// YES</span>
<span class="p">[</span><span class="n">mutable</span> <span class="n">isKindOfClass</span><span class="o">:</span><span class="p">[</span><span class="n">NSMutableSet</span> <span class="n">class</span><span class="p">]];</span> <span class="c1">// NO (!)</span>
</code></pre></div>
<p><object data="http://nshipster.s3.amazonaws.com/nsorderedset-case-1.svg" type="image/svg+xml">
  <img src="http://nshipster.s3.amazonaws.com/nsorderedset-case-1.png" />
</object></p>

<p>That&#39;s no good... since <code>NSMutableOrderedSet</code> couldn&#39;t be used as a method parameter of type <code>NSMutableSet</code>. So what happens if we make <code>NSMutableOrderedSet</code> a subclass of <code>NSMutableSet</code> as well?</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="c1">// @interface NSOrderedSet : NSSet</span>
<span class="c1">// @interface NSMutableOrderedSet : NSMutableSet</span>

<span class="n">NSOrderedSet</span><span class="o">*</span> <span class="n">immutable</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSOrderedSet</span> <span class="n">orderedSet</span><span class="p">];</span>
<span class="n">NSMutableOrderedSet</span><span class="o">*</span> <span class="n">mutable</span> <span class="o">=</span> <span class="p">[</span><span class="n">immutable</span> <span class="n">mutableCopy</span><span class="p">];</span>

<span class="p">[</span><span class="n">mutable</span> <span class="n">isKindOfClass</span><span class="o">:</span><span class="p">[</span><span class="n">NSSet</span> <span class="n">class</span><span class="p">]];</span> <span class="c1">// YES</span>
<span class="p">[</span><span class="n">mutable</span> <span class="n">isKindOfClass</span><span class="o">:</span><span class="p">[</span><span class="n">NSMutableSet</span> <span class="n">class</span><span class="p">]];</span> <span class="c1">// YES</span>
<span class="p">[</span><span class="n">mutable</span> <span class="n">isKindOfClass</span><span class="o">:</span><span class="p">[</span><span class="n">NSOrderedSet</span> <span class="n">class</span><span class="p">]];</span> <span class="c1">// NO (!)</span>
</code></pre></div>
<p><object data="http://nshipster.s3.amazonaws.com/nsorderedset-case-2.svg" type="image/svg+xml">
  <img src="http://nshipster.s3.amazonaws.com/nsorderedset-case-2.png" />
</object></p>

<p>This is perhaps even worse, as now <code>NSMutableOrderedSet</code> couldn&#39;t be used as a method parameter expecting an <code>NSOrderedSet</code>.</p>

<p>No matter how we approach it, we can&#39;t stack a mutable / immutable class pair on top of another existing mutable / immutable class pair. It just won&#39;t work in Objective-C.</p>

<p>Rather than subject ourselves to the perils of <a href="http://en.wikipedia.org/wiki/Multiple_inheritance">multiple inheritance</a>, we could use Protocols to get us out of this pickle (as it does every other time the spectre of multiple inheritance is raised). Indeed, Foundation&#39;s collection classes <em>could</em> become more aspect-oriented by adding protocols:</p>

<ul>
<li><code>NSArray : NSObject &lt;NSOrderedCollection&gt;</code></li>
<li><code>NSSet : NSObject &lt;NSUniqueCollection&gt;</code></li>
<li><code>NSOrderedSet : NSObject &lt;NSOrderedCollection, NSUniqueCollection&gt;</code></li>
</ul>

<p>However, to reap any benefit from this arrangement, all of the existing APIs would have to be restructured to have parameters accept <code>id &lt;NSOrderedCollection&gt;</code> instead of <code>NSArray</code>. But the transition would be painful, and would likely open up a whole can of edge cases... which would mean that it would never be fully adopted... which would mean that there&#39;s less incentive to adopt this approach when defining your own APIs... which are less fun to write because there&#39;s now two incompatible ways to do something instead of one... which...</p>

<p>...wait, why would we use <code>NSOrderedSet</code> in the first place, anyway?</p>

<hr>

<p><code>NSOrderedSet</code> was introduced in iOS 5 &amp; Mac OS X 10.7. The only APIs changed to add support for <code>NSOrderedSet</code>, though, were part of <a href="http://developer.apple.com/library/mac/#releasenotes/DataManagement/RN-CoreData/_index.html">Core Data</a>.</p>

<p>This was fantastic news for anyone using Core Data at the time, as it solved one of the long-standing annoyances of not having a way to arbitrarily order relationship collections. Previously, you&#39;d have to add a <code>position</code> attribute, which would be re-calculated every time a collection was modified. There wasn&#39;t a built-in way to validate that your collection positions were unique or that the sequence didn&#39;t have any gaps.</p>

<p>In this way, <code>NSOrderedSet</code> is an <em>answer to our <a href="http://bugreport.apple.com/">prayers</a></em>.</p>

<p>Unfortunately, its very existence in Foundation has created something between an attractive nuisance and a red herring for API designers.</p>

<p>Although it is perfectly suited to that one particular use case in Core Data, <code>NSOrderedSet</code> is probably not a great choice for the majority of APIs that could potentially use it. In cases where a simple collection of objects is passed as a parameter, a simple <code>NSArray</code> does the trick--even if there is an implicit understanding that you shouldn&#39;t have duplicate entries. This is even more the case when order matters for a collection parameter--just use <code>NSArray</code> (there should be code to deal with duplicates in the implementation anyway). If uniqueness does matter, or the semantics of sets makes sense for a particular method, <code>NSSet</code> has and remains a great choice.</p>

<hr>

<p>So, as a general rule: <strong><code>NSOrderedSet</code> is useful for intermediary and internal representations, but you probably shouldn&#39;t introduce it as a method parameters unless it&#39;s particularly well-suited to the semantics of the data model.</strong></p>

<p>If nothing else, <code>NSOrderedSet</code> illuminates some of the fascinating implications of Foundation&#39;s use of the class cluster design pattern. In doing so, it allows us better understand the trade-off between simplicity and extensibility as we make these choices in our own application designs.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 26 Nov 2012 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:34:"http://nshipster.com/nsorderedset/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:34:"http://nshipster.com/nsorderedset/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:69;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:24:"NS_ENUM &amp; NS_OPTIONS";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:7588:"<p>When everything is an object, nothing is.</p>

<p>So, there are a few ways you could parse that, but for the purposes of this article, this is all to say: sometimes it&#39;s nice to be able to drop down to the C layer of things.</p>

<p>Yes--that non-objective part of our favorite Smalltalk-inspired hybrid language, C can be a great asset. It&#39;s fast, it&#39;s battle-tested, it&#39;s the very foundation of modern computing. But more than that, C is the escape hatch for when the Object-Oriented paradigm cracks under its own cognitive weight.</p>

<p>Static functions are nicer than shoe-horned class methods.
Enums are nicer than string constants.
Bitmasks are nicer than arrays of string constants.
Preprocessor directives are nicer than runtime hacks.</p>

<p>A skilled Objective-C developer is able to gracefully switch between Objective and Procedural paradigms, and use each to their own advantage.</p>

<p>And on that note, this week&#39;s topic has to do with two simple-but-handy macros: <code>NS_ENUM</code> and <code>NS_OPTIONS</code>.</p>

<hr>

<p>Introduced in Foundation with iOS 6 / Mac OS X 10.8, the <code>NS_ENUM</code> and <code>NS_OPTIONS</code> macros are the new, preferred way to declare <code>enum</code> types.</p>

<blockquote>
<p>If you&#39;d like to use either macro when targeting a previous version of iOS or OS X, you can simply inline like so:</p>
</blockquote>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="cp">#ifndef NS_ENUM</span>
<span class="cp">#define NS_ENUM(_type, _name) enum _name : _type _name; enum _name : _type</span>
<span class="cp">#endif</span>
</code></pre></div>
<p><code>enum</code>, or enumerated value types, are the C way to define constants for fixed values, like days of the week, or available styles of table view cells. In an <code>enum</code> declaration, constants without explicit values will automatically be assigned values sequentially, starting from <code>0</code>.</p>

<p>There are several legal ways that <code>enum</code>s can be defined. What&#39;s confusing is that there are subtle functional differences between each approach, and without knowing any better, someone is just as likely to use them interchangeably.</p>

<p>For instance:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">enum</span> <span class="p">{</span>
    <span class="n">UITableViewCellStyleDefault</span><span class="p">,</span>
    <span class="n">UITableViewCellStyleValue1</span><span class="p">,</span>
    <span class="n">UITableViewCellStyleValue2</span><span class="p">,</span>
    <span class="n">UITableViewCellStyleSubtitle</span>
<span class="p">};</span>
</code></pre></div>
<p>...declares integer values, but no type.</p>

<p>Whereas:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">typedef</span> <span class="k">enum</span> <span class="p">{</span>
    <span class="n">UITableViewCellStyleDefault</span><span class="p">,</span>
    <span class="n">UITableViewCellStyleValue1</span><span class="p">,</span>
    <span class="n">UITableViewCellStyleValue2</span><span class="p">,</span>
    <span class="n">UITableViewCellStyleSubtitle</span>
<span class="p">}</span> <span class="n">UITableViewCellStyle</span><span class="p">;</span>
</code></pre></div>
<p>...defines the <code>UITableViewCellStyle</code> type, suitable for specifying the type of method parameters.</p>

<p>However, Apple had previously defined all of their <code>enum</code> types as:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">typedef</span> <span class="k">enum</span> <span class="p">{</span>
    <span class="n">UITableViewCellStyleDefault</span><span class="p">,</span>
    <span class="n">UITableViewCellStyleValue1</span><span class="p">,</span>
    <span class="n">UITableViewCellStyleValue2</span><span class="p">,</span>
    <span class="n">UITableViewCellStyleSubtitle</span>
<span class="p">};</span>

<span class="k">typedef</span> <span class="n">NSInteger</span> <span class="n">UITableViewCellStyle</span><span class="p">;</span>
</code></pre></div>
<p>...which ensures a fixed size for <code>UITableViewCellStyle</code>, but does nothing to hint the relation between the aforementioned <code>enum</code> and the new type to the compiler.</p>

<p>Thankfully, Apple has decided on &quot;One Macro To Rule Them All&quot; with <code>NS_ENUM</code>.</p>

<h2><code>NS_ENUM</code></h2>

<p>Now, <code>UITableViewCellStyle</code> is declared with:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">typedef</span> <span class="nf">NS_ENUM</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">,</span> <span class="n">UITableViewCellStyle</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">UITableViewCellStyleDefault</span><span class="p">,</span>
    <span class="n">UITableViewCellStyleValue1</span><span class="p">,</span>
    <span class="n">UITableViewCellStyleValue2</span><span class="p">,</span>
    <span class="n">UITableViewCellStyleSubtitle</span>
<span class="p">};</span>
</code></pre></div>
<p>The first argument for <code>NS_ENUM</code> is the type used to store the new type. In a 64-bit environment, <code>UITableViewCellStyle</code> will be 8 bytes long--same as <code>NSInteger</code>. Make sure that the specified size can fit all of the defined values, or else an error will be generated. The second argument is the name of the new type (as you probably guessed). Inside the block, the values are defined as usual.</p>

<p>This approach combines the best of all of the aforementioned approaches, and even provides hints to the compiler for type-checking and <code>switch</code> statement completeness.</p>

<h2><code>NS_OPTIONS</code></h2>

<p><code>enum</code> can also be used to define a <a href="http://en.wikipedia.org/wiki/Mask_(computing)">bitmask</a>. Using a convenient property of binary math, a single integer value can encode a combination of values all at once using the bitwise <code>OR</code> (<code>|</code>), and decoded with bitwise <code>AND</code> (<code>&amp;</code>). Each subsequent value, rather than automatically being incremented by 1 from 0, are manually given a value with a bit offset: <code>1 &lt;&lt; 0</code>, <code>1 &lt;&lt; 1</code>, <code>1 &lt;&lt; 2</code>, and so on. If you imagine the binary representation of a number, like <code>10110</code> for 22, each bit can be though to represent a single boolean. In UIKit, for example, <code>UIViewAutoresizing</code> is a bitmask that can represent any combination of flexible top, bottom, left, and right margins, or width and height.</p>

<p>Rather than <code>NS_ENUM</code>, bitmasks should now use the <code>NS_OPTIONS</code> macro.</p>

<p>The syntax is exactly the same as <code>NS_ENUM</code>, but this macro alerts the compiler to how values can be combined with bitmask <code>|</code>. Again, you must be careful that all of the enumerated values fit within the specified type.</p>

<hr>

<p><code>NS_ENUM</code> and <code>NS_OPTIONS</code> are handy additions to the Objective-C development experience, and reaffirm the healthy dialectic between its objective and procedural nature. Keep this in mind as you move forward in your own journey to understand the logical tensions that underpin everything around us.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 19 Nov 2012 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:40:"http://nshipster.com/ns_enum-ns_options/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:40:"http://nshipster.com/ns_enum-ns_options/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:70;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:18:"NSValueTransformer";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:9538:"<p>Of all the Foundation classes, <code>NSValueTransformer</code> is perhaps the one that fared the worst in the shift from OS X to iOS.</p>

<p>Why? Well, there are two reasons:</p>

<p>The first and most obvious reason is that <code>NSValueTransformer</code> was mainly used in AppKit with Cocoa bindings. Here, they could automatically transform values from one property to another without the need of intermediary glue code, like for negating a boolean, or checking whether a value was <code>nil</code>. iOS, of course, doesn&#39;t have bindings.</p>

<p>The second reason has less to do with iOS than the Objective-C runtime itself. With the introduction of blocks, it got a whole lot easier to pass behavior between objects--significantly easier than, say <code>NSValueTransformer</code> or <code>NSInvocation</code>. So even if iOS were to get bindings tomorrow, it&#39;s uncertain as to whether <code>NSValueTransformer</code> would play as significant a role this time around.</p>

<p>But you know what? <code>NSValueTransformer</code> is ripe for a comeback. With a little bit of re-tooling and some recontextualization, this blast from the past could be the next big thing in your application.</p>

<hr>

<p><code>NSValueTransformer</code> is an abstract class that transforms one value into another. A transformation specifies what kinds of input values can be handled, and can even supports reversible transformations, where applicable.</p>

<p>A typical implementation would look something like this:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">ClassNameTransformer</span>: <span class="nc">NSValueTransformer</span> <span class="p">{}</span>
<span class="k">@end</span>

<span class="cp">#pragma mark -</span>

<span class="k">@implementation</span> <span class="nc">ClassNameTransformer</span>
<span class="k">+</span> <span class="p">(</span><span class="kt">Class</span><span class="p">)</span><span class="nf">transformedValueClass</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[</span><span class="n">NSString</span> <span class="n">class</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">+</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">allowsReverseTransformation</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">transformedValue:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">value</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">value</span> <span class="o">==</span> <span class="nb">nil</span><span class="p">)</span> <span class="o">?</span> <span class="nb">nil</span> <span class="o">:</span> <span class="n">NSStringFromClass</span><span class="p">([</span><span class="n">value</span> <span class="n">class</span><span class="p">]);</span>
<span class="p">}</span>
<span class="k">@end</span>
</code></pre></div>
<p><code>NSValueTransformer</code> is rarely initialized directly. Instead, it follows a pattern familiar to fans of <code>NSPersistentStore</code> or <code>NSURLProtocol</code>, where a class is registered, and instances are created from a manager--except in this case, you register the <em>instance</em> to act as a singleton (with a particular name):</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">ClassNameTransformerName</span> <span class="o">=</span> <span class="s">@&quot;ClassNameTransformer&quot;</span><span class="p">;</span>

<span class="c1">// Set the value transformer</span>
<span class="p">[</span><span class="n">NSValueTransformer</span> <span class="n">setValueTransformer</span><span class="o">:</span><span class="p">[[</span><span class="n">ClassNameTransformer</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">forName</span><span class="o">:</span><span class="n">ClassNameTransformerName</span><span class="p">];</span>

<span class="c1">// Get the value transformer</span>
<span class="n">NSValueTransformer</span> <span class="o">*</span><span class="n">valueTransformer</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSValueTransformer</span> <span class="n">valueTransformerForName</span><span class="o">:</span><span class="n">ClassNameTransformerName</span><span class="p">];</span>
</code></pre></div>
<p>Typically, the singleton instance would be registered in the <code>+initialize</code> method of the value transformer subclass, so it could be used without further setup.</p>

<p>Now, at this point, you probably realize <code>NSValueTransformer</code>&#39;s fatal flaw: it&#39;s a pain in the ass to set up! Create a class, implement a handful of simple methods, define a constant, <em>and</em> register it in an <code>+initialize</code> method? No thanks.</p>

<p>In this age of blocks, we want--nay, <em>demand</em>--a way to declare functionality in one (albeit gigantic) line of code.</p>

<p>Nothing <a href="https://github.com/mattt/TransformerKit/blob/master/TransformerKit/NSValueTransformer%2BTransformerKit.m#L36">a little metaprogramming</a> can&#39;t fix. Behold:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span> <span class="k">const</span> <span class="n">TKCapitalizedStringTransformerName</span> <span class="o">=</span> <span class="s">@&quot;TKCapitalizedStringTransformerName&quot;</span><span class="p">;</span>

<span class="p">[</span><span class="n">NSValueTransformer</span> <span class="n">registerValueTransformerWithName</span><span class="o">:</span><span class="n">TKCapitalizedStringTransformerName</span>
           <span class="nl">transformedValueClass:</span><span class="p">[</span><span class="n">NSString</span> <span class="n">class</span><span class="p">]</span>
<span class="nl">returningTransformedValueWithBlock:</span><span class="o">^</span><span class="kt">id</span><span class="p">(</span><span class="kt">id</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[</span><span class="n">value</span> <span class="n">capitalizedString</span><span class="p">];</span>
<span class="p">}];</span>
</code></pre></div>
<p>Not to break the 4th wall or anything, but in the middle of writing this article, I was compelled to see what could be done to improve the experience of <code>NSValueTransformer</code>. What I came up with was <a href="https://github.com/mattt/TransformerKit">TransformerKit</a>.</p>

<p>The entire library is based on some objc runtime hackery in an <code>NSValueTransformer</code> category. Also included with this category are a number of convenient examples, like string case transformers (i.e. <code>CamelCase</code>, <code>llamaCase</code>, <code>snake_case</code>, and <code>train-case</code>).</p>

<p>Now with its sexy new getup, we start to form a better understanding of where this could be useful:</p>

<ul>
<li><code>NSValueTransformers</code> are the ideal way to represent an ordered chain of fixed transformations. For instance, an app interfacing with a legacy system might transform user input through a succession of string transformations (trim whitespace, remove diacritics, and then capitalize letters) before sending it off to the mainframe.</li>
<li>Unlike blocks, <code>NSValueTransformer</code> encapsulates reversible transformations. Let&#39;s say you were wanted to map keys from a REST API representation into a Model object; you could create a reversible transformation that converted <code>snake_case</code> to <code>llamaCase</code> when initializing, and <code>llamaCase</code> to <code>snake_case</code> when serializing back to the server.</li>
<li>Another advantage over blocks is that <code>NSValueTransformer</code> subclasses can expose new properties that could be used to configure behavior in a particular way. Access to <code>ivars</code> also make it easier to cleanly memoize results, or do any necessary book-keeping along the way.</li>
<li>Lest we forget, <code>NSValueTransformer</code> can be used with Core Data, as a way to encode and decode compound data types from blob fields. It seems to have fallen out of fashion over the years, but serializing simple collections in this way, for example, is an excellent strategy for information that isn&#39;t well-modeled as its own entity. Just don&#39;t serialize images to a database this way--that&#39;s generally a Bad Idea™.</li>
</ul>

<p>And the list goes on.</p>

<hr>

<p><code>NSValueTransformer</code>, far from a vestige of AppKit, remains Foundation&#39;s purest connection to that fundamental concept of computation: input goes in, output comes out.</p>

<p>Although it hasn&#39;t aged very well on its own, a little modernization restores <code>NSValueTransformer</code> to that highest esteem of NSHipsterdom: the solution that we didn&#39;t know we needed, but was there all along.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 12 Nov 2012 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:40:"http://nshipster.com/nsvaluetransformer/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:40:"http://nshipster.com/nsvaluetransformer/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:71;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:13:"NSURLProtocol";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:9252:"<p>iOS is all about networking--whether it&#39;s reading or writing state to and from the server, offloading computation to a distributed system, or loading remote images, audio, and video from the cloud.</p>

<p>Because of this, Foundation&#39;s <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html#//apple_ref/doc/uid/10000165i">URL Loading System</a> is something that every iOS developer would do well to buddy up with.</p>

<p>When given the choice, applications should adopt the highest-level framework possible for what needs to be done. So, if that task is communicating over <code>http://</code>, <code>https://</code> or <code>ftp://</code>, then <code>NSURLConnection</code> and friends are a clear choice. Apple&#39;s networking classes cover the essentials for modern Objective-C application development, from URL and cache management to authentication &amp; cookie storage:</p>

<figure id="url-loading-system">
  <figcaption>The URL Loading System</figcaption>
  <table>
    <thead>
      <tr>
        <td colspan="2"><strong>URL Loading</strong></td>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td colspan="2">NSURLConnection</td>
      </tr>
      <tr>
        <td>NSURLRequest</td>
        <td>NSMutableURLRequest</td>
      </tr>
      <tr>
        <td>NSURLResponse</td>
        <td>NSHTTPURLResponse</td>
      </tr>
    </tbody>
    <thead>
      <tr>
        <td colspan="2"><strong>Cache Management</strong></td>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td colspan="2">NSURLCache</td>
      </tr>
      <tr>
        <td colspan="2">NSCacheURLRequest</td>
      </tr>
      <tr>
        <td colspan="2">NSCachedURLResponse</td>
      </tr>
    </tbody>
    <thead>
      <tr>
        <td colspan="2"><strong>Authentication &amp; Credentials</strong></td>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td colspan="2">NSURLCredential</td>
      </tr>
      <tr>
        <td colspan="2">NSURLCredentialStorage</td>
      </tr>
      <tr>
        <td colspan="2">NSURLAuthenticationChallenge</td>
      </tr>
      <tr>
        <td colspan="2">NSURLProtectionSpace</td>
      </tr>
    </tbody>
    <thead>
      <tr>
        <td colspan="2"><strong>Cookie Storage</strong></td>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td colspan="2">NSHTTPCookie</td>
      </tr>
      <tr>
        <td colspan="2">NSHTTPCookieStorage</td>
      </tr>
    </tbody>
    <thead>
      <tr>
        <td colspan="2"><strong>Protocol Support</strong></td>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td colspan="2">NSURLProtocol</td>
      </tr>
    </tbody>
  </table>
</figure>

<p>Although there&#39;s a lot to the URL Loading System, it&#39;s designed in a way that hides the underlying complexity, with hooks to provide configuration when needed. Any request going through <code>NSURLConnection</code> is intercepted by other parts of the system along the way, allowing for things like cached responses being transparently loaded from disk when available.</p>

<p>Which brings us to this week&#39;s topic: <code>NSURLProtocol</code>.</p>

<hr>

<p><code>NSURLProtocol</code> is both the most obscure and the most powerful part of the URL Loading System. It&#39;s an abstract class that allows subclasses to define the URL loading behavior of new or existing schemes.</p>

<p>If you aren&#39;t already <code>mindblown.gif</code>, here are some examples of what this can be used for, <em>without changing anything else about how requests are loaded</em>:</p>

<ul>
<li><a href="http://stackoverflow.com/questions/5572258/ios-webview-remote-html-with-local-image-files">Intercepting HTTP requests to serve images locally from the app bundle resources, if available</a></li>
<li><a href="http://www.infinite-loop.dk/blog/2011/09/using-nsurlprotocol-for-injecting-test-data/">Mocking and stubbing HTTP responses for testing</a></li>
<li>Normalizing headers and parameters of outgoing requests</li>
<li>Signing outgoing streaming media requests</li>
<li>Creating a proxy server for a local data transformation service with a URL request interface</li>
<li>Deliberately sending malformed &amp; illegal response data to test the robustness of the application</li>
<li>Filtering sensitive information from requests or responses</li>
<li>Implementing an <code>NSURLConnection</code>-compatible interface to an existing protocol.</li>
</ul>

<p>Again, it&#39;s important to reiterate that the whole point of <code>NSURLProtocol</code> is that you can change everything about the loading behavior of your application without doing anything differently with how your application communicates to the network.</p>

<p>Or, put another way: <code>NSURLProtocol</code> is an Apple-sanctioned man-in-the-middle attack.</p>

<h2>Subclassing NSURLProtocol</h2>

<p>As mentioned previously, <code>NSURLProtocol</code> is an abstract class, which means it will be subclassed rather than used directly.</p>

<h3>Determining if a Subclass Can Handle a Request</h3>

<p>The first task of an <code>NSURLProtocol</code> subclass is to define what requests to handle. For example, if you want to serve bundle resources when available, it would only want to respond to requests that matched the name of an existing resource.</p>

<p>This logic is specified in <code>+canInitWithRequest:</code>. If <code>YES</code>, the specified request is handled. If <code>NO</code>, it&#39;s passed down the line to the next URL Protocol.</p>

<h3>Providing a Canonical Version of a Request</h3>

<p>If you wanted to modify a request in any particular way, <code>+canonicalRequestForRequest:</code> is your opportunity. It&#39;s up to each subclass to determine what &quot;canonical&quot; means, but the gist is that a protocol should ensure that a request has only one canonical form (although many different requests may normalize into the same canonical form).</p>

<h3>Getting and Setting Properties on Requests</h3>

<p><code>NSURLProtocol</code> provides methods that allow you to add, retrieve, and remove arbitrary metadata to a request object--without the need for a private category or swizzling:</p>

<ul>
<li><code>+propertyForKey:inRequest:</code></li>
<li><code>+setProperty:forKey:inRequest:</code></li>
<li><code>+removePropertyForKey:inRequest:</code></li>
</ul>

<p>This is especially important for subclasses created to interact with protocols that have information not already provided by <code>NSURLRequest</code>. It can also be useful as a way to pass state between other methods in your implementation.</p>

<h3>Loading Requests</h3>

<p>The most important methods in your subclass are <code>-startLoading</code> and <code>-stopLoading</code>. What goes into either of these methods is entirely dependent on what your subclass is trying to accomplish, but there is one commonality: communicating with the protocol client.</p>

<p>Each instance of a <code>NSURLProtocol</code> subclass has a <code>client</code> property, which is the object that is communicating with the URL Loading system. It&#39;s not <code>NSURLConnection</code>, but the object does conform to a protocol that should look familiar to anyone who has implemented <code>NSURLConnectionDelegate</code></p>

<h4><code>&lt;NSURLProtocolClient&gt;</code></h4>

<ul>
<li><code>-URLProtocol:cachedResponseIsValid:</code></li>
<li><code>-URLProtocol:didCancelAuthenticationChallenge:</code></li>
<li><code>-URLProtocol:didFailWithError:</code></li>
<li><code>-URLProtocol:didLoadData:</code></li>
<li><code>-URLProtocol:didReceiveAuthenticationChallenge:</code></li>
<li><code>-URLProtocol:didReceiveResponse:cacheStoragePolicy:</code></li>
<li><code>-URLProtocol:wasRedirectedToRequest:redirectResponse:</code></li>
<li><code>-URLProtocolDidFinishLoading:</code></li>
</ul>

<p>In your implementation of <code>-startLoading</code> and <code>-stopLoading</code>, you will need to send each delegate method to your <code>client</code> when appropriate. For something simple, this may mean sending several in rapid succession, but it&#39;s important nonetheless.</p>

<h3>Registering the Subclass with the URL Loading System</h3>

<p>Finally, in order to actually use an <code>NSURLProtocol</code> subclass, it needs to be registered into the URL Loading System.</p>

<p>When a request is loaded, each registered protocol is asked &quot;hey, can you handle this request?&quot;. The first one to respond with <code>YES</code> with <code>+canInitWithRequest:</code> gets to handle the request. URL protocols are consulted in reverse order of when they were registered, so by calling <code>[NSURLProtocol registerClass:[MyURLProtocol class]];</code> in <code>-application:didFinishLoadingWithOptions:</code>, your protocol will have priority over any of the built-in protocols.</p>

<hr>

<p>Like the URL Loading System that contains it, <code>NSURLProtocol</code> is incredibly powerful, and can be used in exceedingly clever ways. As a relatively obscure class, we&#39;ve only just started to mine its potential for how we can use it to make our code cleaner, faster, and more robust.</p>

<p>So go forth and hack! I can&#39;t wait to see what y&#39;all come up with!</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 05 Nov 2012 00:00:00 -0800";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:35:"http://nshipster.com/nsurlprotocol/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:35:"http://nshipster.com/nsurlprotocol/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:72;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:27:"UILocalizedIndexedCollation";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:14549:"<p>UITableView starts to become unwieldy once it gets to a few hundred rows. If users are reduced to frantically scratching at the screen like a <a href="http://www.youtube.com/watch?v=CdEBgZ5Y46U">cat playing Fruit Ninja</a> in order to get at what they want... you may want to rethink your UI approach.</p>

<p>So, what are your options?</p>

<p>Well, you could organize your data into a hierarchy, which could dramatically reduce the number of rows displayed on each screen in fashion, based on its <a href="http://en.wikipedia.org/wiki/Branching_factor">branching factor</a>.</p>

<p>You could also add a <code>UISearchBar</code> to the top of your table view, allowing the user to filter on keywords to get exactly what they&#39;re looking for (or--perhaps more importantly--determine that what they seek doesn&#39;t exist in the first place).</p>

<p>There is also a third approach, which is generally under-utilized in iOS applications: <strong>section index titles</strong>. These are the vertically flowing letters found along the right side of table views in your Address Book contacts list or Music library:</p>

<p><img src="http://nshipster.s3.amazonaws.com/uilocalizedindexedcollation-example.png" alt="Section Index Titles Example"></p>

<p>As the user scrolls their finger down the list, the table view jumps to the corresponding section. Even the most tiresome table view is rendered significantly more usable as a result.</p>

<p>Section index titles can be enabled by implementing the following <code>UITableViewDataSource</code> delegate methods:</p>

<ul>
<li><p><code>-sectionIndexTitlesForTableView:</code> - Returns an array of the section index titles to be displayed along the right hand side of the table view, such as the alphabetical list &quot;A...Z&quot; + &quot;#&quot;. Section index titles are short--generally limited to 2 Unicode characters.</p></li>
<li><p><code>-tableView:sectionForSectionIndexTitle:atIndex:</code> - Returns the section index that the table view should jump to when the user touches a particular section index title.</p></li>
</ul>

<p>As longtime readers of NSHipster doubtless have already guessed, the process of generating that alphabetical list is not something you would want to have to generate yourself. What it means to something to be alphabetically sorted, or even what is meant by an &quot;alphabet&quot; varies wildly across different locales.</p>

<p>Coming to our rescue is <code>UILocalizedIndexedCollation</code>.</p>

<hr>

<p><code>UILocalizedIndexedCollation</code> is a class that helps to organize data in table views with section index titles in a locale-aware manner. Rather than creating the object directly, a shared instance corresponding to the current locale supported by your application is accessed, with <code>UILocalizedIndexedCollation +currentCollation</code></p>

<p>The first task for <code>UILocalizedIndexedCollation</code> is to determine what section index titles to display for the current locale, which are can be read from the <code>sectionIndexTitles</code> property.</p>

<p>To give you a better idea of how section index titles vary between locales:</p>

<blockquote>
<p>In order to see these for yourself, you&#39;ll need to explicitly add the desired locales to your Project Localizations list.</p>
</blockquote>

<table>
  <thead>
    <tr>
      <th>Locale</th>
      <th>Section Index Titles</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>en_US</td>
      <td><tt>A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, #</tt></td>
    </tr>
    <tr>
      <td>ja_JP</td>
      <td><tt>A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, あ, か, さ, た, な, は, ま, や, ら, わ, #</tt></td>
    </tr>
    <tr>
      <td>sv_SE</td>
      <td><tt>A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, Å, Ä, Ö, #</tt></td>
    </tr>
    <tr>
      <td>ko_KO</td>
      <td><tt>A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, ㄱ, ㄴ, ㄷ, ㄹ, ㅁ, ㅂ, ㅅ, ㅇ, ㅈ, ㅊ, ㅋ, ㅌ, ㅍ, ㅎ, #</tt></td>
    </tr>
    <tr>
      <td>ar_SA</td>
      <td><tt>A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, آ, ب, ت, ث, ج, ح, خ, د, ذ, ر, ز, س, ش, ص, ض, ط, ظ, ع, غ, ف, ق, ك, ل, م, ن, ه, و, ي, #</tt></td>
    </tr>
  </tbody>
</table>

<p>Aren&#39;t you glad you don&#39;t have to do this yourself?</p>

<p>So with the list of section titles laid out before you, the next step is to determine what section each object should be assigned to. This is accomplished with <code>-sectionForObject:collationStringSelector:</code>. This method returns the <code>NSInteger</code> index corresponding to the string value of the object when performing the specified selector. This selector might be something like <code>localizedName</code>, <code>title</code>, or even just <code>description</code>.</p>

<p>So, as it stands, your table view data source has a NSArray property corresponding to the number of sections in the table view, with each element of the array containing an array representing each row in the section. Since collation was handled by <code>UILocalizedIndexedCollation</code>, it makes sense for it to sort the rows in each section as well. <code>– sortedArrayFromArray:collationStringSelector:</code> does this in similar fashion to <code>-sectionForObject:collationStringSelector:</code>, by sorting the objects in the section by their respective localized title.</p>

<p>Finally, the table view should implement <code>-tableView:sectionForSectionIndexTitle:atIndex:</code>, so that touching a section index title jumps to the corresponding section in the table view. <code>UILocalizedIndexedCollation -sectionForSectionIndexTitleAtIndex:</code> does the trick.</p>

<p>All told, here&#39;s what a typical table view data source implementation looks like:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setObjects:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">objects</span> <span class="p">{</span>
    <span class="kt">SEL</span> <span class="n">selector</span> <span class="o">=</span> <span class="k">@selector</span><span class="p">(</span><span class="n">localizedTitle</span><span class="p">);</span>
    <span class="n">NSInteger</span> <span class="n">index</span><span class="p">,</span> <span class="n">sectionTitlesCount</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">UILocalizedIndexedCollation</span> <span class="n">currentCollation</span><span class="p">]</span> <span class="n">sectionTitles</span><span class="p">]</span> <span class="n">count</span><span class="p">];</span>

    <span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">mutableSections</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithCapacity</span><span class="o">:</span><span class="n">sectionTitlesCount</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">NSUInteger</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">sectionTitlesCount</span><span class="p">;</span> <span class="n">idx</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="p">[</span><span class="n">mutableSections</span> <span class="n">addObject</span><span class="o">:</span><span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">]];</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">id</span> <span class="n">object</span> <span class="k">in</span> <span class="n">objects</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">NSInteger</span> <span class="n">sectionNumber</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UILocalizedIndexedCollation</span> <span class="n">currentCollation</span><span class="p">]</span> <span class="n">sectionForObject</span><span class="o">:</span><span class="n">object</span> <span class="n">collationStringSelector</span><span class="o">:</span><span class="n">selector</span><span class="p">];</span>
      <span class="p">[[</span><span class="n">mutableSections</span> <span class="n">objectAtIndex</span><span class="o">:</span><span class="n">sectionNumber</span><span class="p">]</span> <span class="n">addObject</span><span class="o">:</span><span class="n">object</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">NSUInteger</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">sectionTitlesCount</span><span class="p">;</span> <span class="n">idx</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">NSArray</span> <span class="o">*</span><span class="n">objectsForSection</span> <span class="o">=</span> <span class="p">[</span><span class="n">mutableSections</span> <span class="n">objectAtIndex</span><span class="o">:</span><span class="n">idx</span><span class="p">];</span>
      <span class="p">[</span><span class="n">mutableSections</span> <span class="n">replaceObjectAtIndex</span><span class="o">:</span><span class="n">idx</span> <span class="n">withObject</span><span class="o">:</span><span class="p">[[</span><span class="n">UILocalizedIndexedCollation</span> <span class="n">currentCollation</span><span class="p">]</span> <span class="n">sortedArrayFromArray</span><span class="o">:</span><span class="n">objectsForSection</span> <span class="n">collationStringSelector</span><span class="o">:</span><span class="n">selector</span><span class="p">]];</span>
    <span class="p">}</span>

    <span class="n">self</span><span class="p">.</span><span class="n">sections</span> <span class="o">=</span> <span class="n">mutableSections</span><span class="p">;</span>

    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tableView</span> <span class="n">reloadData</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span>
<span class="nl">titleForHeaderInSection:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">section</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">[[[</span><span class="n">UILocalizedIndexedCollation</span> <span class="n">currentCollation</span><span class="p">]</span> <span class="n">sectionTitles</span><span class="p">]</span> <span class="n">objectAtIndex</span><span class="o">:</span><span class="n">section</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">sectionIndexTitlesForTableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[[</span><span class="n">UILocalizedIndexedCollation</span> <span class="n">currentCollation</span><span class="p">]</span> <span class="n">sectionIndexTitles</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span>
<span class="nl">sectionForSectionIndexTitle:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">title</span>
               <span class="nl">atIndex:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">index</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">[[</span><span class="n">UILocalizedIndexedCollation</span> <span class="n">currentCollation</span><span class="p">]</span> <span class="n">sectionForSectionIndexTitleAtIndex</span><span class="o">:</span><span class="n">index</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<h2>UITableViewIndexSearch</h2>

<p>There is one special section index title worth mentioning, and that&#39;s <code>UITableViewIndexSearch</code>. It&#39;s a common pattern to have both a search bar and section indexes. In equal parts convenience and visual consistency, a search icon is often included as the first section index title, which can be touched to bring up the <code>UISearchBar</code> in the header of the table view.</p>

<p>To include the search icon in your table view, you would simply prepend the <code>NSString</code> constant <code>UITableViewIndexSearch</code> to the return value of <code>-sectionIndexTitlesForTableView:</code>, and adjust <code>-tableView:sectionForSectionIndexTitle:atIndex:</code> to account for the single element shift.</p>

<hr>

<p>So remember, NSHipsters one and all: if you see an excessively long table view, kill it with fire!</p>

<p>...which is to say, refactor your content with some combination of hierarchies, a search bar, and section indexes. And when implementing section index titles, take advantage of <code>UILocalizedIndexedCollation</code>.</p>

<p>Together, we can put an end to scroll view-induced repetitive stress injuries, and spend more time enjoying the finer things in life, like watching videos of pets playing with iPads.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 29 Oct 2012 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:49:"http://nshipster.com/uilocalizedindexedcollation/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:49:"http://nshipster.com/uilocalizedindexedcollation/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:73;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:18:"NSLinguisticTagger";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:11668:"<p><code>NSLinguisticTagger</code> is a veritable Swiss Army Knife of linguistic functionality, with the ability to <a href="http://en.wikipedia.org/wiki/Tokenization">tokenize</a> natural language strings into words, determine their part-of-speech &amp; <a href="http://en.wikipedia.org/wiki/Word_stem">stem</a>, extract names of people, places, &amp; organizations, and tell you the languages &amp; respective <a href="http://en.wikipedia.org/wiki/Writing_system">writing system</a> used in the string.</p>

<p>For most of us, this is far more power than we know what to do with. But perhaps this is just for lack sufficient opportunity to try. After all, almost every application deals with natural language in one way or another--perhaps <code>NSLinguisticTagger</code> could add a new level of polish, or enable brand new features entirely.</p>

<hr>

<p>Introduced with iOS 5, <code>NSLinguisticTagger</code> is a contemporary to Siri, raising speculation that it was a byproduct of the personal assistant&#39;s development.</p>

<p>Consider a typical question we might ask Siri:</p>

<blockquote>
<p>What is the weather in San Francisco?</p>
</blockquote>

<p>Computers are a long ways off from &quot;understanding&quot; this question literally, but with a few simple tricks, we can do a reasonable job understanding the <em>intention</em> of the question:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">question</span> <span class="o">=</span> <span class="s">@&quot;What is the weather in San Francisco?&quot;</span><span class="p">;</span>
<span class="n">NSLinguisticTaggerOptions</span> <span class="n">options</span> <span class="o">=</span> <span class="n">NSLinguisticTaggerOmitWhitespace</span> <span class="o">|</span> <span class="n">NSLinguisticTaggerOmitPunctuation</span> <span class="o">|</span> <span class="n">NSLinguisticTaggerJoinNames</span><span class="p">;</span>
<span class="n">NSLinguisticTagger</span> <span class="o">*</span><span class="n">tagger</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSLinguisticTagger</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithTagSchemes</span><span class="o">:</span> <span class="p">[</span><span class="n">NSLinguisticTagger</span> <span class="n">availableTagSchemesForLanguage</span><span class="o">:</span><span class="s">@&quot;en&quot;</span><span class="p">]</span> <span class="n">options</span><span class="o">:</span><span class="n">options</span><span class="p">];</span>
<span class="n">tagger</span><span class="p">.</span><span class="n">string</span> <span class="o">=</span> <span class="n">question</span><span class="p">;</span>
<span class="p">[</span><span class="n">tagger</span> <span class="n">enumerateTagsInRange</span><span class="o">:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">question</span> <span class="n">length</span><span class="p">])</span> <span class="n">scheme</span><span class="o">:</span><span class="n">NSLinguisticTagSchemeNameTypeOrLexicalClass</span> <span class="n">options</span><span class="o">:</span><span class="n">options</span> <span class="n">usingBlock</span><span class="o">:^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">tag</span><span class="p">,</span> <span class="n">NSRange</span> <span class="n">tokenRange</span><span class="p">,</span> <span class="n">NSRange</span> <span class="n">sentenceRange</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">NSString</span> <span class="o">*</span><span class="n">token</span> <span class="o">=</span> <span class="p">[</span><span class="n">question</span> <span class="n">substringWithRange</span><span class="o">:</span><span class="n">tokenRange</span><span class="p">];</span>
    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@: %@&quot;</span><span class="p">,</span> <span class="n">token</span><span class="p">,</span> <span class="n">tag</span><span class="p">);</span>
<span class="p">}];</span>
</code></pre></div>
<p>This code would print the following:</p>

<blockquote>
<p>What: <em>Pronoun</em>
is: <em>Verb</em>
the: <em>Determiner</em>
weather: <em>Noun</em>
in: <em>Preposition</em>
San Francisco: <em>PlaceName</em></p>
</blockquote>

<p>If we filter on nouns, verbs, and place name, we get <code>[is, weather, San Francisco]</code>.</p>

<p>Just based on this alone, or perhaps in conjunction with something like the <a href="http://developer.apple.com/library/mac/#documentation/LatentSemanticMapping/Reference/LatentSemanticMapping_header_reference/Reference/reference.html">Latent Semantic Mapping</a> framework, we can conclude that a reasonable course of action would be to make an API request to determine the current weather conditions in San Francisco.</p>

<h2>Tagging Schemes</h2>

<p><code>NSLinguisticTagger</code> can be configured to tag different kinds of information by specifying any of the following tagging schemes:</p>

<ul>
<li><code>NSLinguisticTagSchemeTokenType</code>: Classifies tokens according to their broad type: word, punctuation, whitespace, etc.</li>
<li><code>NSLinguisticTagSchemeLexicalClass</code>: Classifies tokens according to class: part of speech for words, type of punctuation or whitespace, etc.</li>
<li><code>NSLinguisticTagSchemeNameType</code>: Classifies tokens as to whether they are part of named entities of various types or not.</li>
<li><code>NSLinguisticTagSchemeNameTypeOrLexicalClass</code>: Follows <code>NSLinguisticTagSchemeNameType</code> for names, and <code>NSLinguisticTagSchemeLexicalClass</code> for all other tokens.</li>
</ul>

<p>Here&#39;s a list of the various token types associated with each scheme (<code>NSLinguisticTagSchemeNameTypeOrLexicalClass</code>, as the name implies, is the union between <code>NSLinguisticTagSchemeNameType</code> &amp; <code>NSLinguisticTagSchemeLexicalClass</code>):</p>

<table>
  <thead>
    <tr>
      <th><tt>NSLinguisticTagSchemeTokenType</tt></th>
      <th><tt>NSLinguisticTagSchemeLexicalClass</tt></th>
      <th><tt>NSLinguisticTagSchemeNameType</tt></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>
        <ul>
          <li><tt>NSLinguisticTagWord</tt></li>
          <li><tt>NSLinguisticTagPunctuation</tt></li>
          <li><tt>NSLinguisticTagWhitespace</tt></li>
          <li><tt>NSLinguisticTagOther</tt></li>
        </ul>
      </td>
      <td>
        <ul>
          <li><tt>NSLinguisticTagNoun</tt></li>
          <li><tt>NSLinguisticTagVerb</tt></li>
          <li><tt>NSLinguisticTagAdjective</tt></li>
          <li><tt>NSLinguisticTagAdverb</tt></li>
          <li><tt>NSLinguisticTagPronoun</tt></li>
          <li><tt>NSLinguisticTagDeterminer</tt></li>
          <li><tt>NSLinguisticTagParticle</tt></li>
          <li><tt>NSLinguisticTagPreposition</tt></li>
          <li><tt>NSLinguisticTagNumber</tt></li>
          <li><tt>NSLinguisticTagConjunction</tt></li>
          <li><tt>NSLinguisticTagInterjection</tt></li>
          <li><tt>NSLinguisticTagClassifier</tt></li>
          <li><tt>NSLinguisticTagIdiom</tt></li>
          <li><tt>NSLinguisticTagOtherWord</tt></li>
          <li><tt>NSLinguisticTagSentenceTerminator</tt></li>
          <li><tt>NSLinguisticTagOpenQuote</tt></li>
          <li><tt>NSLinguisticTagCloseQuote</tt></li>
          <li><tt>NSLinguisticTagOpenParenthesis</tt></li>
          <li><tt>NSLinguisticTagCloseParenthesis</tt></li>
          <li><tt>NSLinguisticTagWordJoiner</tt></li>
          <li><tt>NSLinguisticTagDash</tt></li>
          <li><tt>NSLinguisticTagOtherPunctuation</tt></li>
          <li><tt>NSLinguisticTagParagraphBreak</tt></li>
          <li><tt>NSLinguisticTagOtherWhitespace</tt></li>
        </ul>
      </td>
      <td>
        <ul>
          <li><tt>NSLinguisticTagPersonalName</tt></li>
          <li><tt>NSLinguisticTagPlaceName</tt></li>
          <li><tt>NSLinguisticTagOrganizationName</tt></li>
        </ul>
      </td>
    </tr>
  </tbody>
</table>

<p>So for basic tokenization, use <code>NSLinguisticTagSchemeTokenType</code>, which will allow you to distinguish between words and whitespace or punctuation. For information like part-of-speech, or differentiation between different parts of speech, <code>NSLinguisticTagSchemeLexicalClass</code> is your new bicycle.</p>

<p>Continuing with the tagging schemes:</p>

<ul>
<li><code>NSLinguisticTagSchemeLemma</code>: This tag scheme supplies a stem forms of the words, if known.</li>
<li><code>NSLinguisticTagSchemeLanguage</code>: Tags tokens according to their script. The tag values will be standard language abbreviations such as <code>&quot;en&quot;</code>, <code>&quot;fr&quot;</code>, <code>&quot;de&quot;</code>, etc., as used with the <code>NSOrthography</code> class. <em>Note that the tagger generally attempts to determine the language of text at the level of an entire sentence or paragraph, rather than word by word.</em></li>
<li><code>NSLinguisticTagSchemeScript</code>: Tags tokens according to their script. The tag values will be standard script abbreviations such as <code>&quot;Latn&quot;</code>, <code>&quot;Cyrl&quot;</code>, <code>&quot;Jpan&quot;</code>, <code>&quot;Hans&quot;</code>, <code>&quot;Hant&quot;</code>, etc.</li>
</ul>

<p>As demonstrated in the example above, first you initialize an <code>NSLinguisticTagger</code> with an array of all of the different schemes that you wish to use, and then assign or enumerate each of the tags after specifying the tagger&#39;s input string.</p>

<h2>Tagging Options</h2>

<p>In addition to the available tagging schemes, there are several options you can pass to <code>NSLinguisticTagger</code> (combined with bitwise OR <code>|</code>) to slightly change its behavior:</p>

<ul>
<li><code>NSLinguisticTaggerOmitWords</code></li>
<li><code>NSLinguisticTaggerOmitPunctuation</code></li>
<li><code>NSLinguisticTaggerOmitWhitespace</code></li>
<li><code>NSLinguisticTaggerOmitOther</code></li>
</ul>

<p>Each of these options omit the broad categories of tags described. For example, <code>NSLinguisticTagSchemeLexicalClass</code>, which distinguishes between many different kinds of punctuation, all of those would be omitted with <code>NSLinguisticTaggerOmitPunctuation</code>. This is preferable to manually filtering these tag types in enumeration blocks or with predicates.</p>

<p>The last option is specific to <code>NSLinguisticTagSchemeNameType</code>:</p>

<ul>
<li><code>NSLinguisticTaggerJoinNames</code></li>
</ul>

<p>By default, each token in a name is treated as separate instances. In many circumstances, it makes sense to treat names like &quot;San Francisco&quot; as a single token, rather than two separate tokens. Passing this token makes this so.</p>

<hr>

<p>Natural language is woefully under-utilized in user interface design on mobile devices. When implemented effectively, a single utterance from the user can achieve the equivalent of a handful of touch interactions, in a fraction of the time.</p>

<p>Sure, it&#39;s not easy, but if we spent a fraction of the time we use to make our visual interfaces pixel-perfect, we could completely re-imagine how users best interact with apps and devices. And with <code>NSLinguisticTagger</code>, it&#39;s never been easier to get started.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 22 Oct 2012 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:40:"http://nshipster.com/nslinguistictagger/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:40:"http://nshipster.com/nslinguistictagger/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:74;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:13:"AddressBookUI";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:5119:"<p><a href="http://developer.apple.com/library/ios/#documentation/AddressBookUI/Reference/AddressBookUI_Framework/_index.html">Address Book UI</a> is an iOS framework for displaying, selecting, editing, and creating contacts in a user&#39;s Address Book. Similar to the <a href="http://developer.apple.com/library/ios/#documentation/MessageUI/Reference/MessageUI_Framework_Reference/_index.html">Message UI</a> framework, Address Book UI contains a number of controllers that can be presented modally, to provide common system functionality in a uniform interface.</p>

<p>To use the framework, add both <code>AddressBook.framework</code> and <code>AddressBookUI.framework</code> to your project, under the &quot;Link Binary With Libraries&quot; build phase.</p>

<p>At first glance, it would seem that there&#39;s nothing really remarkable about the Address Book UI framework.</p>

<blockquote>
<p>Actually, in iOS 6, there are some <em>fascinating</em> inter-process shenanigans going on behind the scenes with modal controllers like <code>MFMailComposeViewController</code> and <code>ABNewPersonViewController</code>. Ole Begemann has an <a href="http://oleb.net/blog/2012/10/remote-view-controllers-in-ios-6/">excellent write-up on Remote View Controllers in iOS 6</a> that&#39;s definitely worth a read.</p>
</blockquote>

<p>However, tucked away from the rest of the controllers and protocols, there&#39;s a single Address Book UI function that&#39;s astoundingly useful:</p>

<p><code>ABCreateStringWithAddressDictionary()</code> - Returns a localized, formatted address string from components.</p>

<p>The first argument for the function is a dictionary containing the address components, keyed by string constants:</p>

<ul>
<li><code>kABPersonAddressStreetKey</code></li>
<li><code>kABPersonAddressCityKey</code></li>
<li><code>kABPersonAddressStateKey</code></li>
<li><code>kABPersonAddressZIPKey</code></li>
<li><code>kABPersonAddressCountryKey</code></li>
<li><code>kABPersonAddressCountryCodeKey</code></li>
</ul>

<p><code>kABPersonAddressCountryCodeKey</code> is an especially important attribute, as it determines which locale used to format the address string. If you are unsure of the country code, or one isn&#39;t provided with your particular data set, <code>NSLocale</code> may be able to help you out:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[</span><span class="n">mutableAddressComponents</span> <span class="n">setValue</span><span class="o">:</span><span class="p">[[[</span><span class="n">NSLocale</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithIdentifier</span><span class="o">:</span><span class="s">@&quot;en_US&quot;</span><span class="p">]</span> <span class="n">objectForKey</span><span class="o">:</span><span class="n">NSLocaleCountryCode</span><span class="p">]</span> <span class="n">forKey</span><span class="o">:</span><span class="p">(</span><span class="n">__bridge</span> <span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">kABPersonAddressCountryCodeKey</span><span class="p">];</span>
</code></pre></div>
<p>The second argument is a boolean flag, <code>addCountryName</code>. When <code>YES</code>, the name of the country corresponding to the specified country code will be automatically appended to the address. This should only used when the country code is known.</p>

<p>Nowhere else in all of the other frameworks is this functionality provided. It&#39;s not part of <a href="http://nshipster.com/nslocale/"><code>NSLocale</code></a>, or even Map Kit or Core Location. For all of the care and attention to detail that Apple puts into localization, it&#39;s surprising that such an important task is relegated to the corners of an obscure, somewhat-unrelated framework.</p>

<blockquote>
<p>Unfortunately, Address Book UI is not available in Mac OS X, and it would appear that there&#39;s no equivalent function provided on this platform.</p>
</blockquote>

<p>For you see, address formats vary greatly across different regions. For example, addresses in the United States take the form:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">Street Address
City State ZIP
Country
</code></pre></div>
<p>Whereas addresses in Japan follow a different convention:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">Postal Code
Prefecture Municipality
Street Address
Country
</code></pre></div>
<p>This is at least as jarring a difference in localization as <a href="http://en.wikipedia.org/wiki/Decimal_mark#Hindu.E2.80.93Arabic_numeral_system">swapping periods for commas the radix point</a>, so make sure to use this function anytime you&#39;re displaying an address from its components.</p>

<blockquote>
<p>One great way to take advantage of localized address book formatting would be to check out <a href="https://github.com/mattt/FormatterKit">FormatterKit</a>, which added <code>TTTAddressFormatter</code> in its 1.1 release.</p>
</blockquote>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 15 Oct 2012 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:35:"http://nshipster.com/addressbookui/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:35:"http://nshipster.com/addressbookui/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:75;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:1:"@";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:24494:"<p>Birdwatchers refer to it as (and I swear I&#39;m not making this up) <a href="http://en.wikipedia.org/wiki/Jizz_(birding)">&quot;Jizz&quot;</a>: those indefinable characteristics unique to a particular kind of thing.</p>

<p>This term can be appropriated to describe how seasoned individuals might distinguish <a href="http://www.rust-lang.org">Rust</a> from <a href="http://golang.org">Go</a>, or <a href="http://www.ruby-lang.org">Ruby</a> from <a href="http://elixir-lang.org">Elixir</a> at a glance.</p>

<p>Some just stick out like sore thumbs:</p>

<p>Perl, with all of its short variable names with special characters, reads like <a href="http://imgur.com/WyG2D">Q*bert swearing</a>.</p>

<p>Lisp, whose profusion of parentheses is best captured by <a href="http://discuss.fogcreek.com/joelonsoftware3/default.asp?cmd=show&amp;ixPost=94232&amp;ixReplies=38">that old joke</a> about the Russians in the 1980&#39;s proving that they had stolen the source code of some SDI missile interceptor code by showing the last page:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">                )))
              ) )
            ))) ) ))
           )))))
          )))
        ))
      )))) ))
    )))) ))
  )))
)
</code></pre></div>
<p>So if we were to go code-watching for the elusive Objective-C species, what would we look for? That&#39;s right:</p>

<ul>
<li>Square brackets</li>
<li>Ridiculously-long method names</li>
<li><code>@</code>&#39;s</li>
</ul>

<p><code>@</code>, or &quot;at&quot; sign compiler directives, are as central to understanding Objective-C&#39;s gestalt as its ancestry and underlying mechanisms. It&#39;s the sugary glue that allows Objective-C to be such a powerful, expressive language, and yet still compile all the way down to C.</p>

<p>Its uses are varied and disparate, to the point that the only accurate way to describe what <code>@</code> means by itself is &quot;shorthand for something to do with Objective-C&quot;. They cover a broad range in usefulness and obscurity, from staples like <code>@interface</code> and <code>@implementation</code> to ones you could go your whole career without running into, like <code>@defs</code> and <code>@compatibility_alias</code>.</p>

<p>But to anyone aspiring to be an NSHipster, intimate familiarity with <code>@</code> directives is tantamount to a music lover&#39;s ability to enumerate the entire Beatles catalog in chronological order (and most importantly, having unreasonably strong opinions about each of them).</p>

<h2>Interface &amp; Implementation</h2>

<p><code>@interface</code> and <code>@implementation</code> are the first things you learn about when you start Objective-C:</p>

<ul>
<li><code>@interface</code>...<code>@end</code></li>
<li><code>@implementation</code>...<code>@end</code></li>
</ul>

<p>What you don&#39;t learn about until later on, are categories and class extensions.</p>

<p>Categories allow you to extend the behavior of existing classes by adding new class or instance methods. As a convention, categories are defined in their own <code>.{h,m}</code> files, like so:</p>

<h4>MyObject+CategoryName.h</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">MyObject</span> <span class="nl">(CategoryName)</span>
  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">foo</span><span class="p">;</span>
  <span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">barWithBaz</span><span class="o">:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="n">baz</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div>
<h4>MyObject+CategoryName.m</h4>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@implementation</span> <span class="nc">MyObject</span> <span class="nl">(CategoryName)</span>
  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">foo</span> <span class="p">{</span>
    <span class="c1">// ...</span>
  <span class="p">}</span>

  <span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">barWithBaz</span><span class="o">:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="n">baz</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
  <span class="p">}</span>
<span class="k">@end</span>
</code></pre></div>
<p>Categories are particularly useful for convenience methods on standard framework classes (just don&#39;t go overboard with your utility functions).</p>

<blockquote>
<p>Pro Tip: Rather than littering your code with random, arbitrary color values, create an <code>NSColor</code> / <code>UIColor</code> color palette category that defines class methods like <code>+appNameDarkGrayColor</code>. You can then add a semantic layer on top of that by creating method aliases like <code>+appNameTextColor</code>, which returns <code>+appNameDarkGrayColor</code>.</p>
</blockquote>

<p>Extensions look like categories, but omit the category name. These are typically declared before an <code>@implementation</code> to specify a private interface, and even override properties declared in the interface:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">MyObject</span> <span class="p">()</span>
<span class="k">@property</span> <span class="p">(</span><span class="n">readwrite</span><span class="p">,</span> <span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">doSomething</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">MyObject</span>
<span class="k">@synthesize</span> <span class="n">name</span> <span class="o">=</span> <span class="n">_name</span><span class="p">;</span>

<span class="c1">// ...</span>

<span class="k">@end</span>
</code></pre></div>
<h3>Properties</h3>

<p>Property directives are likewise concepts learned early on:</p>

<ul>
<li><code>@property</code></li>
<li><code>@synthesize</code></li>
<li><code>@dynamic</code></li>
</ul>

<p>One interesting note with properties is that as of Xcode 4.4, it is no longer necessary to explicitly synthesize properties. Properties declared in an <code>@interface</code> are automatically synthesized (with leading underscore ivar name, i.e. <code>@synthesize propertyName = _propertyName</code>) in the implementation.</p>

<h3>Forward Class Declarations</h3>

<p>Occasionally, <code>@interface</code> declarations will reference an external class in a property or as a parameter type. Rather than adding <code>#import</code> statements for each class, it&#39;s good practice to use forward class declarations in the header, and import them in the implementation.</p>

<ul>
<li><code>@class</code></li>
</ul>

<p>Shorter compile times, less chance of cyclical references; you should definitely get in the habit of doing this if you aren&#39;t already.</p>

<h3>Instance Variable Visibility</h3>

<p>It&#39;s a matter of general convention that classes provide state and mutating interfaces through properties and methods, rather than directly exposing ivars.</p>

<p>Although ARC makes working with ivars much safer by taking care of memory management, the aforementioned automatic property synthesis removes the one place where ivars would otherwise be declared.</p>

<p>Nonetheless, in cases where ivars <em>are</em> directly manipulated, there are the following visibility directives:</p>

<ul>
<li><code>@public</code>: instance variable can be read and written to directly, using the notation <code>person-&gt;age = 32&quot;</code></li>
<li><code>@package</code>: instance variable is public, except outside of the framework in which it is specified (64-bit architectures only)</li>
<li><code>@protected</code>: instance variable is only accessible to its class and derived classes</li>
<li><code>@private</code>: instance variable is only accessible to its class</li>
</ul>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">Person</span> : <span class="nc">NSObject</span> <span class="p">{</span>
  <span class="k">@public</span>
  <span class="n">NSString</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>

  <span class="k">@private</span>
  <span class="kt">int</span> <span class="n">salary</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>
<h2>Protocols</h2>

<p>There&#39;s a distinct point early in an Objective-C programmer&#39;s evolution, when she realizes that she can define her own protocols.</p>

<p>The beauty of protocols is that they allow programmers to design contracts that can be adopted outside of a class hierarchy. It&#39;s the egalitarian mantra at the heart of the American Dream: that it doesn&#39;t matter who you are, or where you come from: anyone can achieve anything if they work hard enough.</p>

<p>...or at least that&#39;s idea, right?</p>

<ul>
<li><code>@protocol</code>...<code>@end</code>: Defines a set of methods to be implemented by any class  conforming to the protocol, as if they were added to the interface of that class.</li>
</ul>

<p>Architectural stability and expressiveness without the burden of coupling--protocols are awesome.</p>

<h3>Requirement Options</h3>

<p>You can further tailor a protocol by specifying methods as required or optional. Optional methods are stubbed in the interface, so as to be auto-completed in Xcode, but do not generate a warning if the method is not implemented. Protocol methods are required by default.</p>

<p>The syntax for <code>@required</code> and <code>@optional</code> follows that of the visibility macros:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@protocol</span> <span class="nc">CustomControlDelegate</span>
  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">control</span><span class="o">:</span><span class="p">(</span><span class="n">CustomControl</span> <span class="o">*</span><span class="p">)</span><span class="n">control</span> <span class="n">didSucceedWithResult</span><span class="o">:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="n">result</span><span class="p">;</span>
<span class="k">@optional</span>
  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">control</span><span class="o">:</span><span class="p">(</span><span class="n">CustomControl</span> <span class="o">*</span><span class="p">)</span><span class="n">control</span> <span class="n">didFailWithError</span><span class="o">:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="n">error</span><span class="p">;</span>
<span class="k">@end</span>
</code></pre></div>
<h2>Exception Handling</h2>

<p>Objective-C communicates unexpected state primarily through <code>NSError</code>. Whereas other languages would use exception handling for this, Objective-C relegates exceptions to truly exceptional behavior, including programmer error.</p>

<p><code>@</code> directives are used for the traditional convention of <code>try/catch/finally</code> blocks:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@try</span><span class="p">{</span>
  <span class="c1">// attempt to execute the following statements</span>
  <span class="p">[</span><span class="n">self</span> <span class="n">getValue</span><span class="o">:&amp;</span><span class="n">value</span> <span class="n">error</span><span class="o">:&amp;</span><span class="n">error</span><span class="p">];</span>

  <span class="c1">// if an exception is raised, or explicitly thrown...</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">@throw</span> <span class="n">exception</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span> <span class="k">@catch</span><span class="p">(</span><span class="n">NSException</span> <span class="o">*</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...handle the exception here</span>
<span class="p">}</span>  <span class="k">@finally</span> <span class="p">{</span>
  <span class="c1">// always execute this at the end of either the @try or @catch block</span>
  <span class="p">[</span><span class="n">self</span> <span class="n">cleanup</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div>
<h2>Literals</h2>

<p>Literals are shorthand notation for specifying fixed values. Literals are more
-or-less directly correlated with programmer happiness. By this measure, Objective-C has long been a language of programmer misery.</p>

<h3>Object Literals</h3>

<p>Until recently, Objective-C only had literals for <code>NSString</code>. But with the release of the <a href="http://clang.llvm.org/docs/ObjectiveCLiterals.html">Apple LLVM 4.0 compiler</a>, literals for <code>NSNumber</code>, <code>NSArray</code> and <code>NSDictionary</code> were added, with much rejoicing.</p>

<ul>
<li><code>@&quot;&quot;</code>: Returns an <code>NSString</code> object initialized with the Unicode content inside the quotation marks.</li>
<li><code>@42</code>, <code>@3.14</code>, <code>@YES</code>, <code>@&#39;Z&#39;</code>: Returns an <code>NSNumber</code> object initialized with pertinent class constructor, such that <code>@42</code> → <code>[NSNumber numberWithInteger:42]</code>, or <code>@YES</code> → <code>[NSNumber numberWithBool:YES]</code>. Supports the use of suffixes to further specify type, like <code>@42U</code> → <code>[NSNumber numberWithUnsignedInt:42U]</code>.</li>
<li><code>@[]</code>: Returns an <code>NSArray</code> object initialized with the comma-delimited list of objects as its contents. It uses +arrayWithObjects:count: class constructor method, which is a more precise alternative to the more familiar <code>+arrayWithObjects:</code>. For example, <code>@[@&quot;A&quot;, @NO, @2.718]</code> → <code>id objects[] = {@&quot;A&quot;, @NO, @2.718}; [NSArray arrayWithObjects:objects count:3]</code>.</li>
<li><code>@{}</code>: Returns an <code>NSDictionary</code> object initialized with the specified key-value pairs as its contents, in the format: <code>@{@&quot;someKey&quot; : @&quot;theValue&quot;}</code>.</li>
<li><code>@()</code>: Dynamically evaluates the boxed expression and returns the appropriate object literal based on its value (i.e. <code>NSString</code> for <code>const char*</code>, <code>NSNumber</code> for <code>int</code>, etc.). This is also the designated way to use number literals with <code>enum</code> values.</li>
</ul>

<h3>Objective-C Literals</h3>

<p>Selectors and protocols can be passed as method parameters. <code>@selector()</code> and <code>@protocol()</code> serve as pseudo-literal directives that return a pointer to a particular selector (<code>SEL</code>) or protocol (<code>Protocol *</code>).</p>

<ul>
<li><code>@selector()</code>: Returns an <code>SEL</code> pointer to a selector with the specified name. Used in methods like <code>-performSelector:withObject:</code>.</li>
<li><code>@protocol()</code>: Returns a <code>Protocol *</code> pointer to the protocol with the specified name. Used in methods like <code>-conformsToProtocol:</code>.</li>
</ul>

<h3>C Literals</h3>

<p>Literals can also work the other way around, transforming Objective-C objects into C values. These directives in particular allow us to peek underneath the Objective-C veil, to begin to understand what&#39;s really going on.</p>

<p>Did you know that all Objective-C classes and objects are just glorified <code>struct</code>s? Or that the entire identity of an object hinges on a single <code>isa</code> field in that <code>struct</code>?</p>

<p>For most of us, at least most of the time, coming into this knowledge is but an academic exercise. But for anyone venturing into low-level optimizations, this is simply the jumping-off point.</p>

<ul>
<li><code>@encode()</code>: Returns the <a href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html">type encoding</a> of a type. This type value can be used as the first argument encode in <code>NSCoder -encodeValueOfObjCType:at</code>.</li>
<li><code>@defs()</code>: Returns the layout of an Objective-C class. For example, to declare a struct with the same fields as an <code>NSObject</code>, you would simply do:</li>
</ul>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">struct</span> <span class="p">{</span>
  <span class="p">@</span><span class="n">defs</span><span class="p">(</span><span class="n">NSObject</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>
<blockquote>
<p>Ed. As pointed out by readers <a href="http://twitter.com/secboffin">@secboffin</a> &amp; <a href="http://twitter.com/ameaijou">@ameaijou</a>, <code>@defs</code> is unavailable in the modern Objective-C runtime.</p>
</blockquote>

<h2>Optimizations</h2>

<p>There are some <code>@</code> compiler directives specifically purposed for providing shortcuts for common optimizations.</p>

<ul>
<li><code>@autoreleasepool{}</code>: If your code contains a tight loop that creates lots of temporary objects, you can use the <code>@autoreleasepool</code> directive to optimize for these short-lived, locally-scoped objects by being more aggressive about how they&#39;re deallocated. <code>@autoreleasepool</code> replaces and improves upon the old <code>NSAutoreleasePool</code>, which is significantly slower, and unavailable with ARC.</li>
<li><code>@synchronized(){}</code>: This directive offers a convenient way to guarantee the safe execution of a particular block within a specified context (usually <code>self</code>). Locking in this way is expensive, however, so for classes aiming for a particular level of thread safety, a dedicated <code>NSLock</code> property or the use of low-level locking functions like <code>OSAtomicCompareAndSwap32(3)</code> are recommended.</li>
</ul>

<h2>Compatibility</h2>

<p>In case all of the previous directives were old hat for you, there&#39;s a strong likelihood that you didn&#39;t know about this one:</p>

<ul>
<li><code>@compatibility_alias</code>: Allows existing classes to be aliased by a different name.</li>
</ul>

<p>For example <a href="https://github.com/steipete/PSTCollectionView">PSTCollectionView</a> uses <code>@compatibility_alias</code> to significantly improve the experience of using the backwards-compatible, drop-in replacement for <a href="http://nshipster.com/uicollectionview/">UICollectionView</a>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="c1">// Allows code to just use UICollectionView as if it would be available on iOS SDK 5.</span>
<span class="c1">// http://developer.apple.    com/legacy/mac/library/#documentation/DeveloperTools/gcc-3.   3/gcc/compatibility_005falias.html</span>
<span class="cp">#if __IPHONE_OS_VERSION_MAX_ALLOWED &lt; 60000</span>
<span class="p">@</span><span class="n">compatibility_alias</span> <span class="n">UICollectionViewController</span> <span class="n">PSTCollectionViewController</span><span class="p">;</span>
<span class="p">@</span><span class="n">compatibility_alias</span> <span class="n">UICollectionView</span> <span class="n">PSTCollectionView</span><span class="p">;</span>
<span class="p">@</span><span class="n">compatibility_alias</span> <span class="n">UICollectionReusableView</span> <span class="n">PSTCollectionReusableView</span><span class="p">;</span>
<span class="p">@</span><span class="n">compatibility_alias</span> <span class="n">UICollectionViewCell</span> <span class="n">PSTCollectionViewCell</span><span class="p">;</span>
<span class="p">@</span><span class="n">compatibility_alias</span> <span class="n">UICollectionViewLayout</span> <span class="n">PSTCollectionViewLayout</span><span class="p">;</span>
<span class="p">@</span><span class="n">compatibility_alias</span> <span class="n">UICollectionViewFlowLayout</span> <span class="n">PSTCollectionViewFlowLayout</span><span class="p">;</span>
<span class="p">@</span><span class="n">compatibility_alias</span> <span class="n">UICollectionViewLayoutAttributes</span>     <span class="n">PSTCollectionViewLayoutAttributes</span><span class="p">;</span>
<span class="k">@protocol</span> <span class="nc">UICollectionViewDataSource</span> <span class="o">&lt;</span><span class="n">PSTCollectionViewDataSource</span><span class="o">&gt;</span> <span class="k">@end</span>
<span class="k">@protocol</span> <span class="nc">UICollectionViewDelegate</span> <span class="o">&lt;</span><span class="n">PSTCollectionViewDelegate</span><span class="o">&gt;</span> <span class="k">@end</span>
<span class="cp">#endif</span>
</code></pre></div>
<p>Using this clever combination of macros, a developer can develop with <code>UICollectionView</code> by including <code>PSTCollectionView</code>--without worrying about the deployment target of the final project. As a drop-in replacement, the same code works more-or-less identically on iOS 6 as it does on iOS 4.3.</p>

<hr>

<p>So to review:</p>

<p><strong>Interfaces &amp; Implementation</strong></p>

<ul>
<li><code>@interface</code>...<code>@end</code></li>
<li><code>@implementation</code>...<code>@end</code></li>
<li><code>@class</code></li>
</ul>

<p><strong>Instance Variable Visibility</strong></p>

<ul>
<li><code>@public</code></li>
<li><code>@package</code></li>
<li><code>@protected</code></li>
<li><code>@private</code></li>
</ul>

<p><strong>Properties</strong></p>

<ul>
<li><code>@property</code></li>
<li><code>@synthesize</code></li>
<li><code>@dynamic</code></li>
</ul>

<p><strong>Protocols</strong></p>

<ul>
<li><code>@protocol</code></li>
<li><code>@required</code></li>
<li><code>@optional</code></li>
</ul>

<p><strong>Exception Handling</strong></p>

<ul>
<li><code>@try</code></li>
<li><code>@catch</code></li>
<li><code>@finally</code></li>
<li><code>@throw</code></li>
</ul>

<p><strong>Object Literals</strong></p>

<ul>
<li><code>@&quot;&quot;</code></li>
<li><code>@42</code>, <code>@3.14</code>, <code>@YES</code>, <code>@&#39;Z&#39;</code></li>
<li><code>@[]</code></li>
<li><code>@{}</code></li>
<li><code>@()</code></li>
</ul>

<p><strong>Objective-C Literals</strong></p>

<ul>
<li><code>@selector()</code></li>
<li><code>@protocol()</code></li>
</ul>

<p><strong>C Literals</strong></p>

<ul>
<li><code>@encode()</code></li>
<li><code>@defs()</code></li>
</ul>

<p><strong>Optimizations</strong></p>

<ul>
<li><code>@autoreleasepool{}</code></li>
<li><code>@synchronized{}</code></li>
</ul>

<p><strong>Compatibility</strong></p>

<ul>
<li><code>@compatibility_alias</code></li>
</ul>

<p>Thus concludes this exhaustive rundown of the many faces of <code>@</code>. It&#39;s a versatile, power-packed character, that embodies the underlying design and mechanisms of the language.</p>

<blockquote>
<p>This should be a complete list, but there&#39;s always a chance that some new or long-forgotten ones slipped between the cracks. If you know of any <code>@</code> directives that were left out, be sure to let <a href="https://twitter.com/nshipster">@NSHipster</a> know.</p>
</blockquote>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 08 Oct 2012 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:44:"http://nshipster.com/at-compiler-directives/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:44:"http://nshipster.com/at-compiler-directives/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:76;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:7:"#pragma";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:8366:"<p><code>#pragma</code> declarations are a mark of craftsmanship in Objective-C. Although originally used to make source code compatible between different compilers, the Xcode-savvy coder uses <code>#pragma</code> declarations to very different ends.</p>

<p>In this modern context, <code>#pragma</code> skirts the line between comment and code. As a preprocessor directive, <code>#pragma</code> evaluates at compile-time. But unlike other macros, such as <code>#ifdef...#endif</code>, the way <code>#pragma</code> is used will not change the runtime behavior of your application. Instead, <code>#pragma</code> declarations are used by Xcode to accomplish two primary tasks: organizing code and inhibiting compiler warnings.</p>

<blockquote>
<p>In addition to the <code>#pragma</code> syntax, both <a href="http://gcc.gnu.org/onlinedocs/cpp/Pragmas.html">GCC</a> and <a href="http://clang.llvm.org/docs/UsersManual.html#controlling-diagnostics-via-pragmas">Clang</a> have added the C99 <code>_Pragma</code> operator.</p>
</blockquote>

<h2>Organizing Your Code</h2>

<p>Code organization is a matter of hygiene. How you structure your code is a reflection on you and your work. A lack of convention and internal consistency indicates either carelessness or incompetence--and worse, makes a project difficult to maintain and collaborate on.</p>

<p>Good habits start with <code>#pragma mark</code>. Like so:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@implementation</span> <span class="nc">ViewController</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">init</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="cp">#pragma mark - UIViewController</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="cp">#pragma mark - IBAction</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">IBAction</span><span class="p">)</span><span class="nf">cancel:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="cp">#pragma mark - UITableViewDataSource</span>

<span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">numberOfRowsInSection:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">section</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>

<span class="cp">#pragma mark - UITableViewDelegate</span>

<span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">didSelectRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>
</code></pre></div>
<p>Use <code>#pragma mark</code> in your <code>@implementation</code> to divide code into logical sections. Not only do these sections make it easier to read through the code itself, but it also adds visual cues to the Xcode source navigator (<code>#pragma mark</code> declarations starting with a dash (<code>-</code>) are preceded with a horizontal divider).</p>

<p><img src="http://nshipster.s3.amazonaws.com/pragma-xcode-sections.png" alt="Xcode Sections"></p>

<p>If your class conforms to any <code>@protocols</code>, start by grouping all of the methods within each protocol together, and adding a <code>#pragma mark</code> header with the name of that protocol. Another good convention is to group subclassed methods according to their respective superclass. For example, an <code>NSInputStream</code> subclass should have a group marked <code>NSInputStream</code>, followed by a group marked <code>NSStream</code>. Things like <code>IBAction</code> outlets, or methods corresponding to target / action, notification, or KVO selectors probably deserve their own sections as well.</p>

<p>Your code should be clean enough to eat off of. So take the time to leave your <code>.m</code> files better than how you found them.</p>

<h2>Inhibiting Warnings</h2>

<p><code>#pragma mark</code> is pretty mainstream. On the other hand, <code>#pragma</code> declarations to inhibit warnings from the compiler &amp; static analyzer--now that&#39;s pretty fresh.</p>

<p>You know what&#39;s even more annoying than poorly-formatted code? Code that generates warnings. Especially 3rd-party code. There are few things as irksome as that one vendor library that takes forever to compile, and finishes with 200+ warnings. Even shipping code with 1 warning is in poor form.</p>

<blockquote>
<p>Pro tip: Try setting the <code>-Weverything</code> flag and checking the &quot;Treat Warnings as Errors&quot; box your build settings. This turns on Hard Mode in Xcode.</p>
</blockquote>

<p>But sometimes there&#39;s no avoiding compiler warnings. Deprecation notices and retain-cycle false positives are two common situations where this might happen. In those rare cases where you are <em>absolutely</em> certain that a particular compiler or static analyzer warning should be inhibited, <code>#pragma</code> comes to the rescue:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="c1">// completionBlock is manually nilled out in AFURLConnectionOperation to break the retain cycle.</span>
<span class="cp">#pragma clang diagnostic push</span>
<span class="cp">#pragma clang diagnostic ignored &quot;-Warc-retain-cycles&quot;</span>
    <span class="n">self</span><span class="p">.</span><span class="n">completionBlock</span> <span class="o">=</span> <span class="o">^</span> <span class="p">{</span>
        <span class="p">...</span>
    <span class="p">};</span>
<span class="cp">#pragma clang diagnostic pop</span>
</code></pre></div>
<p>This code sample <a href="https://github.com/AFNetworking/AFNetworking/blob/master/AFNetworking/AFHTTPRequestOperation.m#L247">from AFNetworking</a> (contributed by <a href="https://github.com/steipete">Peter Steinberger</a>) is an example of an otherwise unavoidable warning from the static analyzer. Clang notices a strong reference to <code>self</code> within the block, and warns about a possible <a href="http://www.quora.com/What-is-a-retain-cycle">retain cycle</a>. However, the <code>super</code> implementation of <code>setCompletionBlock</code> takes care of this by <code>nil</code>-ing out the strong reference after the completion block is finished.</p>

<p>Fortunately, Clang provides a convenient way to get around all of this. Using <code>#pragma clang diagnostic push/pop</code>, you can tell the compiler to ignore certain warnings, <em>only</em> for a particular section of code (the original diagnostic settings are restored with the final <code>pop</code>).</p>

<blockquote>
<p>You can read more about the LLVM&#39;s use of <code>#pragma</code> in the <a href="http://clang.llvm.org/docs/UsersManual.html#diagnostics_pragmas">Clang Compiler User&#39;s Manual</a>.</p>
</blockquote>

<p>Just don&#39;t use this as a way to sweep legitimate warnings under the rug--that will only come back to bite you later.</p>

<hr>

<p>So there you go: two ways you can markedly improve your code using <code>#pragma</code> declarations.</p>

<p>Like the thrift store 8-track player you turned into that lamp in the foyer, <code>#pragma</code> remains a curious vestige of the past: Once the secret language of compilers, now re-purposed to better-communicate intent to other programmers. How delightfully vintage!</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 01 Oct 2012 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:28:"http://nshipster.com/pragma/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:28:"http://nshipster.com/pragma/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:77;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:16:"UICollectionView";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:8542:"<p><code>UICollectionView</code> is the new <code>UITableView</code>. It&#39;s that important.</p>

<p>This is not to say that collection views are in any way unknown or obscure--anyone who went to any of the WWDC sessions about it, or got to play with in the iOS 6 beta already know what&#39;s up. </p>

<p>Remember, being an NSHipster isn&#39;t just about knowing obscure gems in the rough. Sometimes, it&#39;s about knowing about up-and-comers before they become popular and sell out. So before everybody else finds out for themselves, here&#39;s the skinny on the next big thing:</p>

<hr>

<p><code>UICollectionView</code> takes the familiar patterns of <code>UITableView</code> and generalizes them to make any layout possible (and, in many cases, trivial).</p>

<p>Like <code>UITableView</code>, <code>UICollectionView</code> is a <code>UIScrollView</code> subclass that manages a collection of ordered items. Items are managed by a <em>data source</em>, which provides a representative cell view at a particular index path.</p>

<p>Unlike <code>UITableView</code>, however, <code>UICollectionView</code> is not constrained to a vertical, single-column layout. Instead, a collection view has a <em>layout</em> object, which determines the position of each subview, similar to a data source in some respects. More on that later.</p>

<h3>Cell Views</h3>

<p>In another departure from the old-school table view way of doing things, the process of recycling views has been significantly improved. </p>

<p>In <code>-tableView:cellForRowAtIndexPath:</code>, a developer had to invoke the familiar incantation:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">UITableViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">[</span><span class="n">tableView</span> <span class="n">dequeueReusableCellWithIdentifier</span><span class="o">:</span><span class="p">...];</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">cell</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">cell</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UITableViewCell</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithStyle</span><span class="o">:</span><span class="p">...</span> <span class="n">reuseIdentifier</span><span class="o">:</span><span class="p">...];</span>
<span class="p">}</span>
</code></pre></div>
<p><code>UICollectionView</code> thankfully does away with this. <code>-dequeueReusableCellWithReuseIdentifier:forIndexPath:</code> is guaranteed to return a valid object, by creating a new cell if there are no cells to reuse. Simply register a <code>UICollectionReusableView</code> subclass for a particular reuse identifier, and everything will work automatically. Thankfully, this behavior has been backported to <code>UITableView</code> as well with iOS 6.</p>

<h3>Supplementary Views</h3>

<p>Because collection views aren&#39;t relegated to any particular structure, the convention of &quot;header&quot; and &quot;footer&quot; views isn&#39;t really applicable. So in its place, collection views have <em>supplementary views</em>, which can be associated with each cell.</p>

<p>Each cell can have multiple supplementary views associated with it--one for each named &quot;kind&quot;. As such, headers and footers are just the beginning of what can be done with supplementary views. </p>

<p>The whole point is that with supplementary views, even the most complex layout can be accomplished without compromising the semantic integrity of cells. <code>UITableView</code> hacks are to <a href="http://en.wikipedia.org/wiki/Spacer_GIF"><code>spacer.gif</code></a> as <code>UICollectionView</code> cells are to <a href="http://en.wikipedia.org/wiki/Semantic_HTML">semantic HTML</a>.</p>

<h3>Decoration Views</h3>

<p>In addition to cell views and supplementary views, collections also have <em>decoration views</em>. A decoration view, as the name implies, is something that without a functional purpose... other than to perhaps <a href="http://skeu.it">spurn the hatred of anti-skeuomorphic zealots</a> across the interwebs. But really, if you&#39;re resigned to imbue your virtual book collection app with immaculately-textured wood-grained shelves, it might as well be easy to do, <em>right</em>?</p>

<p>One thing to remember about decoration views is that they are entirely managed by the layout, unlike cell or supplementary views, which are under the jurisdiction of the collection view data source.</p>

<h2>Layouts and Layout Attributes</h2>

<p>Layouts are at the heart of what makes <code>UICollectionView</code> so magical. Think of them as the CSS to your semantic HTML of collection cells from before.</p>

<p><code>UICollectionViewLayout</code> is an abstract base class for positioning cell views and their supplementary and decoration views. But rather than subclass this directly, most applications will opt to use or subclass <code>UICollectionViewFlowLayout</code>. Flow layouts cover the broad class of layouts with some notion of linearity, whether that&#39;s a single row or column or a grid. </p>

<p>Until you&#39;re comfortable enough to understand the limitations of flow layouts, it&#39;s generally a safe bet to just start with that. </p>

<p>Each cell view, supplemental view, and decoration view have layout attributes. To get an idea of how flexible layouts are, look no further than the properties of an <code>UICollectionViewLayoutAttributes</code> object:</p>

<ul>
<li><code>frame</code></li>
<li><code>center</code><br></li>
<li><code>size</code></li>
<li><code>transform3D</code></li>
<li><code>alpha</code></li>
<li><code>zIndex</code></li>
<li><code>hidden</code></li>
</ul>

<p>Attributes are specified by the kind of delegate methods you might expect:</p>

<ul>
<li><code>-layoutAttributesForItemAtIndexPath:</code></li>
<li><code>-layoutAttributesForSupplementaryViewOfKind:atIndexPath:</code></li>
<li><code>-layoutAttributesForDecorationViewOfKind:atIndexPath:</code></li>
</ul>

<p>What&#39;s <em>extremely</em> cool is this method here:</p>

<ul>
<li><code>-layoutAttributesForElementsInRect:</code></li>
</ul>

<p>Using this, you could, for example, fade out items as they approach the edge of the screen. Or, since all of the layout attribute properties are automatically animated, you could create a poor-man&#39;s <a href="http://en.wikipedia.org/wiki/Cover_Flow">cover flow</a> layout in just a couple lines of code with the right set of 3D transforms.</p>

<p>In fact, collection views can even swap out layouts wholesale, allowing views to transition seamlessly between different modes--all without changing the underlying data.</p>

<hr>

<p>Since the introduction of the iPad, there has been a subtle, yet lingering tension between the original UI paradigms of the iPhone, and the demands of this newer, larger form factor. With the iPhone 5 here, and a rumored &quot;iPad mini&quot; on the way, this tension could have threatened to fracture the entire platform, had it not been for <code>UICollectionView</code> (as well as Auto-Layout).</p>

<p>There are a million ways Apple could (or could not) have provided this kind of functionality, but they really knocked it out of the park with how they designed everything.</p>

<p>The clean, logical separation between data source and layout; the clear division between cell, supplementary, and decoration views; the extensive set of layout attributes that are automatically animated... a lot of care and wisdom has been put together with these APIs. </p>

<p>As a result, the entire landscape of iOS apps will be forever changed. With collection views, the aesthetic shift that was kicked off with the iPad will explode into an entire re-definition of how we expect apps to look and behave.</p>

<p>Everyone may not be hip to collection views quite yet, but now you&#39;ll be able to say that you knew about them before they were cool.</p>

<blockquote>
<p>Lest you think you have to hold off for iOS 6 adoption to catch up in order to use collection views in your app, here&#39;s some great news:</p>

<p><a href="https://github.com/steipete">Peter Steinberger</a> has released <a href="https://github.com/steipete/PSTCollectionView">PSTCollectionView</a>, a <em>100% API-compatible replacement for <code>UICollectionView</code> that supports iOS 4.3+</em>. Check it out!</p>
</blockquote>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 24 Sep 2012 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/uicollectionview/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/uicollectionview/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:78;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:14:"NSCharacterSet";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:14941:"<p>As mentioned <a href="http://nshipster.com/cfstringtransform/">previously</a>, Foundation boasts one of the best, most complete implementations of strings around.</p>

<p>But a string implementation is only as good as the programmer who wields it. So this week, we&#39;re going to explore some common uses--and misuses--of an important part of the Foundation string ecosystem: <code>NSCharacterSet</code>.</p>

<hr>

<blockquote>
<p>If you&#39;re fuzzy on what character encodings are (or even if you have a pretty good working knowledge), you should take this opportunity to read / re-read / skim and read later Joel Spolsky&#39;s classic essay <a href="http://www.joelonsoftware.com/articles/Unicode.html">&quot;The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)&quot;</a>. Having that fresh in your mind will give you a much better appreciation of everything we&#39;re about to cover.</p>
</blockquote>

<p><code>NSCharacterSet</code> and its mutable counterpart, <code>NSMutableCharacterSet</code>, provide an object-oriented way of representing sets of Unicode characters. It&#39;s most often used with <code>NSString</code> &amp; <code>NSScanner</code> to filter, remove, or split on different kinds of characters. To give you an idea of what those kinds of characters can be, take a look at the class methods provided by <code>NSCharacterSet</code>:</p>

<ul>
<li><code>alphanumericCharacterSet</code></li>
<li><code>capitalizedLetterCharacterSet</code></li>
<li><code>controlCharacterSet</code></li>
<li><code>decimalDigitCharacterSet</code></li>
<li><code>decomposableCharacterSet</code></li>
<li><code>illegalCharacterSet</code></li>
<li><code>letterCharacterSet</code></li>
<li><code>lowercaseLetterCharacterSet</code></li>
<li><code>newlineCharacterSet</code></li>
<li><code>nonBaseCharacterSet</code></li>
<li><code>punctuationCharacterSet</code></li>
<li><code>symbolCharacterSet</code></li>
<li><code>uppercaseLetterCharacterSet</code></li>
<li><code>whitespaceAndNewlineCharacterSet</code></li>
<li><code>whitespaceCharacterSet</code></li>
</ul>

<p>Contrary to what its name might suggest, <code>NSCharacterSet</code> has <em>nothing</em> to do with <code>NSSet</code>.</p>

<p>However, <code>NSCharacterSet</code> <em>does</em> have quite a bit in common with <code>NSIndexSet</code>, conceptually if not also in its underlying implementation. <code>NSIndexSet</code>, covered <a href="http://nshipster.com/nsindexset/">previously</a>, represents a sorted collection of unique unsigned integers. Unicode characters are likewise unique unsigned integers that roughly correspond to some orthographic representation. Thus, a character set like <code>NSCharacterSet +lowercaseCharacterSet</code> is analogous to the <code>NSIndexSet</code> of the integers 97 to 122.</p>

<p>Now that we&#39;re comfortable with the basic concepts of <code>NSCharacterSet</code>, let&#39;s see some of those patterns and anti-patterns:</p>

<h2>Stripping Whitespace</h2>

<p><code>NSString -stringByTrimmingCharactersInSet:</code> is a method you should know by heart. It&#39;s most often passed <code>NSCharacterSet +whitespaceCharacterSet</code> or <code>+whitespaceAndNewlineCharacterSet</code> in order to remove the leading and trailing whitespace of string input.</p>

<p>It&#39;s important to note that this method <em>only</em> strips the <em>first</em> and <em>last</em> contiguous sequences of characters in the specified set. That is to say, if you want to remove excess whitespace between words, you need to go a step further.</p>

<h2>Squashing Whitespace</h2>

<p>So let&#39;s say you do want to get rid of excessive inter-word spacing for that string you just stripped of whitespace. Here&#39;s a really easy way to do that:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="s">@&quot;Lorem    ipsum dolar   sit  amet.&quot;</span><span class="p">;</span>
<span class="n">string</span> <span class="o">=</span> <span class="p">[</span><span class="n">string</span> <span class="n">stringByTrimmingCharactersInSet</span><span class="o">:</span><span class="p">[</span><span class="n">NSCharacterSet</span> <span class="n">whitespaceCharacterSet</span><span class="p">]];</span>

<span class="n">NSArray</span> <span class="o">*</span><span class="n">components</span> <span class="o">=</span> <span class="p">[</span><span class="n">string</span> <span class="n">componentsSeparatedByCharactersInSet</span><span class="o">:</span><span class="p">[</span><span class="n">NSCharacterSet</span> <span class="n">whitespaceCharacterSet</span><span class="p">]];</span>
<span class="n">components</span> <span class="o">=</span> <span class="p">[</span><span class="n">components</span> <span class="n">filteredArrayUsingPredicate</span><span class="o">:</span><span class="p">[</span><span class="n">NSPredicate</span> <span class="n">predicateWithFormat</span><span class="o">:</span><span class="s">@&quot;self &lt;&gt; &#39;&#39;&quot;</span><span class="p">]];</span>

<span class="n">string</span> <span class="o">=</span> <span class="p">[</span><span class="n">components</span> <span class="n">componentsJoinedByString</span><span class="o">:</span><span class="s">@&quot; &quot;</span><span class="p">];</span>
</code></pre></div>
<p>First, trim the string of leading and trailing whitespace. Next, use <code>NSString -componentsSeparatedByCharactersInSet:</code> to split on the remaining whitespace to create an <code>NSArray</code>. Next, filter out the blank string components with an <code>NSPredicate</code>. Finally, use <code>NSArray -componentsJoinedByString:</code> to re-join the components with a single space. Note that this only works for languages like English that delimit words with whitespace.</p>

<p>And now for the anti-patterns. Take a gander at <a href="http://stackoverflow.com/questions/758212/how-can-i-strip-all-the-whitespaces-from-a-string-in-objective-c">the answers to this question on StackOverflow</a>.</p>

<p>At the time of writing, the correct answer ranks second by number of votes, with 58 up and 2 down. The top answer edges it out with 84 up and 24 down.</p>

<p>Now, it&#39;s not uncommon for the top-voted / accepted answer to not be the correct one, but this question may set records for number of completely distinct answers (10), and number of unique, completely incorrect answers (9).</p>

<p>Without further ado, here are the 9 <em>incorrect</em> answers:</p>

<ul>
<li>&quot;Use <code>stringByTrimmingCharactersInSet</code>&quot; - <em>Only strips the leading and trailing whitespace, as you know.</em></li>
<li>&quot;Replace &#39; &#39; with &#39;&#39;&quot; - <em>This removes <strong>all</strong> of the spaces. Swing and a miss.</em></li>
<li>&quot;Use a regular expression&quot; - <em>Kinda works, except it doesn&#39;t handle leading and trailing whitespace. A regular expression is overkill anyway.</em></li>
<li>&quot;Use Regexp Lite&quot; - <em>No seriously, regular expressions are completely unnecessary. And it&#39;s definitely not worth the external dependency.</em></li>
<li>&quot;Use OgreKit&quot; - <em>Ditto any other third-party regexp library.</em></li>
<li>&quot;Split the string into components, iterate over them to find components with non-zero length, and then re-combine&quot; - <em>So close, but <code>componentsSeparatedByCharactersInSet:</code> already makes the iteration unnecessary.</em></li>
<li>&quot;Replace two-space strings with single-space strings in a while loop&quot; - <em>Wrong and oh-so computationally wasteful</em>.</li>
<li>&quot;Manually iterate over each <code>unichar</code> in the string and use <code>NSCharacterSet -characterIsMember:</code>&quot; - <em>Shows a surprising level of sophistication for missing the method that does this in the standard library.</em></li>
<li>&quot;Find and remove all of the tabs&quot; - <em>Thanks all the same, but who said anything about tabs?</em></li>
</ul>

<p>I don&#39;t mean to rag on any of the answerers personally--this is all to point out how many ways there are to approach these kinds of tasks, and how many of those ways are totally wrong.</p>

<h2>String Tokenization</h2>

<p><strong>Do not use <code>NSCharacterSet</code> to tokenize strings.</strong>
<strong>Use <code>CFStringTokenizer</code> instead.</strong></p>

<p>You can be forgiven for using <code>componentsSeparatedByCharactersInSet:</code> to clean up user input, but do this for anything more complex, and you&#39;ll be in a world of pain.</p>

<p>Why? Well, remember that bit about languages not always having whitespace word boundaries? As it turns out, those languages are rather widely used. Just Chinese and Japanese--#1 and #9 in terms of number of speakers, respectively--alone account for 16% of the world population, or well over a billion people.</p>

<p>...and even for languages that do have whitespace word boundaries, tokenization has some obscure edge cases, particularly with compound words and punctuation.</p>

<p>This is all to say: use <code>CFStringTokenizer</code> (or <code>enumerateSubstringsInRange:options:usingBlock:</code>) if you ever intend to split a string by words in any meaningful way.</p>

<h2>Parse Data From Strings</h2>

<p><code>NSScanner</code> is a class that helps to parse data out of arbitrary or semi-structured strings. When you create a scanner for a string, you can specify a set of characters to skip, thus preventing any of those characters from somehow being included in the values parsed from the string.</p>

<p>For example, let&#39;s say you have a string that parses opening hours in the following form:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">Mon-Thurs:  8:00 - 18:00
Fri:        7:00 - 17:00
Sat-Sun:    10:00 - 15:00
</code></pre></div>
<p>You might <code>enumerateLinesUsingBlock:</code> and parse with an <code>NSScanner</code> like so:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSMutableCharacterSet</span> <span class="o">*</span><span class="n">skippedCharacters</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableCharacterSet</span> <span class="n">punctuationCharacterSet</span><span class="p">];</span>
<span class="p">[</span><span class="n">skippedCharacters</span> <span class="n">formUnionWithCharacterSet</span><span class="o">:</span><span class="p">[</span><span class="n">NSCharacterSet</span> <span class="n">whitespaceCharacterSet</span><span class="p">]];</span>

<span class="p">[</span><span class="n">hours</span> <span class="n">enumerateLinesUsingBlock</span><span class="o">:^</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">line</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">NSScanner</span> <span class="o">*</span><span class="n">scanner</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSScanner</span> <span class="n">scannerWithString</span><span class="o">:</span><span class="n">line</span><span class="p">];</span>
  <span class="p">[</span><span class="n">scanner</span> <span class="n">setCharactersToBeSkipped</span><span class="o">:</span><span class="n">skippedCharacters</span><span class="p">];</span>

  <span class="n">NSString</span> <span class="o">*</span><span class="n">startDay</span><span class="p">,</span> <span class="o">*</span><span class="n">endDay</span><span class="p">;</span>
  <span class="n">NSUInteger</span> <span class="n">startHour</span><span class="p">,</span> <span class="n">startMinute</span><span class="p">,</span> <span class="n">endHour</span><span class="p">,</span> <span class="n">endMinute</span><span class="p">;</span>

  <span class="p">[</span><span class="n">scanner</span> <span class="n">scanCharactersFromSet</span><span class="o">:</span><span class="p">[</span><span class="n">NSCharacterSet</span> <span class="n">letterCharacterSet</span><span class="p">]</span> <span class="n">intoString</span><span class="o">:&amp;</span><span class="n">startDay</span><span class="p">];</span>
  <span class="p">[</span><span class="n">scanner</span> <span class="n">scanCharactersFromSet</span><span class="o">:</span><span class="p">[</span><span class="n">NSCharacterSet</span> <span class="n">letterCharacterSet</span><span class="p">]</span> <span class="n">intoString</span><span class="o">:&amp;</span><span class="n">endDay</span><span class="p">];</span>

  <span class="p">[</span><span class="n">scanner</span> <span class="n">scanInteger</span><span class="o">:&amp;</span><span class="n">startHour</span><span class="p">];</span>
  <span class="p">[</span><span class="n">scanner</span> <span class="n">scanInteger</span><span class="o">:&amp;</span><span class="n">startMinute</span><span class="p">];</span>
  <span class="p">[</span><span class="n">scanner</span> <span class="n">scanInteger</span><span class="o">:&amp;</span><span class="n">endHour</span><span class="p">];</span>
  <span class="p">[</span><span class="n">scanner</span> <span class="n">scanInteger</span><span class="o">:&amp;</span><span class="n">endMinute</span><span class="p">];</span>
<span class="p">}];</span>
</code></pre></div>
<p>We first construct an <code>NSMutableCharacterSet</code> from the union of whitespace and punctuation characters. Telling <code>NSScanner</code> to skip these characters greatly reduces the logic necessary to parse values from the string.</p>

<p><code>scanCharactersFromSet:</code> with the letters character set captures the start and (optional) end day of the week for each entry. <code>scanInteger</code> similarly captures the next contiguous integer value.</p>

<p><code>NSCharacterSet</code> and <code>NSScanner</code> allow you to code quickly and confidently. They&#39;re really a great combination, those two.</p>

<hr>

<p><code>NSCharacterSet</code> is but one piece to the Foundation string ecosystem, and perhaps the most misused and misunderstood of them all. By keeping these patterns and anti-patterns in mind, however, not only will you be able to do useful things like manage whitespace and scan information from strings, but--more importantly--you&#39;ll be able to avoid all of the wrong ways to do it.</p>

<p>And if not being wrong isn&#39;t the most important thing about being an NSHipster, then I don&#39;t want to be right!</p>

<blockquote>
<p>Ed. Speaking of (not) being wrong, the original version of this article contained errors in both code samples. These have since been corrected.</p>
</blockquote>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 17 Sep 2012 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:36:"http://nshipster.com/nscharacterset/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:36:"http://nshipster.com/nscharacterset/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:79;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:15:"UIAccessibility";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:11058:"<blockquote>
<p>We all want to help one another, human beings are like that.
- <a href="http://en.wikiquote.org/wiki/Charlie_Chaplin">Charlie Chaplin</a></p>
</blockquote>

<p>You know what I wish everyone would copy from Apple? Their assistive technologies.</p>

<p>iPhones and iPads--magical as they are--become downright <em>life-changing</em> for individuals with disabilities and their families because of Apple&#39;s commitment to accessibility. Look no further than the <a href="http://www.youtube.com/watch?v=MbP_pxR5cMk">WWDC 2012 Introduction Video</a>, which opens with Per Busch, a blind man who walks the woods of Kassel, Germany with the aid of <a href="http://www.ariadnegps.eu">Ariadne GPS</a>. It&#39;s a lovely reminder of the kind of impact our work can have on others.</p>

<p>Accessibility, like <a href="http://nshipster.com/nslocale/">internationalization</a>, is one of those topics that&#39;s difficult to get developers excited about. But as you know, NSHipster is <em>all about</em> getting developers excited about this kind of stuff. Let&#39;s get started:</p>

<hr>

<p><code>UIAccessibility</code> is an informal protocol in <code>UIKit</code> that provides accessibility information about user interface elements. This information is used by VoiceOver and other assistive technologies to help users with disabilities interact with your application.</p>

<p>All of the standard views and controls in UIKit implement <code>UIAccessibility</code>, so applications are accessible by default. As a result, the task of improving the accessibility of your application is one of minor adjustments rather than wholesale re-implementation.</p>

<p>Here&#39;s a list of all of the properties in <code>UIAccessibility</code>:</p>

<ul>
<li><code>accessibilityLabel</code></li>
<li><code>accessibilityHint</code></li>
<li><code>accessibilityValue</code></li>
<li><code>accessibilityLanguage</code></li>
<li><code>accessibilityTraits</code></li>
<li><code>accessibilityFrame</code></li>
<li><code>accessibilityActivationPoint</code></li>
<li><code>accessibilityElementsHidden</code></li>
<li><code>accessibilityViewIsModal</code></li>
</ul>

<h2>Enabling Accessibility</h2>

<p>Before we go any further, take a couple minutes to play with VoiceOver, and understand how accessibility information is conveyed to the user. Open the Settings app, tap General, scroll to the bottom and tap Accessibility. In Accessibility, you&#39;ll see settings for assistive technologies grouped by category: Vision, Hearing, Learning, and Physical &amp; Motor.</p>

<p>Tap VoiceOver, and then tap the VoiceOver switch to turn it on. An alert will pop up telling you that enabling VoiceOver changes the way you control your device. Dismiss the alert, and now VoiceOver is now enabled on your device.</p>

<p>Don&#39;t Panic--unlike setting your device to another language, there&#39;s no real risk of not being able to figure out how to turn VoiceOver off.</p>

<p><img src="http://nshipster.s3.amazonaws.com/uiaccessibility-voiceover.png" alt="VoiceOver Settings"></p>

<p>Using the device in VoiceOver mode is a bit different than you&#39;re used to:</p>

<ul>
<li>Tap once to select an item</li>
<li>Double-Tap to activate the selected item</li>
<li>Swipe with three fingers to scroll</li>
</ul>

<p>Press the Home button and start exploring!</p>

<p>You&#39;ll notice that all of the stock Apple apps--Messages, Calendar, Weather--each is fully-usable in VoiceOver mode. Heck, <em>even Camera is usable</em>, with <a href="http://svan.ca/blog/2012/blind/">VoiceOver telling you where faces are in your camera&#39;s viewport</a>!</p>

<p>By contrast (perhaps), try some of the apps you&#39;ve downloaded from the App Store. You may be surprised that some (but certainly not all) of the most visually-stunning apps, with all of their custom controls and interactions are completely unusable in this mode.</p>

<p>So now that you have an idea of what you&#39;re working with, let&#39;s talk about implementation:</p>

<h2>Label &amp; Hint</h2>

<p>If there was just one thing you could do to improve the accessibility of your app, paying attention to accessibility labels and hints of UI elements would be it.</p>

<p>Accessibility labels and hints tell VoiceOver what to say when selecting user interface elements. This information should be helpful, but concise.</p>

<ul>
<li><strong><code>accessibilityLabel</code></strong> identifies a user interface element. Every accessible view and control <em>must</em> supply a label.</li>
<li><strong><code>accessibilityHint</code></strong> describes the results of interacting with a user interface element. A hint should be supplied <em>only</em> if the result of an interaction is not obvious from the element&#39;s label.</li>
</ul>

<p>The <a href="http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/iPhoneAccessibility/Making_Application_Accessible/Making_Application_Accessible.html">Accessibility Programming Guide</a> provides the following guidelines for labels and hints:</p>

<blockquote>
<h3>Guidelines for Creating Labels</h3>

<p>If you provide a custom control or view, or if you display a custom icon in a standard control or view, you need to provide a label that:</p>

<ul>
<li><strong>Very briefly describes the element.</strong> Ideally, the label consists of a single word, such as Add, Play, Delete, Search, Favorites, or Volume.</li>
<li><strong>Does not include the type of the control or view.</strong> The type information is contained in the traits attribute of the element and should never be repeated in the label.</li>
<li><strong>Begins with a capitalized word.</strong> This helps VoiceOver read the label with the appropriate inflection.</li>
<li><strong>Does not end with a period.</strong> The label is not a sentence and therefore should not end with a period.</li>
<li><strong>Is localized.</strong> Be sure to make your application available to as wide an audience as possible by localizing all strings, including accessibility attribute strings. In general, VoiceOver speaks in the language that the user specifies in International settings.</li>
</ul>

<h3>Guidelines for Creating Hints</h3>

<p>The hint attribute describes the results of performing an action on a control or view. You should provide a hint only when the results of an action are not obvious from the element’s label.</p>

<ul>
<li><strong>Very briefly describes the results.</strong> Even though few controls and views need hints, strive to make the hints you do need to provide as brief as possible. Doing so decreases the amount of time users must spend listening before they can use the element.</li>
<li><strong>Begins with a verb and omits the subject.</strong> Be sure to use the third-person singular declarative form of a verb, such as “Plays,” and not the imperative, such as “Play.” You want to avoid using the imperative, because using it can make the hint sound like a command.</li>
<li><strong>Begins with a capitalized word and ends with a period.</strong> Even though a hint is a phrase, not a sentence, ending the hint with a period helps VoiceOver speak it with the appropriate inflection.</li>
<li><strong>Does not include the name of the action or gesture.</strong> A hint does not tell users how to perform the action, it tells users what will happen when that action occurs.</li>
<li><strong>Does not include the name of the control or view.</strong> The user gets this information from the label attribute, so you should not repeat it in the hint.</li>
<li><strong>Is localized</strong>. As with accessibility labels, hints should be available in the user’s preferred language.</li>
</ul>
</blockquote>

<h2>Traits</h2>

<p>If you are using custom controls, or have taken liberties with non-standard use of a standard control, you should make sure to specify the correct accessibility traits.</p>

<p>Accessibility traits describe a set of traits that characterize how a control behaves or should be treated. Examples include distinctions like:</p>

<ul>
<li>Button</li>
<li>Link</li>
<li>Search Field</li>
<li>Keyboard Key</li>
<li>Static Text</li>
<li>Image</li>
<li>Plays Sound</li>
<li>Selected</li>
<li>Summary Element</li>
<li>Updates Frequently</li>
<li>Causes Page Turn</li>
<li>Not Enabled</li>
<li>None</li>
</ul>

<p>The <code>accessibilityTraits</code> property takes a bitmask of <code>UIAccessibilityTraits</code> values, which can be combined in ways specified in the documentation.</p>

<p>For example, if a custom button control displays an image and plays a sound when tapped, you should define the traits for &quot;Button&quot;, &quot;Image&quot;, and &quot;Plays Sound&quot;. Or, if you were to use a <code>UISlider</code> for purely decorative purposes, you should set the &quot;Not Enabled&quot; trait.</p>

<h2>Frame &amp; Activation Point</h2>

<p>As a general rule, the cleverness of a custom UI element is directly proportional to how gnarly its implementation is. Overlapping &amp; invisible views, table view hacks, first responder shenanigans: sometimes it&#39;s better not to ask how something works.</p>

<p>However, when it comes to accessibility, it&#39;s important to set the record straight.</p>

<p><code>accessibilityFrame</code> and <code>accessibilityActivationPoint</code> are used to define the accessible portions and locations of UI elements, without changing their outward appearance.</p>

<p>As you try out your app in VoiceOver mode, try interacting with all of the elements on each screen. If the selection target is not what you expected, you can use <code>accessibilityFrame</code> and <code>accessibilityActivationPoint</code> to adjust accordingly.</p>

<h2>Value</h2>

<p>Accessibility value corresponds to the content of a user interface element. For a label, the value is its text. For a <code>UISlider</code>, it&#39;s the current numeric value represented by the control.</p>

<p>Want to know a quick way to improve the accessibility of your table views? Try setting the <code>accessibilityValue</code> property for cells to be a localized summary of the cell&#39;s content. For example, if you had a table view that showed status updates, you might set the <code>accessibilityLabel</code> to &quot;Update from #{User Name}&quot;, and the <code>accessibilityValue</code> to the content of that status update.</p>

<hr>

<p>Apple has done a great service to humanity in making accessibility a first-class citizen in its hardware and software. You&#39;re missing out on some of the best engineering, design, and technical writing that Apple has ever done if you ignore <code>UIAccessibility</code>.</p>

<p>Do yourself a favor and read the <em>excellent</em> <a href="http://developer.apple.com/library/ios/#documentation/UserExperience/Conceptual/iPhoneAccessibility/Introduction/Introduction.html">Accessibility Programming Guide for iOS</a>. It only takes an hour or two to get the hang of everything.</p>

<p>Who knows? You may end up changing someone&#39;s life because of it.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 10 Sep 2012 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:37:"http://nshipster.com/uiaccessibility/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:37:"http://nshipster.com/uiaccessibility/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:80;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:8:"NSLocale";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:10479:"<p>Internationalization is like flossing: everyone knows they should do it, but probably don&#39;t.</p>

<p>And like any habit, it becomes second-nature with practice, to the point that you couldn&#39;t imagine <em>not</em> doing it. All it takes is for someone to show you the way.</p>

<p>Let NSHipster be your dental hygienist Virgil through these foreign lands.. without all of the lecturing about tooth decay (promsies!)</p>

<h2>i18n versus l10n</h2>

<p>As is necessary in any discussion about Internationalization (i18n) or Localization (l10n), we must take some time to differentiate the two:</p>

<ul>
<li><strong>Localization</strong> is the process of adapting your application for a specific market, or <em>locale</em>.</li>
<li><strong>Internationalization</strong> is the process of preparing your app to be localized.</li>
</ul>

<blockquote>
<p>Internationalization is a necessary, but not sufficient condition for localization, and will be the focus of this article. Localization, which involves the translation of text and assets into a particular language, will be covered in a future edition of NSHipster.</p>
</blockquote>

<p>What makes internationalization difficult is having to think outside of your cultural context. All of the assumptions you have about the way things are supposed to work must be acknowledged and reconsidered. You have to fight the urge to write off things that may seem trivial, like sorting and collation, and empathize with the pain and confusion even minor differences may cause.</p>

<p>Fortunately for us, we don&#39;t have to do this alone. Meet <code>NSLocale</code>:</p>

<h2><code>NSLocale</code></h2>

<p><code>NSLocale</code> is a Foundation class that encapsulates all of the conventions about language and culture for a particular locale. A locale encompasses all of the linguistic and cultural norms of a particular group of people, including:</p>

<ul>
<li>Language</li>
<li>Keyboards</li>
<li>Number, Date, and Time Formats</li>
<li>Currency</li>
<li>Collation and Sorting</li>
<li>Use of Symbols, Colors, and Iconography</li>
</ul>

<p>Each locale corresponds to a <em>locale identifier</em>, such as <code>en_US</code>, <code>fr_FR</code>, <code>ja_JP</code>, and <code>en_GB</code>, which include a language code (e.g. <code>en</code> for English) and a region code (e.g. <code>US</code> for United States).</p>

<p>Locale identifiers can encode more explicit preferences about currency, calendar system, or number formats, such as in the case of <code>de_DE@collation=phonebook,currency=DDM</code>, which specifies German spoken in Germany, using <a href="http://developer.mimer.com/charts/german_phonebook.htm">phonebook collation</a>, and using the pre-Euro <a href="http://en.wikipedia.org/wiki/Deutsche_Mark">Deutsche Mark</a>.</p>

<p>Users can change their locale settings in the &quot;Language &amp; Text&quot; (or &quot;International&quot; on older versions of OS X) System Preferences on the Mac, or &quot;General &gt; International&quot; in iOS Settings.</p>

<p><img src="http://nshipster.s3.amazonaws.com/nslocale-international-system-preferences.png" alt="Language &amp; Text System Preferences"></p>

<h2>Formatting Dates &amp; Numbers</h2>

<p>Although <code>NSLocale</code> encapsulates a rich set of domain-specific information, its typical usage is rather understated.</p>

<p>If there&#39;s just one thing you should learn about <code>NSLocale</code>, it&#39;s that you should always pass <code>[NSLocale currentLocale]</code> into your <code>NSDateFormatter</code> and <code>NSNumberFormatter</code> instances. Doing this will ensure that dates, numbers, and currencies will be formatted according to the localization preferences of the user.</p>

<p>Actually, make that a meta lesson about locales: always use <code>NSDateFormatter</code> and <code>NSNumberFormatter</code> when displaying anything to do with dates or numbers, respectively.</p>

<p>But let&#39;s get back to some of the cool features of <code>NSLocale</code> itself, shall we?</p>

<h2><code>-objectForKey:</code></h2>

<p><code>NSLocale</code> typifies Foundation&#39;s obsession with domain-specific pedantry, and nowhere is this more visible than in <code>-objectForKey:</code>. Cue the list of available constants:</p>

<ul>
<li><code>NSLocaleIdentifier</code></li>
<li><code>NSLocaleLanguageCode</code></li>
<li><code>NSLocaleCountryCode</code></li>
<li><code>NSLocaleScriptCode</code></li>
<li><code>NSLocaleVariantCode</code></li>
<li><code>NSLocaleExemplarCharacterSet</code></li>
<li><code>NSLocaleCalendar</code></li>
<li><code>NSLocaleCollationIdentifier</code></li>
<li><code>NSLocaleUsesMetricSystem</code></li>
<li><code>NSLocaleMeasurementSystem</code></li>
<li><code>NSLocaleDecimalSeparator</code></li>
<li><code>NSLocaleGroupingSeparator</code></li>
<li><code>NSLocaleCurrencySymbol</code></li>
<li><code>NSLocaleCurrencyCode</code></li>
<li><code>NSLocaleCollatorIdentifier</code></li>
<li><code>NSLocaleQuotationBeginDelimiterKey</code></li>
<li><code>NSLocaleQuotationEndDelimiterKey</code></li>
<li><code>NSLocaleAlternateQuotationBeginDelimiterKey</code></li>
<li><code>NSLocaleAlternateQuotationEndDelimiterKey</code></li>
</ul>

<p>While this all may seem like fairly esoteric stuff, you may be surprised by the number of opportunities your application has to use this information to make for a better user experience.</p>

<p>It&#39;s the small things, like knowing that quotation marks vary between locales:</p>

<blockquote>
<p>English: “I can eat glass, it doesn&#39;t harm me.”
German: „Ich kann Glas essen, das tut mir nicht weh.“
Japanese:「私はガラスを食べられます。それは私を傷つけません。」</p>
</blockquote>

<p>So if you were building a component that added quotations around arbitrary text, you should use <code>NSLocaleQuotationBeginDelimiterKey</code> and <code>NSLocaleAlternateQuotationEndDelimiterKey</code> rather than assuming <code>@&quot;\&quot;&quot;</code> for English quotation marks.</p>

<h2><code>-displayNameForKey:value:</code></h2>

<p>Another impressive, albeit mostly-useless method is <code>-displayNameForKey:value:</code>, which can return the display name of a locale identifier (<code>NSLocaleIdentifier</code>):</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSLocale</span> <span class="o">*</span><span class="n">frLocale</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSLocale</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">initWithLocaleIdentifier</span><span class="o">:</span><span class="s">@&quot;fr_FR&quot;</span><span class="p">];</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;fr_FR: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">frLocale</span> <span class="n">displayNameForKey</span><span class="o">:</span><span class="n">NSLocaleIdentifier</span> <span class="n">value</span><span class="o">:</span><span class="s">@&quot;fr_FR&quot;</span><span class="p">]);</span>
<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;en_US: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">frLocale</span> <span class="n">displayNameForKey</span><span class="o">:</span><span class="n">NSLocaleIdentifier</span> <span class="n">value</span><span class="o">:</span><span class="s">@&quot;en_US&quot;</span><span class="p">]);</span>
</code></pre></div>
<blockquote>
<p>fr<em>FR: français (France)
en</em>US: anglais (États-Unis)</p>
</blockquote>

<p>You should use this method any time you need to display information about the user&#39;s current locale, or any alternative locales available to them, like in this screen from the Settings app:</p>

<p><img src="http://nshipster.s3.amazonaws.com/nslocale-languages-settings.png" alt="Languages Settings"></p>

<h2><code>+preferredLanguages</code></h2>

<p>One final method worth mentioning is <code>NSLocale +preferredLanguages</code>, which returns an array of <a href="http://tools.ietf.org/html/bcp47">IETF BCP 47 language identifier</a> strings, in order of user preference.</p>

<p>An app that communicates with a web server can use these values to define the <code>Accept-Language</code> HTTP header, such that the server has the option to return localized resources:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSMutableURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">...;</span>
<span class="p">[</span><span class="n">request</span> <span class="n">setValue</span><span class="o">:</span><span class="p">[</span><span class="n">NSString</span> <span class="n">stringWithFormat</span><span class="o">:</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[[</span><span class="n">NSLocale</span> <span class="n">preferredLanguages</span><span class="p">]</span> <span class="n">componentsJoinedByString</span><span class="o">:</span><span class="s">@&quot;, &quot;</span><span class="p">]],</span> <span class="n">forHTTPHeaderField</span><span class="o">:</span><span class="s">@&quot;Accept-Language&quot;</span><span class="p">];</span>
</code></pre></div>
<p>Even if your server doesn&#39;t yet localize its resources, putting this in place now will allow you to flip the switch when the time comes, without having to push an update to the client. Neat!</p>

<hr>

<p>Internationalization is often considered to be an un-sexy topic in programming--just another chore that most projects don&#39;t have to worry about. In actuality, designing software for other locales is a valuable exercise (and not just for the economic benefits of expanding your software into other markets).</p>

<p>One of the greatest joys and challenges in programming is in designing systems that can withstand change. The only way designs can survive this level of change is to identify and refactor assumptions about the system that may not always hold. In this way, internationalization represents the greatest challenge, making us question everything about our cultural identity. And in doing so, we become not just better programmers, but better people, too.</p>

<p>So go and be a better person: make <code>NSLocale</code> part of your daily ritual.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 03 Sep 2012 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:30:"http://nshipster.com/nslocale/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:30:"http://nshipster.com/nslocale/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:81;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:5:"CFBag";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:7261:"<p>Objective-C is a language caught between two worlds.</p>

<p>On one side, it follows the thoughtful, object-oriented philosophy of <a href="http://en.wikipedia.org/wiki/Smalltalk">Smalltalk</a>, which brings ideas like message sending and named parameters. On the other, are the inescapable vestiges of <a href="http://en.wikipedia.org/wiki/C_(programming_language)">C</a>, which brings it power and a dash of chaos.</p>

<p>It&#39;s an identity crisis borne out through an ever-increasing prevalence of the <code>@</code> symbol.</p>

<p>This is also seen in the relationship between the Foundation and Core Foundation, particularly with the toll-free bridged collection class clusters: <code>NSArray</code> / <code>CFArray</code>, <code>NSDictionary</code> / <code>CFDictionary</code>, <code>NSSet</code> / <code>CFSet</code>. These collections can be passed back and forth between C functions and Objective-C methods without conversion. A leak in the abstraction, but a useful way to optimize the most critical parts of an application nonetheless.</p>

<p>However, toll-free bridging is the exception when it comes to collection classes in Foundation and Core Foundation:</p>

<table>
  <thead>
    <tr>
      <th>Foundation</th>
      <th>Core Foundation</th>
      <th>Toll-Free Bridged</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><tt>NSArray</tt><sup>*</sup></td>
      <td><tt>CFArray</tt><sup>*</sup></td>
      <td>✓</td>
    </tr>
    <tr>
      <td><tt>NSCountedSet</tt></td>
      <td><tt>CFBag</tt><sup>*</sup></td>
      <td></td>
    </tr>
    <tr>
      <td><em>N/A</em></td>
      <td><tt>CFBinaryHeap</tt></td>
      <td></td>
    </tr>
    <tr>
      <td><em>N/A</em></td>
      <td><tt>CFBitVector</tt><sup>*</sup></td>
      <td></td>
    </tr>
    <tr>
      <td><tt>NSDictionary</tt><sup>*</sup></td>
      <td><tt>CFDictionary</tt><sup>*</sup></td>
      <td>✓</td>
    </tr>
    <tr>
      <td><tt>NSIndexSet</tt><sup>*</sup></td>
      <td><em>N/A</em></td>
      <td></td>
    </tr>
    <tr>
      <td><tt>NSMapTable</tt></td>
      <td><em>N/A</em></td>
      <td></td>
    </tr>
    <tr>
      <td><tt>NSOrderedSet</tt></td>
      <td><em>N/A</em></td>
      <td></td>
    </tr>
    <tr>
      <td><tt>NSPointerArray</tt></td>
      <td><em>N/A</em></td>
      <td></td>
    </tr>
    <tr>
      <td><tt>NSPointerFunctions</tt></td>
      <td><em>N/A</em></td>
      <td></td>
    </tr>
    <tr>
      <td><tt>NSSet</tt><sup>*</sup></td>
      <td><tt>CFSet</tt><sup>*</sup></td>
      <td>✓</td>
    </tr>
  </tbody>
  <tfoot>
    <tr>
      <td colspan="3"><sup>*</sup> Indicates Mutable Counterpart</td>
    </tr>
  </tfoot>
</table>

<p>Take a look at the second row, with <code>NSCountedSet</code> and <code>CFBag</code>. Notice that unlike the other Foundation / Core Foundation correspondence, these two are not toll-free bridged. No real explanation for this is provided in the documentation, aside from it being acknowledged in the <code>NSCountedSet</code> documentation. My guess is that it has something to do with <code>NSCountedSet</code> not having a mutable counterpart, and thus breaking the class cluster pattern seen in <code>NSArray</code>, et al.</p>

<h2>Bags, in the Abstract</h2>

<p>In the <a href="http://en.wikipedia.org/wiki/Collection_(abstract_data_type)">pantheon of collection data types</a> in computer science, bag doesn&#39;t really have the same clout as lists, sets, associative arrays, trees, graphs, or priority queues.</p>

<p>In fact, it&#39;s pretty obscure. You&#39;ve probably never heard of it.</p>

<p>A bag, or <a href="http://en.wikipedia.org/wiki/Multiset">multiset</a> is a variant of a set, where members can appear more than once. A count is associated with each unique member of the collection, representing the number of times it has been added. Like with sets, order does not matter.</p>

<p>Its practical applications are... limited, but you&#39;ll know one when it comes up. Tallying votes in a general election? Simulating homework problems an intro probability class? Implementing a game of Yahtzee? Bag is your new bicycle!</p>

<h2>Working with <code>CFMutableBag</code></h2>

<p>As an implementation of the bag data type, <code>CFBag</code> and its mutable counterpart, <code>CFMutableBag</code>, are pretty slick.</p>

<p>Although it lacks the object-oriented convenience of <code>NSCountedSet</code>, it makes up for it with a number of ways to customize its behavior. When <code>CFBag</code> is created, it can be initialized with a number of callbacks, defined by the <code>CFBagCallBacks</code> struct, which specify the way values are inserted, removed, and compared:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">struct</span> <span class="n">CFBagCallBacks</span> <span class="p">{</span>
   <span class="n">CFIndex</span> <span class="n">version</span><span class="p">;</span>
   <span class="n">CFBagRetainCallBack</span> <span class="n">retain</span><span class="p">;</span>
   <span class="n">CFBagReleaseCallBack</span> <span class="n">release</span><span class="p">;</span>
   <span class="n">CFBagCopyDescriptionCallBack</span> <span class="n">copyDescription</span><span class="p">;</span>
   <span class="n">CFBagEqualCallBack</span> <span class="n">equal</span><span class="p">;</span>
   <span class="n">CFBagHashCallBack</span> <span class="n">hash</span><span class="p">;</span>
<span class="p">};</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">CFBagCallBacks</span> <span class="n">CFBagCallBacks</span><span class="p">;</span>
</code></pre></div>
<ul>
<li><code>retain</code>: callback used to retain values as they&#39;re added to the collection</li>
<li><code>release</code>: callback used to release values as they&#39;re removed from the collection</li>
<li><code>copyDescription</code>: callback used to create a string description of each value in the collection</li>
<li><code>equal</code>: callback used to compare values in the collection for equality</li>
<li><code>hash</code>: callback used to compute hash codes for values in the collection</li>
</ul>

<p>For example, if you were implementing a vote tallying application, you could specify a normalizing function for <code>retain</code> to ensure that votes for mixed-case or misspelled names went to the right candidate, or ensure that the &quot;correct&quot; candidate is shown to be the winner when all the votes are in, with <code>equal</code> callback.</p>

<p><code>CFMutableBag</code> also has <code>CFBagApplyFunction</code>, which has the ability to transform values over the collection, like if you wanted to smooth out vote counts, or something like that.</p>

<p>So in closing, if you need to rig an election, <code>CFBag</code> is your best bet.</p>

<hr>

<p>But seriously, <code>CFBag</code>, useful in its own right, serves as a reminder of the hidden gems to be found within the standard frameworks and libraries--indeed what is at the very heart of being an NSHipster.</p>

<p>Also, <code>CFBinaryHeap</code>? <code>NSPointerFunctions</code>? <code>NSMapTable</code>? Surely, you&#39;ll be seeing more of these in future editions.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 27 Aug 2012 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:27:"http://nshipster.com/cfbag/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:27:"http://nshipster.com/cfbag/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:82;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:11:"NSOperation";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:8738:"<p>Everyone knows that the secret to making an app snappy and responsive is to offload computation to be done asynchronously in the background. </p>

<p>The modern Objective-C developer has two options in this respect: <a href="http://en.wikipedia.org/wiki/Grand_Central_Dispatch">Grand Central Dispatch</a> or <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/NSOperation_class/Reference/Reference.html"><code>NSOperation</code></a>. Since GCD has gone pretty mainstream, let&#39;s focus on the latter, object-oriented approach.</p>

<p><code>NSOperation</code> represents a single unit of computation. It&#39;s an abstract class that gives subclasses a useful, thread-safe way to model aspects like state, priority, dependencies, and cancellation. Or, if subclassing isn&#39;t your cup of tea, there&#39;s always <code>NSBlockOperation</code>, a concrete subclass that wraps block in operations.</p>

<p>Examples of tasks that lend themselves well to <code>NSOperation</code> include <a href="https://github.com/AFNetworking/AFNetworking/blob/master/AFNetworking/AFURLConnectionOperation.h">network requests</a>, image resizing, linguistic processing, or any other repeatable, structured, long-running task that returns processed data.</p>

<p>But simply wrapping computation into an object doesn&#39;t do much without a little oversight. That&#39;s where <code>NSOperationQueue</code> comes in.</p>

<p><code>NSOperationQueue</code> regulates the concurrent execution of operations. It acts as a priority queue, such that operations are executed in a roughly First-In-First-Out manner, with higher-priority (<code>NSOperation -queuePriority</code>) ones getting to jump ahead of lower-priority ones. <code>NSOperationQueue</code> also executes operations concurrently, with the option to limit the maximum number to be executed simultaneously (<code>maxConcurrentOperationCount</code>).</p>

<p>To kick off an <code>NSOperation</code>, you can either call <code>-start</code>, or add it to an <code>NSOperationQueue</code>, which will automatically start the operation when it reaches the front of the queue.</p>

<p>Let&#39;s go through the different parts of <code>NSOperation</code>, describing how they&#39;re used and how to implement them in subclasses:</p>

<h2>State</h2>

<p><code>NSOperation</code> encodes a rather elegant state machine to describe the execution of an operation:</p>

<blockquote>
<p><code>isReady</code> → <code>isExecuting</code> → <code>isFinished</code></p>
</blockquote>

<p>In lieu of an explicit <code>state</code> property, state is determined implicitly by KVO notifications on those keypaths. That is, when an operation is ready to be executed, it sends a KVO notification for the <code>isReady</code> keypath, whose corresponding property would then return <code>YES</code>.</p>

<p>Each property must be mutually exclusive from one-another in order to encode a consistent state:</p>

<ul>
<li><code>isReady</code>: Returns <code>YES</code> to indicate that the operation is ready to execute, or <code>NO</code> if there are still unfinished initialization steps on which it is dependent.</li>
<li><code>isExecuting</code>: Returns <code>YES</code> if the operation is currently working on its task, or <code>NO</code> otherwise.</li>
<li><code>isFinished</code> Returns <code>YES</code> if the operation&#39;s task finished execution successfully, or if the operation was cancelled. An <code>NSOperationQueue</code> does not dequeue an operation until <code>isFinished</code> changes to <code>YES</code>, so it is critical to implement this correctly so as to avoid deadlock.</li>
</ul>

<h2>Cancellation</h2>

<p>It may be useful to cancel operations early to prevent needless work from being performed. Reasons for cancellation may include explicit user action, or a failure in a dependent operation.</p>

<p>Similar to execution state, <code>NSOperation</code> communicates changes in cancellation state through KVO on the <code>isCancelled</code> keypath. When an operation responds to the <code>-cancel</code> command, it should clean up any internal details and arrive in an appropriate final state as quickly as possible. Specifically, the values for both <code>isCancelled</code> and <code>isFinished</code> need to become <code>YES</code>, and the value of <code>isExecuting</code> to <code>NO</code>. </p>

<p>One thing to definitely watch out for are the spelling peculiarities around the word &quot;cancel&quot;. Although spelling varies across dialects, when it comes to <code>NSOperation</code>:</p>

<ul>
<li><code>cancel</code>: use one L for the method (verb)</li>
<li><code>isCancelled</code>: use two L&#39;s for the property (adjective)</li>
</ul>

<h2>Priority</h2>

<p>All operations may not be equally important. Setting the <code>queuePriority</code> property will promote or defer an operation in an <code>NSOperationQueue</code> according to the following ranking:</p>

<ul>
<li><code>NSOperationQueuePriorityVeryHigh</code></li>
<li><code>NSOperationQueuePriorityHigh</code></li>
<li><code>NSOperationQueuePriorityNormal</code></li>
<li><code>NSOperationQueuePriorityLow</code></li>
<li><code>NSOperationQueuePriorityVeryLow</code></li>
</ul>

<p>Additionally, operations may specify a <code>threadPriority</code> value, which is a value between <code>0.0</code> and <code>1.0</code>, with <code>1.0</code> representing the highest priority. Whereas <code>queuePriority</code> determine the order in which operations are started, <code>threadPriority</code> specifies the allocation of computation once an operation has been started. But as with most threading details, if you don&#39;t know what it does, you probably didn&#39;t need to know about it anyway.</p>

<h2>Dependencies</h2>

<p>Depending on the complexity of your application, it may make sense to divide up large tasks into a series of composable sub-tasks. You can do that using <code>NSOperation</code> dependencies.</p>

<p>For example, to describe the process of downloading and resizing an image from a server, you would probably want to divide up the networking into one operation, and resizing into another (perhaps to reuse the networking operation to download other resources, or reuse the resizing operation for images already on-disk). However, an image can&#39;t be resized until its  downloaded. Therefore, we say that the networking operation is a <em>dependency</em> of the resizing operation, and must be finished before the resizing operation can be started. Expressed in code:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[</span><span class="n">resizingOperation</span> <span class="n">addDependency</span><span class="o">:</span><span class="n">networkingOperation</span><span class="p">];</span>
<span class="p">[</span><span class="n">operationQueue</span> <span class="n">addOperation</span><span class="o">:</span><span class="n">networkingOperation</span><span class="p">];</span>
<span class="p">[</span><span class="n">operationQueue</span> <span class="n">addOperation</span><span class="o">:</span><span class="n">resizingOperation</span><span class="p">];</span>
</code></pre></div>
<p>An operation will not be started until all of its dependencies return <code>YES</code> to <code>isFinished</code>. It&#39;s important to remember to add all of the operations involved in a dependency graph to the operation queue, lest there be a gap somewhere along the way.</p>

<p>Also, make sure not to accidentally create a dependency cycle, such that A depends on B, and B depends on A, for example. This will create deadlock and sadness.</p>

<h2><code>completionBlock</code></h2>

<p>One useful feature that was added in the blocks renaissance of iOS 4 and Snow Leopard was the <code>completionBlock</code> property.</p>

<p>When an <code>NSOperation</code> finishes, it will execute its <code>completionBlock</code> exactly once. This provides a really nice way to customize the behavior of an operation when used in a model, or view controller. For example, you could set a completion block on a network operation block to do something with the response data from the server once its finished loading.</p>

<hr>

<p><code>NSOperation</code> remains an essential tool in the modern Objective-C programmers bag of tricks. Whereas GCD is ideal for in-line asynchronous processing, <code>NSOperation</code> provides a more comprehensive, object-oriented model of computation, which is ideal for encapsulating all of the data around structured, repeatable tasks in an application. Add it to your next project and bring delight not only to your user, but yourself as well!</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 20 Aug 2012 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:33:"http://nshipster.com/nsoperation/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:33:"http://nshipster.com/nsoperation/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:83;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:18:"NSIncrementalStore";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:14143:"<p>Even for a blog dedicated to obscure APIs, <code>NSIncrementalStore</code> brings a new meaning to the word &quot;obscure&quot;.</p>

<p>It was introduced in iOS 5, with no more fanfare than the requisite entry in the SDK changelog.</p>

<p>Its <a href="https://developer.apple.com/library/mac/#documentation/DataManagement/Conceptual/IncrementalStorePG/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010706">programming guide</a> weighs in at a paltry 82 words, making it the shortest by an order of magnitude.</p>

<p>If it weren&#39;t for an offhand remark during <a href="https://deimos.apple.com/WebObjects/Core.woa/BrowsePrivately/adc.apple.com.8266478284.08266478290.8365294535?i=2068798830">WWDC 2011 Session 303</a>, it may have gone completely unnoticed.</p>

<p>And yet, <code>NSIncrementalStore</code> is arguably the most important thing to come out of iOS 5.</p>

<h2>At Last, A Foothold Into Core Data</h2>

<p><code>NSIncrementalStore</code> is an abstract subclass of <code>NSPersistentStore</code> designed to &quot;create persistent stores which load and save data incrementally, allowing for the management of large and/or shared datasets&quot;. And while that may not sound like much, consider that nearly all of the database adapters we rely on load incrementally from large, shared data stores. What we have here is a goddamned miracle.</p>

<p>For those of you not as well-versed in Core Data, here&#39;s some background:</p>

<p><a href="http://developer.apple.com/library/mac/#documentation/cocoa/Conceptual/CoreData/cdProgrammingGuide.html">Core Data</a> is Apple&#39;s framework for object relational mapping. It&#39;s used in at least half of all of the first-party apps on Mac and iOS, as well as thousands of other third-party apps. Core Data is complex, but that&#39;s because it solves complex problems, covering a decades-worth of one-offs and edge cases.</p>

<p>This is all to say that Core Data is something you should probably use in your application.</p>

<p>Persistent stores in Core Data are comparable to database adapters in other ORMs, such as <a href="http://ar.rubyonrails.org">Active Record</a>. They respond to changes within <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/CoreDataFramework/Classes/NSManagedObjectContext_Class/NSManagedObjectContext.html">managed object contexts</a> and handle <a href="https://developer.apple.com/library/mac/#documentation/Cocoa/Reference/CoreDataFramework/Classes/NSFetchRequest_Class/NSFetchRequest.html">fetch requests</a> by reading and writing data to some persistence layer. For most applications, that persistent layer has been a local SQLite database.</p>

<p>With <code>NSIncrementalStore</code>, developers now have a sanctioned, reasonable means to create a store that connects to whatever underlying backend you like--and rather simply, too. All it takes is to implement a few required methods:</p>

<h2>Implementing an NSIncrementalStore Subclass</h2>

<h3><code>+type</code> and <code>+initialize</code></h3>

<p><code>NSPersistentStore</code> instances are not created directly. Instead, they follow a factory pattern similar to <code>NSURLProtocol</code> or <code>NSValueTransformer</code>, in that they register their classes with the <code>NSPersistentStoreCoordinator</code>, which then constructs persistent store instances as necessary when <code>-addPersistentStoreWithType:configuration:URL:options:error:</code> is called. The registered persistent store classes are identified by a unique &quot;store type&quot; string (<code>NSStringFromClass</code> is sufficient, but you could be pedantic by specifying a string that follows the convention of ending in <code>-Type</code>, like <code>NSSQLiteStoreType</code>).</p>

<p><code>+initialize</code> is automatically called the first time a class is loaded, so this is a good place to register with <code>NSPersistentStoreCoordinator</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">+</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">initialize</span> <span class="p">{</span>
  <span class="p">[</span><span class="n">NSPersistentStoreCoordinator</span> <span class="n">registerStoreClass</span><span class="o">:</span><span class="n">self</span> <span class="n">forStoreType</span><span class="o">:</span><span class="p">[</span><span class="n">self</span> <span class="n">type</span><span class="p">]];</span>
<span class="p">}</span>

<span class="k">+</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">type</span> <span class="p">{</span>
  <span class="k">return</span> <span class="n">NSStringFromClass</span><span class="p">(</span><span class="n">self</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<h3><code>-loadMetadata:</code></h3>

<p><code>loadMetadata:</code> is where the incremental store has a chance to configure itself. There is, however, a bit of Kabuki theater boilerplate that&#39;s necessary to get everything set up. Specifically, you need to set a UUID for the store, as well as the store type. Here&#39;s what that looks like:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="n">mutableMetadata</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableDictionary</span> <span class="n">dictionary</span><span class="p">];</span>
<span class="p">[</span><span class="n">mutableMetadata</span> <span class="n">setValue</span><span class="o">:</span><span class="p">[[</span><span class="n">NSProcessInfo</span> <span class="n">processInfo</span><span class="p">]</span> <span class="n">globallyUniqueString</span><span class="p">]</span> <span class="n">forKey</span><span class="o">:</span><span class="n">NSStoreUUIDKey</span><span class="p">];</span>
<span class="p">[</span><span class="n">mutableMetadata</span> <span class="n">setValue</span><span class="o">:</span><span class="p">[[</span><span class="n">self</span> <span class="n">class</span><span class="p">]</span> <span class="n">type</span><span class="p">]</span> <span class="n">forKey</span><span class="o">:</span><span class="n">NSStoreTypeKey</span><span class="p">];</span>
<span class="p">[</span><span class="n">self</span> <span class="n">setMetadata</span><span class="o">:</span><span class="n">mutableMetadata</span><span class="p">];</span>
</code></pre></div>
<h3><code>-executeRequest:withContext:error:</code></h3>

<p>Here&#39;s where things get interesting, from an implementation standpoint. (And where it all goes to hell, from an API design standpoint)</p>

<p><code>executeRequest:withContext:error:</code> passes an <code>NSPersistentStoreRequest</code>, an <code>NSManagedObjectContext</code> and an <code>NSError</code> pointer.</p>

<p><code>NSPersistentStoreRequest</code>&#39;s role here is as a sort of abstract subclass. The request parameter will either be of type <code>NSFetchRequestType</code> or an <code>NSSaveRequestType</code>. If it has a <em>fetch</em> request type, the request parameter will actually be an instance of <code>NSFetchRequest</code>, which is a subclass of <code>NSPersistentStoreRequest</code>. Likewise, if it has a <em>save</em> request type, it will be an instance of <code>NSSaveChangesRequest</code> (this article was originally mistaken by stating that there was no such a class).</p>

<p>This method requires very specific and very different return values depending on the request parameter (and the <code>resultType</code>, if it&#39;s an <code>NSFetchRequest</code>). The only way to explain it is to run through all of the possibilities:</p>

<h4>Request Type: <code>NSFetchRequestType</code></h4>

<ul>
<li>Result Type: <code>NSManagedObjectResultType</code>, <code>NSManagedObjectIDResultType</code>, or <code>NSDictionaryResultType</code></li>
</ul>

<blockquote>
<p><strong>Return</strong>: <code>NSArray</code> of objects matching request</p>
</blockquote>

<ul>
<li>Result Type: <code>NSCountResultType</code></li>
</ul>

<blockquote>
<p><strong>Return</strong>: <del><tt>NSNumber</tt></del><ins><tt>NSArray</tt> containing one <tt>NSNumber</tt> of count of objects matching request</ins></p>
</blockquote>

<h4>Request Type: <code>NSSaveRequestType</code></h4>

<blockquote>
<p><strong>Return</strong>: Empty <code>NSArray</code></p>
</blockquote>

<p>So, one method to do all read <em>and</em> write operations with a persistence backend. At least all of the heavy lifting goes to the same place, right?</p>

<h3><code>-newValuesForObjectWithID:withContext:error:</code></h3>

<p>This method is called when an object faults, or has its values refreshed by the managed object context.</p>

<p>It returns an <code>NSIncrementalStoreNode</code>, which is a container for the ID and current values for a particular managed object. The node should include all of the attributes, as well as the managed object IDs of any to-one relationships. There is also a <code>version</code> property of the node that can be used to determine the current state of an object, but this may not be applicable to all storage implementations.</p>

<p>If an object with the specified <code>objectID</code> cannot be found, this method should return <code>nil</code>.</p>

<h3><code>-newValueForRelationship:forObjectWithID: withContext:error:</code></h3>

<p>This one is called when a relationship needs to be refreshed, either from a fault or by the managed object context.</p>

<p>Unlike the previous method, the return value will be just the current value for a single relationship. The expected return type depends on the nature of the relationship:</p>

<ul>
<li><strong>to-one</strong>: <code>NSManagedObjectID</code></li>
<li><strong>to-many</strong>: <code>NSSet</code> or <code>NSOrderedSet</code></li>
<li><strong>non-existent</strong>: <code>nil</code></li>
</ul>

<h3><code>-obtainPermanentIDsForObjects:error:</code></h3>

<p>Finally, this method is called before <code>executeRequest:withContext:error:</code> with a save request, where permanent IDs should be assigned to newly-inserted objects. As you might expect, the array of permanent IDs should match up with the array of objects passed into this method.</p>

<p>This usually corresponds with a write to the persistence layer, such as an <code>INSERT</code> statement in SQL. If, for example, the row corresponding to the object had an auto-incrementing <code>id</code> column, you could generate an objectID with:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="p">[</span><span class="n">self</span> <span class="n">newObjectIDForEntity</span><span class="o">:</span><span class="n">entity</span> <span class="n">referenceObject</span><span class="o">:</span><span class="p">[</span><span class="n">NSNumber</span> <span class="n">numberWithUnsignedInteger</span><span class="o">:</span><span class="n">rowID</span><span class="p">]];</span>
</code></pre></div>
<h2>Roll Your Own Core Data Backend</h2>

<p>Going through all of the necessary methods to override in an <code>NSIncrementalStore</code> subclass, you may have found your mind racing with ideas about how you might implement a SQL or NoSQL store, or maybe something new altogether.</p>

<p>What makes <code>NSIncrementalStore</code> so exciting is that you <em>can</em> build a store on your favorite technology, and drop that into any existing Core Data stack with little to no additional configuration.</p>

<p>So imagine if, instead SQL or NoSQL, we wrote a Core Data store that connected to a webservice. Allow me to introduce <a href="https://github.com/AFNetworking/AFIncrementalStore">AFIncrementalStore</a>.</p>

<h2>AFIncrementalStore: The Holy Grail of Client-Server Applications?</h2>

<p><a href="https://github.com/AFNetworking/AFIncrementalStore"><code>AFIncrementalStore</code></a> is an NSIncrementalStore subclass that uses <a href="https://github.com/afnetworking/afnetworking">AFNetworking</a> to automatically request resources as properties and relationships are needed.</p>

<p>What this means is that you can now write apps that communicate with a webservice <em>without exposing any of the details about the underlying API</em>. Any time a fetch request is made or an attribute or relationship faults, an asynchronous network request will fetch that information from the webservice.</p>

<p>Since the store abstracts all of the implementation details of the API away, you can write expressive fetch requests and object relationships from the start. No matter how bad or incomplete an API may be, you can change all of that mapping independently of the business logic of the client.</p>

<p>Perhaps the best part is that all of this is possible in <strong>just under 300 LOC</strong>. No need to subclass <code>NSManagedObject</code> or add obtrusive categories on <code>NSManagedObjectContext</code>--it just works.</p>

<p>Even though <code>NSIncrementalStore</code> has been around since iOS 5, we&#39;re still a long way from even beginning to realize its full potential. The future is insanely bright, so you best don your aviators, grab an iced latte and start coding something amazing.</p>

<blockquote>
<p>In the spirit of full disclosure, <code>NSIncrementalStore</code> was brought to my attention by <a href="http://sealedabstract.com/code/nsincrementalstore-the-future-of-web-services-in-ios-mac-os-x/">this blog post by Drew Crawford</a>. I caught wind of it around the time iOS 5 originally came out, but like everyone else, I paid it no mind.</p>

<p>Also, <code>AFIncrementalStore</code> is a project of mine, which is offered as one of only a few examples of an <code>NSIncrementalStore</code> subclass available. I don&#39;t mean to use NSHipster as a platform to promote my own code, but I thought this to be a particularly salient example.</p>
</blockquote>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 13 Aug 2012 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:40:"http://nshipster.com/nsincrementalstore/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:40:"http://nshipster.com/nsincrementalstore/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:84;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:17:"CFStringTransform";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:7719:"<p>There are two indicators that tell you everything you need to know about how nice a language is to use:</p>

<ol>
<li>API Consistency</li>
<li>Quality of String Implementation</li>
</ol>

<p><code>NSString</code> is the crown jewel of Foundation. In an age where other languages <em>still</em> struggle to handle Unicode correctly, <code>NSString</code> is especially impressive. Not content to <em>just work</em> with whatever is thrown at it, <code>NSString</code> can parse strings into linguistic tags, determine the dominant language of the content, and convert between every string encoding imaginable. It&#39;s unfairly good.</p>

<p>But as powerful as <code>NSString</code> / <code>NSMutableString</code> are, one would be remiss not to mention their <a href="http://developer.apple.com/library/ios/#documentation/CoreFoundation/Conceptual/CFDesignConcepts/Articles/tollFreeBridgedTypes.html">toll-free bridged</a> cousin, <code>CFMutableString</code>—or more specifically, <code>CFStringTransform</code>.</p>

<p>As denoted by the <code>CF</code> prefix, <code>CFStringTransform</code> is part of Core Foundation. The function takes the following arguments, and returns a <code>Boolean</code> for whether or not the transform was successful:</p>

<ul>
<li><code>string</code>: The string to be transformed. Since this argument is a <code>CFMutableStringRef</code>, an <code>NSMutableString</code> can be passed using toll-free bridging cast.</li>
<li><code>range</code>: The range of the string over which the transformation should be applied. This argument is a <code>CFRange</code>, rather than an <code>NSRange</code> value.</li>
<li><code>transform</code>: The transformation to apply. This argument takes an <a href="http://userguide.icu-project.org/transforms/general">ICU transform string</a>, including any one of the string constants described below.</li>
<li><code>reverse</code>: Whether to run the transformation in reverse, where applicable.</li>
</ul>

<p><code>CFStringTransform</code> covers a lot of ground with its <code>transform</code> argument. Here&#39;s a rundown of what it can do:</p>

<h2>Strip Accents and Diacritics</h2>

<p>Énġlišh långuãge lẳcks iñterêßţing diaçrïtičş. As such, it can be useful to normalize extended Latin characters into ASCII-friendly representations. Rid any string of its squiggly bits using the <code>kCFStringTransformStripCombiningMarks</code> transformation.</p>

<h2>Name Unicode Characters</h2>

<p><code>kCFStringTransformToUnicodeName</code> allows you to determine the Unicode standard name for special characters, including Emoji. For instance, &quot;🐑💨✨&quot; is transformed into &quot;{SHEEP} {DASH SYMBOL} {SPARKLES}&quot;, and &quot;🐷&quot; becomes &quot;{PIG FACE}&quot;.</p>

<h2>Transliterate Between Orthographies</h2>

<p>With the notable exception of English (and its delightful spelling inconsistencies), writing systems generally encode speech sounds into a consistent written representation. European languages generally use the Latin alphabet (with a few added diacritics), Russian uses Cyrillic, Japanese uses Hiragana &amp; Katakana, and Thai, Korean, &amp; Arabic each have their own scripts.</p>

<p>Although each language has a particular inventory of sounds, some of which other languages may lack, the overlap across all of the major writing systems is remarkably high—enough so that one can rather effectively <a href="http://en.wikipedia.org/wiki/Transliteration">transliterate</a> (not to be confused with <a href="http://en.wikipedia.org/wiki/Translation">translation</a>) from one script to another.</p>

<p><code>CFStringTransform</code> can transliterate back and forth between Latin and Arabic, Cyrillic, Greek, Korean (Hangul), Hebrew, Japanese (Hiragana &amp; Katakana), Mandarin Chinese, and Thai.</p>

<table>
  <thead>
    <tr>
      <th>Transformation</th>
      <th>Input</th>
      <th>Output</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><tt>kCFStringTransformLatinArabic</tt></td>
      <td>mrḥbạ</td>
      <td>مرحبا</td>
    </tr>
    <tr>
      <td><tt>kCFStringTransformLatinCyrillic</tt></td>
      <td>privet</td>
      <td>привет</td>
    </tr>
    <tr>
      <td><tt>kCFStringTransformLatinGreek</tt></td>
      <td>geiá sou</td>
      <td>γειά σου</td>
    </tr>
    <tr>
      <td><tt>kCFStringTransformLatinHangul</tt></td>
      <td>annyeonghaseyo</td>
      <td>안녕하세요</td>
    </tr>
    <tr>
      <td><tt>kCFStringTransformLatinHebrew</tt></td>
      <td>şlwm</td>
      <td>שלום</td>
    </tr>
    <tr>
      <td><tt>kCFStringTransformLatinHiragana</tt></td>
      <td>hiragana</td>
      <td>ひらがな</td>
    </tr>
    <tr>
      <td><tt>kCFStringTransformLatinKatakana</tt></td>
      <td>katakana</td>
      <td>カタカナ</td>
    </tr>
    <tr>
      <td><tt>kCFStringTransformLatinThai</tt></td>
      <td>s̄wạs̄dī</td>
      <td>สวัสดี</td>
    </tr>
    <tr>
      <td><tt>kCFStringTransformHiraganaKatakana</tt></td>
      <td>にほんご</td>
      <td>ニホンゴ</td>
    </tr>
    <tr>
      <td><tt>kCFStringTransformMandarinLatin</tt></td>
      <td>中文</td>
      <td>zhōng wén</td>
    </tr>
  </tbody>
</table>

<blockquote>
<p>And that&#39;s only using the constants defined in Core Foundation! By passing an <a href="http://userguide.icu-project.org/transforms/general#TOC-ICU-Transliterators">ICU transform</a> directly, <code>CFStringTransform</code> can transliterate between Latin and Arabic, Armenian, Bopomofo, Cyrillic, Georgian, Greek, Han, Hangul, Hebrew, Hiragana, Indic ( Devanagari, Gujarati, Gurmukhi, Kannada, Malayalam, Oriya, Tamil, &amp; Telegu), Jamo, Katakana, Syriac, Thaana, &amp; Thai.</p>
</blockquote>

<h2>Normalize User-Generated Content</h2>

<p>One of the more practical applications for string transformation is to normalize unpredictable user input. Even if your application doesn&#39;t specifically deal with other languages, you should be able to intelligently process anything the user types into your app.</p>

<p>For example, let&#39;s say you want to build a searchable index of movies on the device, which includes greetings from around the world:</p>

<ul>
<li>First, apply the <code>kCFStringTransformToLatin</code> transform to transliterate all non-English text into a Latin alphabetic representation.</li>
</ul>

<blockquote>
<p>Hello! こんにちは! สวัสดี! مرحبا! 您好! →<br>
Hello! kon&#39;nichiha! s̄wạs̄dī! mrḥbạ! nín hǎo!</p>
</blockquote>

<ul>
<li>Next, apply the <code>kCFStringTransformStripCombiningMarks</code> transform to remove any diacritics or accents.</li>
</ul>

<blockquote>
<p>Hello! kon&#39;nichiha! s̄wạs̄dī! mrḥbạ! nín hǎo! →<br>
Hello! kon&#39;nichiha! swasdi! mrhba! nin hao!</p>
</blockquote>

<ul>
<li>Finally, downcase the text with <code>CFStringLowercase</code>, and split the text into tokens with <a href="https://developer.apple.com/library/mac/#documentation/CoreFoundation/Reference/CFStringTokenizerRef/Reference/reference.html"><code>CFStringTokenizer</code></a> to use as an index for the text.</li>
</ul>

<blockquote>
<p>(hello, kon&#39;nichiha, swasdi, mrhba, nin, hao)</p>
</blockquote>

<p>By applying the same set of transformations on search text entered by the user, you have a universal way to search regardless of either the language of the search string or content!</p>

<hr>

<p><code>CFStringTransform</code> can be an insanely powerful way to bend language to your will. And it&#39;s but one of many powerful features that await you if you&#39;re brave enough to explore outside of Objective-C&#39;s warm OO embrace.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Mon, 06 Aug 2012 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:39:"http://nshipster.com/cfstringtransform/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:39:"http://nshipster.com/cfstringtransform/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:85;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:16:"NSDateComponents";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:8561:"<p><code>NSDateComponents</code> serves an important role in Foundation&#39;s date and time APIs. By itself, it&#39;s nothing impressive—just a container for information about a date (its month, year, day of month, week of year, or whether that month is a leap month). However, combined with <code>NSCalendar</code>, <code>NSDateComponents</code> becomes a remarkably convenient interchange format for calendar calculations.</p>

<p>Whereas dates represent a particular moment in time, date components depend on which calendar system is being used to represent them. Very often, this will differ wildly from what many of us may be used to with the <a href="http://en.wikipedia.org/wiki/Gregorian_calendar">Gregorian Calendar</a>. For example, the <a href="http://en.wikipedia.org/wiki/Islamic_calendar">Islamic Calendar</a> has 354 or 355 days in a year, whereas the <a href="http://en.wikipedia.org/wiki/Buddhist_calendar">Buddhist calendar</a> may have 354, 355, 384, or 385 days, depending on the year.</p>

<h2>Extracting Components From Dates</h2>

<p><code>NSDateComponents</code> can be initialized and manipulated manually, but most often, they&#39;re extracted from a specified date, using <code>NSCalendar -components:fromDate:</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSCalendar</span> <span class="o">*</span><span class="n">calendar</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSCalendar</span> <span class="n">currentCalendar</span><span class="p">];</span>
<span class="n">NSDate</span> <span class="o">*</span><span class="n">date</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
<span class="p">[</span><span class="n">calendar</span> <span class="n">components</span><span class="o">:</span><span class="p">(</span><span class="n">NSDayCalendarUnit</span> <span class="o">|</span> <span class="n">NSMonthCalendarUnit</span><span class="p">)</span> <span class="n">fromDate</span><span class="o">:</span><span class="n">date</span><span class="p">];</span>
</code></pre></div>
<p>The <code>components</code> parameter is a <a href="http://en.wikipedia.org/wiki/Bitmask">bitmask</a> of the date component values to retrieve, with many to choose from:</p>

<ul>
<li><code>NSEraCalendarUnit</code></li>
<li><code>NSYearCalendarUnit</code></li>
<li><code>NSMonthCalendarUnit</code></li>
<li><code>NSDayCalendarUnit</code></li>
<li><code>NSHourCalendarUnit</code></li>
<li><code>NSMinuteCalendarUnit</code></li>
<li><code>NSSecondCalendarUnit</code></li>
<li><code>NSWeekCalendarUnit</code></li>
<li><code>NSWeekdayCalendarUnit</code></li>
<li><code>NSWeekdayOrdinalCalendarUnit</code></li>
<li><code>NSQuarterCalendarUnit</code></li>
<li><code>NSWeekOfMonthCalendarUnit</code></li>
<li><code>NSWeekOfYearCalendarUnit</code></li>
<li><code>NSYearForWeekOfYearCalendarUnit</code></li>
<li><code>NSCalendarCalendarUnit</code></li>
<li><code>NSTimeZoneCalendarUnit</code></li>
</ul>

<blockquote>
<p>Since it would be expensive to compute all of the possible values, specify only the components that will be used in subsequent calculations (joining with <code>|</code>, the bitwise <code>OR</code> operator).</p>
</blockquote>

<h2>Relative Date Calculations</h2>

<p><code>NSDateComponents</code> objects can be used to do relative date calculations. To determining the date yesterday, next week, or 5 hours and 30 minutes from now, use <code>NSCalendar -dateByAddingComponents:toDate:options:</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSCalendar</span> <span class="o">*</span><span class="n">calendar</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSCalendar</span> <span class="n">currentCalendar</span><span class="p">];</span>
<span class="n">NSDate</span> <span class="o">*</span><span class="n">date</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>

<span class="n">NSDateComponents</span> <span class="o">*</span><span class="n">components</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSDateComponents</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="p">[</span><span class="n">components</span> <span class="n">setWeek</span><span class="o">:</span><span class="mi">1</span><span class="p">];</span>
<span class="p">[</span><span class="n">components</span> <span class="n">setHour</span><span class="o">:</span><span class="mi">12</span><span class="p">];</span>

<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;1 week and twelve hours from now: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">calendar</span> <span class="n">dateByAddingComponents</span><span class="o">:</span><span class="n">components</span> <span class="n">toDate</span><span class="o">:</span><span class="n">date</span> <span class="n">options</span><span class="o">:</span><span class="mi">0</span><span class="p">]);</span>
</code></pre></div>
<h2>Creating Dates from Components</h2>

<p>Perhaps the most powerful feature of <code>NSDateComponents</code>, however, is the ability to go the opposite direction—creating an <code>NSDate</code> object from components. <code>NSCalendar -dateFromComponents:</code> is the method used for this purpose:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSCalendar</span> <span class="o">*</span><span class="n">calendar</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSCalendar</span> <span class="n">currentCalendar</span><span class="p">];</span>

<span class="n">NSDateComponents</span> <span class="o">*</span><span class="n">components</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSDateComponents</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
<span class="p">[</span><span class="n">components</span> <span class="n">setYear</span><span class="o">:</span><span class="mi">1987</span><span class="p">];</span>
<span class="p">[</span><span class="n">components</span> <span class="n">setMonth</span><span class="o">:</span><span class="mi">3</span><span class="p">];</span>
<span class="p">[</span><span class="n">components</span> <span class="n">setDay</span><span class="o">:</span><span class="mi">17</span><span class="p">];</span>
<span class="p">[</span><span class="n">components</span> <span class="n">setHour</span><span class="o">:</span><span class="mi">14</span><span class="p">];</span>
<span class="p">[</span><span class="n">components</span> <span class="n">setMinute</span><span class="o">:</span><span class="mi">20</span><span class="p">];</span>
<span class="p">[</span><span class="n">components</span> <span class="n">setSecond</span><span class="o">:</span><span class="mi">0</span><span class="p">];</span>

<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Awesome time: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">calendar</span> <span class="n">dateFromComponents</span><span class="o">:</span><span class="n">components</span><span class="p">]);</span>
</code></pre></div>
<p>What&#39;s particularly interesting about this approach is that a date can be determined by information other than the normal month/day/year approach. So long as a date can be uniquely determined from the provided information, you&#39;ll get a result. For example, specifying the year 2013, and the 316th day of the year would return an <code>NSDate</code> for 11/12/2013 at midnight (because no time was specified, all time components default to 0).</p>

<blockquote>
<p>Note that passing inconsistent components will either result in some information being discarded, or <code>nil</code> being returned.</p>
</blockquote>

<hr>

<p><code>NSDateComponents</code> and its relationship to <code>NSCalendar</code> highlight the distinct advantage having a pedantically-engineered framework like Foundation at your disposal. You may not be doing calendar calculations every day, but when the time comes, knowing how to use <code>NSDateComponents</code> will save you eons of frustration.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Tue, 31 Jul 2012 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/nsdatecomponents/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/nsdatecomponents/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:86;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:16:"NSSortDescriptor";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:11183:"<p>Sorting: it&#39;s the mainstay of Computer Science 101 exams and whiteboarding interview questions. But when was the last time you actually needed to know how to implement Quicksort yourself?</p>

<p>When making apps, sorting is just something you can assume to be fast, and utility is a function of convenience and clarity of intention. And when it comes to that, you&#39;d be hard-pressed to find a better implementation than Foundation&#39;s <code>NSSortDescriptor</code>.</p>

<hr>

<p><code>NSSortDescriptor</code> objects are constructed with the following parameters:</p>

<blockquote>
<ul>
<li><code>key</code>: for a given collection, the key for the corresponding value to be sorted on for each object in the collection.</li>
<li><code>ascending</code>: a boolean specifying whether the collection should be sorted in ascending (<code>YES</code>) or descending (<code>NO</code>) order.</li>
</ul>
</blockquote>

<p>There is an optional third parameter that relates to how the sorted values are compared to one another. By default, this is a simple equality check, but this behavior can be changed by passing either a <code>selector</code> (<code>SEL</code>) or <code>comparator</code> (<code>NSComparator</code>).</p>

<blockquote>
<p>Any time you&#39;re sorting user-facing strings, be sure to pass the selector <code>localizedStandardCompare:</code>, which will sort according to the language rules of the current locale (locales may differ on ordering of case, diacritics, and so forth).</p>
</blockquote>

<p>Collection classes like <code>NSArray</code> and <code>NSSet</code> have methods to return sorted arrays of the objects that take an array of <code>sortDescriptors</code>. Sort descriptors are applied in order, so that if two elements happen to be tied for a particular sorting criteria, the tie is broken by any subsequent descriptors.</p>

<p>To put that into more practical terms, consider a <code>Person</code> class with properties for <code>firstName</code> &amp; <code>lastName</code> of type <code>NSString *</code>, and <code>age</code>, which is an <code>NSUInteger</code>.</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="k">@interface</span> <span class="nc">Person</span> : <span class="nc">NSObject</span>
<span class="k">@property</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">firstName</span><span class="p">;</span>
<span class="k">@property</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">lastName</span><span class="p">;</span>
<span class="k">@property</span> <span class="n">NSNumber</span> <span class="o">*</span><span class="n">age</span><span class="p">;</span>
<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">Person</span>

<span class="k">-</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">description</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">NSString</span> <span class="n">stringWithFormat</span><span class="o">:</span><span class="s">@&quot;%@ %@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">firstName</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">lastName</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">@end</span>
</code></pre></div>
<p>Given the following dataset:</p>

<table>
  <thead>
    <tr>
      <th><tt>index</tt></th>
      <th>0</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><tt>firstName</tt></td>
      <td>Alice</td>
      <td>Bob</td>
      <td>Charlie</td>
      <td>Quentin</td>
    </tr>
    <tr>
      <td><tt>lastName</tt></td>
      <td>Smith</td>
      <td>Jones</td>
      <td>Smith</td>
      <td>Alberts</td>
    </tr>
    <tr>
      <td><tt>age</tt></td>
      <td>24</td>
      <td>27</td>
      <td>33</td>
      <td>31</td>
    </tr>
  </tbody>
</table>

<p>Here are some of the different ways they can be sorted by combinations of <code>NSSortDescriptor</code>:</p>
<div class="highlight"><pre><code class="objective-c language-objective-c" data-lang="objective-c"><span class="n">NSArray</span> <span class="o">*</span><span class="n">firstNames</span> <span class="o">=</span> <span class="p">@[</span> <span class="s">@&quot;Alice&quot;</span><span class="p">,</span> <span class="s">@&quot;Bob&quot;</span><span class="p">,</span> <span class="s">@&quot;Charlie&quot;</span><span class="p">,</span> <span class="s">@&quot;Quentin&quot;</span> <span class="p">];</span>
<span class="n">NSArray</span> <span class="o">*</span><span class="n">lastNames</span> <span class="o">=</span> <span class="p">@[</span> <span class="s">@&quot;Smith&quot;</span><span class="p">,</span> <span class="s">@&quot;Jones&quot;</span><span class="p">,</span> <span class="s">@&quot;Smith&quot;</span><span class="p">,</span> <span class="s">@&quot;Alberts&quot;</span> <span class="p">];</span>
<span class="n">NSArray</span> <span class="o">*</span><span class="n">ages</span> <span class="o">=</span> <span class="p">@[</span> <span class="mi">@24</span><span class="p">,</span> <span class="mi">@27</span><span class="p">,</span> <span class="mi">@33</span><span class="p">,</span> <span class="mi">@31</span> <span class="p">];</span>

<span class="n">NSMutableArray</span> <span class="o">*</span><span class="n">people</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
<span class="p">[</span><span class="n">firstNames</span> <span class="n">enumerateObjectsUsingBlock</span><span class="o">:^</span><span class="p">(</span><span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Person</span> <span class="o">*</span><span class="n">person</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
    <span class="n">person</span><span class="p">.</span><span class="n">firstName</span> <span class="o">=</span> <span class="p">[</span><span class="n">firstNames</span> <span class="n">objectAtIndex</span><span class="o">:</span><span class="n">idx</span><span class="p">];</span>
    <span class="n">person</span><span class="p">.</span><span class="n">lastName</span> <span class="o">=</span> <span class="p">[</span><span class="n">lastNames</span> <span class="n">objectAtIndex</span><span class="o">:</span><span class="n">idx</span><span class="p">];</span>
    <span class="n">person</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="p">[</span><span class="n">ages</span> <span class="n">objectAtIndex</span><span class="o">:</span><span class="n">idx</span><span class="p">];</span>
    <span class="p">[</span><span class="n">people</span> <span class="n">addObject</span><span class="o">:</span><span class="n">person</span><span class="p">];</span>
<span class="p">}];</span>

<span class="n">NSSortDescriptor</span> <span class="o">*</span><span class="n">firstNameSortDescriptor</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSortDescriptor</span> <span class="n">sortDescriptorWithKey</span><span class="o">:</span><span class="s">@&quot;firstName&quot;</span>
  <span class="nl">ascending:</span><span class="nb">YES</span>
  <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">localizedStandardCompare</span><span class="o">:</span><span class="p">)];</span>
<span class="n">NSSortDescriptor</span> <span class="o">*</span><span class="n">lastNameSortDescriptor</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSortDescriptor</span> <span class="n">sortDescriptorWithKey</span><span class="o">:</span><span class="s">@&quot;lastName&quot;</span>
  <span class="nl">ascending:</span><span class="nb">YES</span>
  <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="n">localizedStandardCompare</span><span class="o">:</span><span class="p">)];</span>
<span class="n">NSSortDescriptor</span> <span class="o">*</span><span class="n">ageSortDescriptor</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSSortDescriptor</span> <span class="n">sortDescriptorWithKey</span><span class="o">:</span><span class="s">@&quot;age&quot;</span>
  <span class="nl">ascending:</span><span class="nb">NO</span><span class="p">];</span>

<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;By age: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">people</span> <span class="n">sortedArrayUsingDescriptors</span><span class="o">:</span><span class="p">@[</span><span class="n">ageSortDescriptor</span><span class="p">]]);</span>
<span class="c1">// &quot;Charlie Smith&quot;, &quot;Quentin Alberts&quot;, &quot;Bob Jones&quot;, &quot;Alice Smith&quot;</span>


<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;By first name: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">people</span> <span class="n">sortedArrayUsingDescriptors</span><span class="o">:</span><span class="p">@[</span><span class="n">firstNameSortDescriptor</span><span class="p">]]);</span>
<span class="c1">// &quot;Alice Smith&quot;, &quot;Bob Jones&quot;, &quot;Charlie Smith&quot;, &quot;Quentin Alberts&quot;</span>


<span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;By last name, first name: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">people</span> <span class="n">sortedArrayUsingDescriptors</span><span class="o">:</span><span class="p">@[</span><span class="n">lastNameSortDescriptor</span><span class="p">,</span> <span class="n">firstNameSortDescriptor</span><span class="p">]]);</span>
<span class="c1">// &quot;Quentin Alberts&quot;, &quot;Bob Jones&quot;, &quot;Alice Smith&quot;, &quot;Charlie Smith&quot;</span>
</code></pre></div>
<hr>

<p><code>NSSortDescriptor</code> can be found throughout Foundation and other system frameworks, playing an especially prominent role in Core Data. Anytime your own classes need to define sort ordering, follow the convention of specifying a <code>sortDescriptors</code> parameter as appropriate.</p>

<p>Because, in reality, sorting should be thought of in terms of business logic, not mathematical formulas and map-reduce functions. In this respect, <code>NSSortDescriptor</code> is a slam dunk, and will have you pining for it anytime you venture out of Objective-C and Cocoa.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Tue, 24 Jul 2012 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/nssortdescriptor/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:38:"http://nshipster.com/nssortdescriptor/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:87;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:7:"NSCache";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:3369:"<p>Poor <code>NSCache</code>, always being overshadowed by <code>NSMutableDictionary</code>. It&#39;s as if no one knew how it provides all of that garbage collection behavior that developers take great pains to re-implement themselves.</p>

<p>That&#39;s right: <code>NSCache</code> is basically just an <code>NSMutableDictionary</code> that automatically evicts objects in order to free up space in memory as needed. No need to respond to memory warnings or contrive a cache-clearing timer mechanism. The only other difference is that keys aren&#39;t copied as they are in an <code>NSMutableDictionary</code>, which is actually to its advantage (no need for keys to conform to <code>&lt;NSCopying&gt;</code>).</p>

<p>If developers only knew...</p>

<p>But you&#39;re not like other devs, right? You won&#39;t overlook <code>NSCache</code>, <em>will you</em>?</p>

<p>That&#39;s not to say that there aren&#39;t a few warts and inexplicable caveats—far from it. <code>NSCache</code> is kind of a hot mess.</p>

<p>Take <code>setObject:forKey:cost:</code>, for example. It&#39;s the same <code>setObject:forKey:</code> method as before, but with this <code>cost</code> parameter. What is that, you ask? Well, even the documentation isn&#39;t quite sure:</p>

<blockquote>
<p>The cost value is used to compute a sum encompassing the costs of all the objects in the cache. When memory is limited or when the total cost of the cache eclipses the maximum allowed total cost, the cache could begin an eviction process to remove some of its elements.</p>
</blockquote>

<p>Alright, so far so good...</p>

<blockquote>
<p>However, this eviction process is not in a guaranteed order. As a consequence, if you try to manipulate the cost values to achieve some specific behavior, the consequences could be detrimental to your program.</p>
</blockquote>

<p>Huh? So what&#39;s the point, then?</p>

<blockquote>
<p>Typically, the obvious cost is the size of the value in bytes. If that information is not readily available, you should not go through the trouble of trying to compute it, as doing so will drive up the cost of using the cache.</p>
</blockquote>

<p>So wait, what&#39;s a <em>non-obvious</em> cost value? Any guidelines for what a memory limit should be? How about an order of magnitude, even? &quot;Arbitrarily guess wrong and suffer bad performance&quot; doesn&#39;t sound so compelling...</p>

<blockquote>
<p>Pass in 0 for the cost value if you otherwise have nothing useful to pass, or simply use the setObject:forKey: method, which does not require a cost value to be passed in.</p>
</blockquote>

<p>Read: don&#39;t use this method unless you work at Apple and know the original author personally.</p>

<p>There&#39;s also a whole part about controlling whether objects are automatically evicted with <code>evictsObjectsWithDiscardedContent</code> &amp; <code>&lt;NSDiscardableContent&gt;</code>, but it will probably just cause you more problems.</p>

<p>Despite all of this, developers should be using <code>NSCache</code> a lot more than they currently are. Anything in your project that you call a &quot;cache&quot;, but isn&#39;t <code>NSCache</code> would be prime candidates for replacement. But if you do, just be sure to stick to the classics: <code>objectForKey:</code>, <code>setObject:forKey:</code> &amp; <code>removeObjectForKey:</code>.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Sat, 14 Jul 2012 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:29:"http://nshipster.com/nscache/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:29:"http://nshipster.com/nscache/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}i:88;a:6:{s:4:"data";s:52:"
        
        
        
        
        
      ";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";s:5:"child";a:1:{s:0:"";a:5:{s:5:"title";a:1:{i:0;a:5:{s:4:"data";s:10:"NSIndexSet";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:11:"description";a:1:{i:0;a:5:{s:4:"data";s:1919:"<p><code>NSIndexSet</code> (and its mutable counterpart, <code>NSMutableIndexSet</code>) is a sorted collection of unique unsigned integers. Think of it like an <code>NSRange</code> that supports non-contiguous series. It has wicked fast operations for finding indexes in ranges or set intersections, and comes with all of the convenience methods you&#39;d expect in a Foundation collection class.</p>

<p>You&#39;ll find <code>NSIndexSet</code> used throughout the Foundation framework. Anytime a method gets multiple elements from a sorted collection, such as an array or a table view&#39;s data source, you can be sure that an <code>NSIndexSet</code> parameter will be somewhere in the mix.</p>

<p>If you look hard enough, you may start to find aspects of your data model that could be represented with <code>NSIndexSet</code>. For example AFNetworking uses an index set to represent HTTP response status codes: the user defines a set of &quot;acceptable&quot; codes (in the <code>2XX</code> range, by default), and the response is checked by using <code>containsIndex:</code>.</p>

<p>Here are a few more ideas to get you thinking in terms of index sets:</p>

<ul>
<li>Have a list of user preferences, and want to store which ones are switched on or off? Use a single <code>NSIndexSet</code> in combination with an <code>enum</code> <code>typedef</code>.</li>
<li>Filtering a list of items by a set of composable conditions? Ditch the <code>NSPredicate</code>; instead, cache the indexes of objects that fulfill each condition, and then get the union or intersection of those indexes as conditions are added and removed.</li>
</ul>

<p>Overall, <code>NSIndexSet</code> is a solid class. A fair bit nerdier than its collection class siblings, but it has its place. At the very least, it&#39;s a prime example of the great functionality that you find by paying attention to what Foundation uses in its own APIs.</p>
";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:7:"pubDate";a:1:{i:0;a:5:{s:4:"data";s:31:"Sat, 07 Jul 2012 00:00:00 -0700";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"link";a:1:{i:0;a:5:{s:4:"data";s:32:"http://nshipster.com/nsindexset/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}s:4:"guid";a:1:{i:0;a:5:{s:4:"data";s:32:"http://nshipster.com/nsindexset/";s:7:"attribs";a:0:{}s:8:"xml_base";s:0:"";s:17:"xml_base_explicit";b:0;s:8:"xml_lang";s:0:"";}}}}}}}}}}}}}}}}s:4:"type";i:128;s:7:"headers";a:10:{s:10:"x-amz-id-2";s:64:"9+sWz2qoUQ6TgdTASNtN9mCMjUjV4+cZCoUajITM77moaoYFPg6FGV4HSpwAted+";s:16:"x-amz-request-id";s:16:"C34E49CB6F7523FA";s:4:"date";s:29:"Fri, 11 Apr 2014 13:11:16 GMT";s:22:"x-amz-meta-s3cmd-attrs";s:100:"uid:501/gname:staff/uname:mattt/gid:20/mode:33188/mtime:1397060857/atime:1397060184/ctime:1397060858";s:16:"content-encoding";s:4:"gzip";s:13:"last-modified";s:29:"Wed, 09 Apr 2014 16:27:45 GMT";s:4:"etag";s:34:""fdb39dd308811689f6903e1fe86de197"";s:12:"content-type";s:15:"application/xml";s:14:"content-length";s:6:"310563";s:6:"server";s:8:"AmazonS3";}s:5:"build";s:14:"20130718145142";}